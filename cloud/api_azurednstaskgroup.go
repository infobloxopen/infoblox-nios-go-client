/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type AzurednstaskgroupAPI interface {
	/*
		Get Retrieve azurednstaskgroup objects

		Returns a list of azurednstaskgroup objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AzurednstaskgroupAPIGetRequest
	*/
	Get(ctx context.Context) AzurednstaskgroupAPIGetRequest

	// GetExecute executes the request
	//  @return ListAzurednstaskgroupResponse
	GetExecute(r AzurednstaskgroupAPIGetRequest) (*ListAzurednstaskgroupResponse, *http.Response, error)
	/*
		Post Create a azurednstaskgroup object

		Creates a new azurednstaskgroup object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AzurednstaskgroupAPIPostRequest
	*/
	Post(ctx context.Context) AzurednstaskgroupAPIPostRequest

	// PostExecute executes the request
	//  @return CreateAzurednstaskgroupResponse
	PostExecute(r AzurednstaskgroupAPIPostRequest) (*CreateAzurednstaskgroupResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a azurednstaskgroup object

		Deletes a specific azurednstaskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the azurednstaskgroup object
		@return AzurednstaskgroupAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) AzurednstaskgroupAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r AzurednstaskgroupAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific azurednstaskgroup object

		Returns a specific azurednstaskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the azurednstaskgroup object
		@return AzurednstaskgroupAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) AzurednstaskgroupAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetAzurednstaskgroupResponse
	ReferenceGetExecute(r AzurednstaskgroupAPIReferenceGetRequest) (*GetAzurednstaskgroupResponse, *http.Response, error)
	/*
		ReferencePut Update a azurednstaskgroup object

		Updates a specific azurednstaskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the azurednstaskgroup object
		@return AzurednstaskgroupAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) AzurednstaskgroupAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateAzurednstaskgroupResponse
	ReferencePutExecute(r AzurednstaskgroupAPIReferencePutRequest) (*UpdateAzurednstaskgroupResponse, *http.Response, error)
}

// AzurednstaskgroupAPIService AzurednstaskgroupAPI service
type AzurednstaskgroupAPIService internal.Service

type AzurednstaskgroupAPIGetRequest struct {
	ctx            context.Context
	ApiService     AzurednstaskgroupAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r AzurednstaskgroupAPIGetRequest) ReturnFields(returnFields string) AzurednstaskgroupAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AzurednstaskgroupAPIGetRequest) ReturnFields2(returnFields2 string) AzurednstaskgroupAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r AzurednstaskgroupAPIGetRequest) MaxResults(maxResults int32) AzurednstaskgroupAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r AzurednstaskgroupAPIGetRequest) ReturnAsObject(returnAsObject int32) AzurednstaskgroupAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r AzurednstaskgroupAPIGetRequest) Paging(paging int32) AzurednstaskgroupAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r AzurednstaskgroupAPIGetRequest) PageId(pageId string) AzurednstaskgroupAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r AzurednstaskgroupAPIGetRequest) Filters(filters map[string]interface{}) AzurednstaskgroupAPIGetRequest {
	r.filters = &filters
	return r
}

func (r AzurednstaskgroupAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) AzurednstaskgroupAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r AzurednstaskgroupAPIGetRequest) Execute() (*ListAzurednstaskgroupResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve azurednstaskgroup objects

Returns a list of azurednstaskgroup objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AzurednstaskgroupAPIGetRequest
*/
func (a *AzurednstaskgroupAPIService) Get(ctx context.Context) AzurednstaskgroupAPIGetRequest {
	return AzurednstaskgroupAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListAzurednstaskgroupResponse
func (a *AzurednstaskgroupAPIService) GetExecute(r AzurednstaskgroupAPIGetRequest) (*ListAzurednstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListAzurednstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AzurednstaskgroupAPIPostRequest struct {
	ctx               context.Context
	ApiService        AzurednstaskgroupAPI
	azurednstaskgroup *Azurednstaskgroup
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to create
func (r AzurednstaskgroupAPIPostRequest) Azurednstaskgroup(azurednstaskgroup Azurednstaskgroup) AzurednstaskgroupAPIPostRequest {
	r.azurednstaskgroup = &azurednstaskgroup
	return r
}

// Enter the field names followed by comma
func (r AzurednstaskgroupAPIPostRequest) ReturnFields(returnFields string) AzurednstaskgroupAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AzurednstaskgroupAPIPostRequest) ReturnFields2(returnFields2 string) AzurednstaskgroupAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r AzurednstaskgroupAPIPostRequest) ReturnAsObject(returnAsObject int32) AzurednstaskgroupAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AzurednstaskgroupAPIPostRequest) Execute() (*CreateAzurednstaskgroupResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a azurednstaskgroup object

Creates a new azurednstaskgroup object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AzurednstaskgroupAPIPostRequest
*/
func (a *AzurednstaskgroupAPIService) Post(ctx context.Context) AzurednstaskgroupAPIPostRequest {
	return AzurednstaskgroupAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateAzurednstaskgroupResponse
func (a *AzurednstaskgroupAPIService) PostExecute(r AzurednstaskgroupAPIPostRequest) (*CreateAzurednstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateAzurednstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.azurednstaskgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("azurednstaskgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.azurednstaskgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AzurednstaskgroupAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService AzurednstaskgroupAPI
	reference  string
}

func (r AzurednstaskgroupAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a azurednstaskgroup object

Deletes a specific azurednstaskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the azurednstaskgroup object
	@return AzurednstaskgroupAPIReferenceDeleteRequest
*/
func (a *AzurednstaskgroupAPIService) ReferenceDelete(ctx context.Context, reference string) AzurednstaskgroupAPIReferenceDeleteRequest {
	return AzurednstaskgroupAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *AzurednstaskgroupAPIService) ReferenceDeleteExecute(r AzurednstaskgroupAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AzurednstaskgroupAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     AzurednstaskgroupAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r AzurednstaskgroupAPIReferenceGetRequest) ReturnFields(returnFields string) AzurednstaskgroupAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AzurednstaskgroupAPIReferenceGetRequest) ReturnFields2(returnFields2 string) AzurednstaskgroupAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r AzurednstaskgroupAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) AzurednstaskgroupAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AzurednstaskgroupAPIReferenceGetRequest) Execute() (*GetAzurednstaskgroupResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific azurednstaskgroup object

Returns a specific azurednstaskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the azurednstaskgroup object
	@return AzurednstaskgroupAPIReferenceGetRequest
*/
func (a *AzurednstaskgroupAPIService) ReferenceGet(ctx context.Context, reference string) AzurednstaskgroupAPIReferenceGetRequest {
	return AzurednstaskgroupAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetAzurednstaskgroupResponse
func (a *AzurednstaskgroupAPIService) ReferenceGetExecute(r AzurednstaskgroupAPIReferenceGetRequest) (*GetAzurednstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetAzurednstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AzurednstaskgroupAPIReferencePutRequest struct {
	ctx               context.Context
	ApiService        AzurednstaskgroupAPI
	reference         string
	azurednstaskgroup *Azurednstaskgroup
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to update
func (r AzurednstaskgroupAPIReferencePutRequest) Azurednstaskgroup(azurednstaskgroup Azurednstaskgroup) AzurednstaskgroupAPIReferencePutRequest {
	r.azurednstaskgroup = &azurednstaskgroup
	return r
}

// Enter the field names followed by comma
func (r AzurednstaskgroupAPIReferencePutRequest) ReturnFields(returnFields string) AzurednstaskgroupAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AzurednstaskgroupAPIReferencePutRequest) ReturnFields2(returnFields2 string) AzurednstaskgroupAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r AzurednstaskgroupAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) AzurednstaskgroupAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AzurednstaskgroupAPIReferencePutRequest) Execute() (*UpdateAzurednstaskgroupResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a azurednstaskgroup object

Updates a specific azurednstaskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the azurednstaskgroup object
	@return AzurednstaskgroupAPIReferencePutRequest
*/
func (a *AzurednstaskgroupAPIService) ReferencePut(ctx context.Context, reference string) AzurednstaskgroupAPIReferencePutRequest {
	return AzurednstaskgroupAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateAzurednstaskgroupResponse
func (a *AzurednstaskgroupAPIService) ReferencePutExecute(r AzurednstaskgroupAPIReferencePutRequest) (*UpdateAzurednstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateAzurednstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.azurednstaskgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("azurednstaskgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.azurednstaskgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
