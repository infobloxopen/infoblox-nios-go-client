/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type GcpdnstaskgroupAPI interface {
	/*
		Get Retrieve gcpdnstaskgroup objects

		Returns a list of gcpdnstaskgroup objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GcpdnstaskgroupAPIGetRequest
	*/
	Get(ctx context.Context) GcpdnstaskgroupAPIGetRequest

	// GetExecute executes the request
	//  @return ListGcpdnstaskgroupResponse
	GetExecute(r GcpdnstaskgroupAPIGetRequest) (*ListGcpdnstaskgroupResponse, *http.Response, error)
	/*
		Post Create a gcpdnstaskgroup object

		Creates a new gcpdnstaskgroup object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GcpdnstaskgroupAPIPostRequest
	*/
	Post(ctx context.Context) GcpdnstaskgroupAPIPostRequest

	// PostExecute executes the request
	//  @return CreateGcpdnstaskgroupResponse
	PostExecute(r GcpdnstaskgroupAPIPostRequest) (*CreateGcpdnstaskgroupResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a gcpdnstaskgroup object

		Deletes a specific gcpdnstaskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the gcpdnstaskgroup object
		@return GcpdnstaskgroupAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) GcpdnstaskgroupAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r GcpdnstaskgroupAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific gcpdnstaskgroup object

		Returns a specific gcpdnstaskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the gcpdnstaskgroup object
		@return GcpdnstaskgroupAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) GcpdnstaskgroupAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetGcpdnstaskgroupResponse
	ReferenceGetExecute(r GcpdnstaskgroupAPIReferenceGetRequest) (*GetGcpdnstaskgroupResponse, *http.Response, error)
	/*
		ReferencePut Update a gcpdnstaskgroup object

		Updates a specific gcpdnstaskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the gcpdnstaskgroup object
		@return GcpdnstaskgroupAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) GcpdnstaskgroupAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateGcpdnstaskgroupResponse
	ReferencePutExecute(r GcpdnstaskgroupAPIReferencePutRequest) (*UpdateGcpdnstaskgroupResponse, *http.Response, error)
}

// GcpdnstaskgroupAPIService GcpdnstaskgroupAPI service
type GcpdnstaskgroupAPIService internal.Service

type GcpdnstaskgroupAPIGetRequest struct {
	ctx            context.Context
	ApiService     GcpdnstaskgroupAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r GcpdnstaskgroupAPIGetRequest) ReturnFields(returnFields string) GcpdnstaskgroupAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GcpdnstaskgroupAPIGetRequest) ReturnFields2(returnFields2 string) GcpdnstaskgroupAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r GcpdnstaskgroupAPIGetRequest) MaxResults(maxResults int32) GcpdnstaskgroupAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GcpdnstaskgroupAPIGetRequest) ReturnAsObject(returnAsObject int32) GcpdnstaskgroupAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GcpdnstaskgroupAPIGetRequest) Paging(paging int32) GcpdnstaskgroupAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GcpdnstaskgroupAPIGetRequest) PageId(pageId string) GcpdnstaskgroupAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r GcpdnstaskgroupAPIGetRequest) Filters(filters map[string]interface{}) GcpdnstaskgroupAPIGetRequest {
	r.filters = &filters
	return r
}

func (r GcpdnstaskgroupAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) GcpdnstaskgroupAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GcpdnstaskgroupAPIGetRequest) Execute() (*ListGcpdnstaskgroupResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve gcpdnstaskgroup objects

Returns a list of gcpdnstaskgroup objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GcpdnstaskgroupAPIGetRequest
*/
func (a *GcpdnstaskgroupAPIService) Get(ctx context.Context) GcpdnstaskgroupAPIGetRequest {
	return GcpdnstaskgroupAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGcpdnstaskgroupResponse
func (a *GcpdnstaskgroupAPIService) GetExecute(r GcpdnstaskgroupAPIGetRequest) (*ListGcpdnstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGcpdnstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GcpdnstaskgroupAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/gcpdnstaskgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GcpdnstaskgroupAPIPostRequest struct {
	ctx             context.Context
	ApiService      GcpdnstaskgroupAPI
	gcpdnstaskgroup *Gcpdnstaskgroup
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to create
func (r GcpdnstaskgroupAPIPostRequest) Gcpdnstaskgroup(gcpdnstaskgroup Gcpdnstaskgroup) GcpdnstaskgroupAPIPostRequest {
	r.gcpdnstaskgroup = &gcpdnstaskgroup
	return r
}

// Enter the field names followed by comma
func (r GcpdnstaskgroupAPIPostRequest) ReturnFields(returnFields string) GcpdnstaskgroupAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GcpdnstaskgroupAPIPostRequest) ReturnFields2(returnFields2 string) GcpdnstaskgroupAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GcpdnstaskgroupAPIPostRequest) ReturnAsObject(returnAsObject int32) GcpdnstaskgroupAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GcpdnstaskgroupAPIPostRequest) Execute() (*CreateGcpdnstaskgroupResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a gcpdnstaskgroup object

Creates a new gcpdnstaskgroup object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GcpdnstaskgroupAPIPostRequest
*/
func (a *GcpdnstaskgroupAPIService) Post(ctx context.Context) GcpdnstaskgroupAPIPostRequest {
	return GcpdnstaskgroupAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateGcpdnstaskgroupResponse
func (a *GcpdnstaskgroupAPIService) PostExecute(r GcpdnstaskgroupAPIPostRequest) (*CreateGcpdnstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateGcpdnstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GcpdnstaskgroupAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/gcpdnstaskgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gcpdnstaskgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("gcpdnstaskgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gcpdnstaskgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GcpdnstaskgroupAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService GcpdnstaskgroupAPI
	reference  string
}

func (r GcpdnstaskgroupAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a gcpdnstaskgroup object

Deletes a specific gcpdnstaskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the gcpdnstaskgroup object
	@return GcpdnstaskgroupAPIReferenceDeleteRequest
*/
func (a *GcpdnstaskgroupAPIService) ReferenceDelete(ctx context.Context, reference string) GcpdnstaskgroupAPIReferenceDeleteRequest {
	return GcpdnstaskgroupAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *GcpdnstaskgroupAPIService) ReferenceDeleteExecute(r GcpdnstaskgroupAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GcpdnstaskgroupAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/gcpdnstaskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GcpdnstaskgroupAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     GcpdnstaskgroupAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r GcpdnstaskgroupAPIReferenceGetRequest) ReturnFields(returnFields string) GcpdnstaskgroupAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GcpdnstaskgroupAPIReferenceGetRequest) ReturnFields2(returnFields2 string) GcpdnstaskgroupAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GcpdnstaskgroupAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) GcpdnstaskgroupAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GcpdnstaskgroupAPIReferenceGetRequest) Execute() (*GetGcpdnstaskgroupResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific gcpdnstaskgroup object

Returns a specific gcpdnstaskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the gcpdnstaskgroup object
	@return GcpdnstaskgroupAPIReferenceGetRequest
*/
func (a *GcpdnstaskgroupAPIService) ReferenceGet(ctx context.Context, reference string) GcpdnstaskgroupAPIReferenceGetRequest {
	return GcpdnstaskgroupAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGcpdnstaskgroupResponse
func (a *GcpdnstaskgroupAPIService) ReferenceGetExecute(r GcpdnstaskgroupAPIReferenceGetRequest) (*GetGcpdnstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGcpdnstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GcpdnstaskgroupAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/gcpdnstaskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GcpdnstaskgroupAPIReferencePutRequest struct {
	ctx             context.Context
	ApiService      GcpdnstaskgroupAPI
	reference       string
	gcpdnstaskgroup *Gcpdnstaskgroup
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to update
func (r GcpdnstaskgroupAPIReferencePutRequest) Gcpdnstaskgroup(gcpdnstaskgroup Gcpdnstaskgroup) GcpdnstaskgroupAPIReferencePutRequest {
	r.gcpdnstaskgroup = &gcpdnstaskgroup
	return r
}

// Enter the field names followed by comma
func (r GcpdnstaskgroupAPIReferencePutRequest) ReturnFields(returnFields string) GcpdnstaskgroupAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GcpdnstaskgroupAPIReferencePutRequest) ReturnFields2(returnFields2 string) GcpdnstaskgroupAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GcpdnstaskgroupAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) GcpdnstaskgroupAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GcpdnstaskgroupAPIReferencePutRequest) Execute() (*UpdateGcpdnstaskgroupResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a gcpdnstaskgroup object

Updates a specific gcpdnstaskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the gcpdnstaskgroup object
	@return GcpdnstaskgroupAPIReferencePutRequest
*/
func (a *GcpdnstaskgroupAPIService) ReferencePut(ctx context.Context, reference string) GcpdnstaskgroupAPIReferencePutRequest {
	return GcpdnstaskgroupAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateGcpdnstaskgroupResponse
func (a *GcpdnstaskgroupAPIService) ReferencePutExecute(r GcpdnstaskgroupAPIReferencePutRequest) (*UpdateGcpdnstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateGcpdnstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GcpdnstaskgroupAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/gcpdnstaskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gcpdnstaskgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("gcpdnstaskgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gcpdnstaskgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
