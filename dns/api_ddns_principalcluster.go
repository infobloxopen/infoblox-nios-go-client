/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DdnsPrincipalclusterAPI interface {
	/*
		DdnsprincipalclusterGet Retrieve ddns:principalcluster objects

		Returns a list of ddns:principalcluster objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest
	*/
	DdnsprincipalclusterGet(ctx context.Context) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest

	// DdnsprincipalclusterGetExecute executes the request
	//  @return ListDdnsPrincipalclusterResponse
	DdnsprincipalclusterGetExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) (*ListDdnsPrincipalclusterResponse, *http.Response, error)
	/*
		DdnsprincipalclusterPost Create a ddns:principalcluster object

		Creates a new ddns:principalcluster object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest
	*/
	DdnsprincipalclusterPost(ctx context.Context) DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest

	// DdnsprincipalclusterPostExecute executes the request
	//  @return CreateDdnsPrincipalclusterResponse
	DdnsprincipalclusterPostExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest) (*CreateDdnsPrincipalclusterResponse, *http.Response, error)
	/*
		DdnsprincipalclusterReferenceDelete Delete a ddns:principalcluster object

		Deletes a specific ddns:principalcluster object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ddns:principalcluster object
		@return DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceDeleteRequest
	*/
	DdnsprincipalclusterReferenceDelete(ctx context.Context, reference string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceDeleteRequest

	// DdnsprincipalclusterReferenceDeleteExecute executes the request
	DdnsprincipalclusterReferenceDeleteExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceDeleteRequest) (*http.Response, error)
	/*
		DdnsprincipalclusterReferenceGet Get a specific ddns:principalcluster object

		Returns a specific ddns:principalcluster object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ddns:principalcluster object
		@return DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest
	*/
	DdnsprincipalclusterReferenceGet(ctx context.Context, reference string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest

	// DdnsprincipalclusterReferenceGetExecute executes the request
	//  @return GetDdnsPrincipalclusterResponse
	DdnsprincipalclusterReferenceGetExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest) (*GetDdnsPrincipalclusterResponse, *http.Response, error)
	/*
		DdnsprincipalclusterReferencePut Update a ddns:principalcluster object

		Updates a specific ddns:principalcluster object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ddns:principalcluster object
		@return DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest
	*/
	DdnsprincipalclusterReferencePut(ctx context.Context, reference string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest

	// DdnsprincipalclusterReferencePutExecute executes the request
	//  @return UpdateDdnsPrincipalclusterResponse
	DdnsprincipalclusterReferencePutExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest) (*UpdateDdnsPrincipalclusterResponse, *http.Response, error)
}

// DdnsPrincipalclusterAPIService DdnsPrincipalclusterAPI service
type DdnsPrincipalclusterAPIService internal.Service

type DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest struct {
	ctx            context.Context
	ApiService     DdnsPrincipalclusterAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) ReturnFields(returnFields string) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) ReturnFields2(returnFields2 string) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) MaxResults(maxResults int32) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) Paging(paging int32) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) PageId(pageId string) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest {
	r.pageId = &pageId
	return r
}

func (r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) Filters(filters map[string]interface{}) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest {
	r.filters = &filters
	return r
}

func (r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) Execute() (*ListDdnsPrincipalclusterResponse, *http.Response, error) {
	return r.ApiService.DdnsprincipalclusterGetExecute(r)
}

/*
DdnsprincipalclusterGet Retrieve ddns:principalcluster objects

Returns a list of ddns:principalcluster objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest
*/
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterGet(ctx context.Context) DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest {
	return DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDdnsPrincipalclusterResponse
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterGetExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterGetRequest) (*ListDdnsPrincipalclusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDdnsPrincipalclusterResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterAPIService.DdnsprincipalclusterGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest struct {
	ctx                  context.Context
	ApiService           DdnsPrincipalclusterAPI
	ddnsPrincipalcluster *DdnsPrincipalcluster
	returnFields         *string
	returnFields2        *string
	returnAsObject       *int32
}

// Object data to create
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest) DdnsPrincipalcluster(ddnsPrincipalcluster DdnsPrincipalcluster) DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest {
	r.ddnsPrincipalcluster = &ddnsPrincipalcluster
	return r
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest) ReturnFields(returnFields string) DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest) ReturnFields2(returnFields2 string) DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest) Execute() (*CreateDdnsPrincipalclusterResponse, *http.Response, error) {
	return r.ApiService.DdnsprincipalclusterPostExecute(r)
}

/*
DdnsprincipalclusterPost Create a ddns:principalcluster object

Creates a new ddns:principalcluster object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest
*/
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterPost(ctx context.Context) DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest {
	return DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDdnsPrincipalclusterResponse
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterPostExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterPostRequest) (*CreateDdnsPrincipalclusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDdnsPrincipalclusterResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterAPIService.DdnsprincipalclusterPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ddnsPrincipalcluster == nil {
		return localVarReturnValue, nil, internal.ReportError("ddnsPrincipalcluster is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ddnsPrincipalcluster
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DdnsPrincipalclusterAPI
	reference  string
}

func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DdnsprincipalclusterReferenceDeleteExecute(r)
}

/*
DdnsprincipalclusterReferenceDelete Delete a ddns:principalcluster object

Deletes a specific ddns:principalcluster object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ddns:principalcluster object
	@return DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceDeleteRequest
*/
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterReferenceDelete(ctx context.Context, reference string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceDeleteRequest {
	return DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterReferenceDeleteExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterAPIService.DdnsprincipalclusterReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DdnsPrincipalclusterAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest) ReturnFields(returnFields string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest) ReturnFields2(returnFields2 string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest) Execute() (*GetDdnsPrincipalclusterResponse, *http.Response, error) {
	return r.ApiService.DdnsprincipalclusterReferenceGetExecute(r)
}

/*
DdnsprincipalclusterReferenceGet Get a specific ddns:principalcluster object

Returns a specific ddns:principalcluster object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ddns:principalcluster object
	@return DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest
*/
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterReferenceGet(ctx context.Context, reference string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest {
	return DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDdnsPrincipalclusterResponse
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterReferenceGetExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterReferenceGetRequest) (*GetDdnsPrincipalclusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDdnsPrincipalclusterResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterAPIService.DdnsprincipalclusterReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest struct {
	ctx                  context.Context
	ApiService           DdnsPrincipalclusterAPI
	reference            string
	ddnsPrincipalcluster *DdnsPrincipalcluster
	returnFields         *string
	returnFields2        *string
	returnAsObject       *int32
}

// Object data to update
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest) DdnsPrincipalcluster(ddnsPrincipalcluster DdnsPrincipalcluster) DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest {
	r.ddnsPrincipalcluster = &ddnsPrincipalcluster
	return r
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest) ReturnFields(returnFields string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest) ReturnFields2(returnFields2 string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest) Execute() (*UpdateDdnsPrincipalclusterResponse, *http.Response, error) {
	return r.ApiService.DdnsprincipalclusterReferencePutExecute(r)
}

/*
DdnsprincipalclusterReferencePut Update a ddns:principalcluster object

Updates a specific ddns:principalcluster object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ddns:principalcluster object
	@return DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest
*/
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterReferencePut(ctx context.Context, reference string) DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest {
	return DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDdnsPrincipalclusterResponse
func (a *DdnsPrincipalclusterAPIService) DdnsprincipalclusterReferencePutExecute(r DdnsPrincipalclusterAPIDdnsprincipalclusterReferencePutRequest) (*UpdateDdnsPrincipalclusterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDdnsPrincipalclusterResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterAPIService.DdnsprincipalclusterReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ddnsPrincipalcluster == nil {
		return localVarReturnValue, nil, internal.ReportError("ddnsPrincipalcluster is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ddnsPrincipalcluster
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
