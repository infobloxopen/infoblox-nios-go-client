/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DdnsPrincipalclusterGroupAPI interface {
	/*
		DdnsprincipalclustergroupGet Retrieve ddns:principalcluster:group objects

		Returns a list of ddns:principalcluster:group objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest
	*/
	DdnsprincipalclustergroupGet(ctx context.Context) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest

	// DdnsprincipalclustergroupGetExecute executes the request
	//  @return ListDdnsPrincipalclusterGroupResponse
	DdnsprincipalclustergroupGetExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) (*ListDdnsPrincipalclusterGroupResponse, *http.Response, error)
	/*
		DdnsprincipalclustergroupPost Create a ddns:principalcluster:group object

		Creates a new ddns:principalcluster:group object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest
	*/
	DdnsprincipalclustergroupPost(ctx context.Context) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest

	// DdnsprincipalclustergroupPostExecute executes the request
	//  @return CreateDdnsPrincipalclusterGroupResponse
	DdnsprincipalclustergroupPostExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest) (*CreateDdnsPrincipalclusterGroupResponse, *http.Response, error)
	/*
		DdnsprincipalclustergroupReferenceDelete Delete a ddns:principalcluster:group object

		Deletes a specific ddns:principalcluster:group object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ddns:principalcluster:group object
		@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceDeleteRequest
	*/
	DdnsprincipalclustergroupReferenceDelete(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceDeleteRequest

	// DdnsprincipalclustergroupReferenceDeleteExecute executes the request
	DdnsprincipalclustergroupReferenceDeleteExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceDeleteRequest) (*http.Response, error)
	/*
		DdnsprincipalclustergroupReferenceGet Get a specific ddns:principalcluster:group object

		Returns a specific ddns:principalcluster:group object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ddns:principalcluster:group object
		@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest
	*/
	DdnsprincipalclustergroupReferenceGet(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest

	// DdnsprincipalclustergroupReferenceGetExecute executes the request
	//  @return GetDdnsPrincipalclusterGroupResponse
	DdnsprincipalclustergroupReferenceGetExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest) (*GetDdnsPrincipalclusterGroupResponse, *http.Response, error)
	/*
		DdnsprincipalclustergroupReferencePut Update a ddns:principalcluster:group object

		Updates a specific ddns:principalcluster:group object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ddns:principalcluster:group object
		@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest
	*/
	DdnsprincipalclustergroupReferencePut(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest

	// DdnsprincipalclustergroupReferencePutExecute executes the request
	//  @return UpdateDdnsPrincipalclusterGroupResponse
	DdnsprincipalclustergroupReferencePutExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest) (*UpdateDdnsPrincipalclusterGroupResponse, *http.Response, error)
}

// DdnsPrincipalclusterGroupAPIService DdnsPrincipalclusterGroupAPI service
type DdnsPrincipalclusterGroupAPIService internal.Service

type DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest struct {
	ctx            context.Context
	ApiService     DdnsPrincipalclusterGroupAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) ReturnFields(returnFields string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) ReturnFields2(returnFields2 string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) MaxResults(maxResults int32) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) Paging(paging int32) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) PageId(pageId string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest {
	r.pageId = &pageId
	return r
}

func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) Filters(filters map[string]interface{}) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest {
	r.filters = &filters
	return r
}

func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) Execute() (*ListDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	return r.ApiService.DdnsprincipalclustergroupGetExecute(r)
}

/*
DdnsprincipalclustergroupGet Retrieve ddns:principalcluster:group objects

Returns a list of ddns:principalcluster:group objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupGet(ctx context.Context) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest {
	return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDdnsPrincipalclusterGroupResponse
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupGetExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupGetRequest) (*ListDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDdnsPrincipalclusterGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.DdnsprincipalclustergroupGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest struct {
	ctx                       context.Context
	ApiService                DdnsPrincipalclusterGroupAPI
	ddnsPrincipalclusterGroup *DdnsPrincipalclusterGroup
	returnFields              *string
	returnFields2             *string
	returnAsObject            *int32
}

// Object data to create
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest) DdnsPrincipalclusterGroup(ddnsPrincipalclusterGroup DdnsPrincipalclusterGroup) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest {
	r.ddnsPrincipalclusterGroup = &ddnsPrincipalclusterGroup
	return r
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest) ReturnFields(returnFields string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest) ReturnFields2(returnFields2 string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest) Execute() (*CreateDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	return r.ApiService.DdnsprincipalclustergroupPostExecute(r)
}

/*
DdnsprincipalclustergroupPost Create a ddns:principalcluster:group object

Creates a new ddns:principalcluster:group object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupPost(ctx context.Context) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest {
	return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDdnsPrincipalclusterGroupResponse
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupPostExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupPostRequest) (*CreateDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDdnsPrincipalclusterGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.DdnsprincipalclustergroupPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ddnsPrincipalclusterGroup == nil {
		return localVarReturnValue, nil, internal.ReportError("ddnsPrincipalclusterGroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ddnsPrincipalclusterGroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DdnsPrincipalclusterGroupAPI
	reference  string
}

func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DdnsprincipalclustergroupReferenceDeleteExecute(r)
}

/*
DdnsprincipalclustergroupReferenceDelete Delete a ddns:principalcluster:group object

Deletes a specific ddns:principalcluster:group object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ddns:principalcluster:group object
	@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceDeleteRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupReferenceDelete(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceDeleteRequest {
	return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupReferenceDeleteExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.DdnsprincipalclustergroupReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DdnsPrincipalclusterGroupAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest) ReturnFields(returnFields string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest) ReturnFields2(returnFields2 string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest) Execute() (*GetDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	return r.ApiService.DdnsprincipalclustergroupReferenceGetExecute(r)
}

/*
DdnsprincipalclustergroupReferenceGet Get a specific ddns:principalcluster:group object

Returns a specific ddns:principalcluster:group object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ddns:principalcluster:group object
	@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupReferenceGet(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest {
	return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDdnsPrincipalclusterGroupResponse
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupReferenceGetExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferenceGetRequest) (*GetDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDdnsPrincipalclusterGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.DdnsprincipalclustergroupReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest struct {
	ctx                       context.Context
	ApiService                DdnsPrincipalclusterGroupAPI
	reference                 string
	ddnsPrincipalclusterGroup *DdnsPrincipalclusterGroup
	returnFields              *string
	returnFields2             *string
	returnAsObject            *int32
}

// Object data to update
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest) DdnsPrincipalclusterGroup(ddnsPrincipalclusterGroup DdnsPrincipalclusterGroup) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest {
	r.ddnsPrincipalclusterGroup = &ddnsPrincipalclusterGroup
	return r
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest) ReturnFields(returnFields string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest) ReturnFields2(returnFields2 string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest) Execute() (*UpdateDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	return r.ApiService.DdnsprincipalclustergroupReferencePutExecute(r)
}

/*
DdnsprincipalclustergroupReferencePut Update a ddns:principalcluster:group object

Updates a specific ddns:principalcluster:group object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ddns:principalcluster:group object
	@return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupReferencePut(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest {
	return DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDdnsPrincipalclusterGroupResponse
func (a *DdnsPrincipalclusterGroupAPIService) DdnsprincipalclustergroupReferencePutExecute(r DdnsPrincipalclusterGroupAPIDdnsprincipalclustergroupReferencePutRequest) (*UpdateDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDdnsPrincipalclusterGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.DdnsprincipalclustergroupReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ddnsPrincipalclusterGroup == nil {
		return localVarReturnValue, nil, internal.ReportError("ddnsPrincipalclusterGroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ddnsPrincipalclusterGroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
