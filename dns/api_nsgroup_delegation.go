/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NsgroupDelegationAPI interface {
	/*
		NsgroupdelegationGet Retrieve nsgroup:delegation objects

		Returns a list of nsgroup:delegation objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupDelegationAPINsgroupdelegationGetRequest
	*/
	NsgroupdelegationGet(ctx context.Context) NsgroupDelegationAPINsgroupdelegationGetRequest

	// NsgroupdelegationGetExecute executes the request
	//  @return ListNsgroupDelegationResponse
	NsgroupdelegationGetExecute(r NsgroupDelegationAPINsgroupdelegationGetRequest) (*ListNsgroupDelegationResponse, *http.Response, error)
	/*
		NsgroupdelegationPost Create a nsgroup:delegation object

		Creates a new nsgroup:delegation object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupDelegationAPINsgroupdelegationPostRequest
	*/
	NsgroupdelegationPost(ctx context.Context) NsgroupDelegationAPINsgroupdelegationPostRequest

	// NsgroupdelegationPostExecute executes the request
	//  @return CreateNsgroupDelegationResponse
	NsgroupdelegationPostExecute(r NsgroupDelegationAPINsgroupdelegationPostRequest) (*CreateNsgroupDelegationResponse, *http.Response, error)
	/*
		NsgroupdelegationReferenceDelete Delete a nsgroup:delegation object

		Deletes a specific nsgroup:delegation object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:delegation object
		@return NsgroupDelegationAPINsgroupdelegationReferenceDeleteRequest
	*/
	NsgroupdelegationReferenceDelete(ctx context.Context, reference string) NsgroupDelegationAPINsgroupdelegationReferenceDeleteRequest

	// NsgroupdelegationReferenceDeleteExecute executes the request
	NsgroupdelegationReferenceDeleteExecute(r NsgroupDelegationAPINsgroupdelegationReferenceDeleteRequest) (*http.Response, error)
	/*
		NsgroupdelegationReferenceGet Get a specific nsgroup:delegation object

		Returns a specific nsgroup:delegation object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:delegation object
		@return NsgroupDelegationAPINsgroupdelegationReferenceGetRequest
	*/
	NsgroupdelegationReferenceGet(ctx context.Context, reference string) NsgroupDelegationAPINsgroupdelegationReferenceGetRequest

	// NsgroupdelegationReferenceGetExecute executes the request
	//  @return GetNsgroupDelegationResponse
	NsgroupdelegationReferenceGetExecute(r NsgroupDelegationAPINsgroupdelegationReferenceGetRequest) (*GetNsgroupDelegationResponse, *http.Response, error)
	/*
		NsgroupdelegationReferencePut Update a nsgroup:delegation object

		Updates a specific nsgroup:delegation object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:delegation object
		@return NsgroupDelegationAPINsgroupdelegationReferencePutRequest
	*/
	NsgroupdelegationReferencePut(ctx context.Context, reference string) NsgroupDelegationAPINsgroupdelegationReferencePutRequest

	// NsgroupdelegationReferencePutExecute executes the request
	//  @return UpdateNsgroupDelegationResponse
	NsgroupdelegationReferencePutExecute(r NsgroupDelegationAPINsgroupdelegationReferencePutRequest) (*UpdateNsgroupDelegationResponse, *http.Response, error)
}

// NsgroupDelegationAPIService NsgroupDelegationAPI service
type NsgroupDelegationAPIService internal.Service

type NsgroupDelegationAPINsgroupdelegationGetRequest struct {
	ctx            context.Context
	ApiService     NsgroupDelegationAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r NsgroupDelegationAPINsgroupdelegationGetRequest) ReturnFields(returnFields string) NsgroupDelegationAPINsgroupdelegationGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupDelegationAPINsgroupdelegationGetRequest) ReturnFields2(returnFields2 string) NsgroupDelegationAPINsgroupdelegationGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r NsgroupDelegationAPINsgroupdelegationGetRequest) MaxResults(maxResults int32) NsgroupDelegationAPINsgroupdelegationGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NsgroupDelegationAPINsgroupdelegationGetRequest) ReturnAsObject(returnAsObject int32) NsgroupDelegationAPINsgroupdelegationGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NsgroupDelegationAPINsgroupdelegationGetRequest) Paging(paging int32) NsgroupDelegationAPINsgroupdelegationGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NsgroupDelegationAPINsgroupdelegationGetRequest) PageId(pageId string) NsgroupDelegationAPINsgroupdelegationGetRequest {
	r.pageId = &pageId
	return r
}

func (r NsgroupDelegationAPINsgroupdelegationGetRequest) Filters(filters map[string]interface{}) NsgroupDelegationAPINsgroupdelegationGetRequest {
	r.filters = &filters
	return r
}

func (r NsgroupDelegationAPINsgroupdelegationGetRequest) Extattrfilter(extattrfilter map[string]interface{}) NsgroupDelegationAPINsgroupdelegationGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NsgroupDelegationAPINsgroupdelegationGetRequest) Execute() (*ListNsgroupDelegationResponse, *http.Response, error) {
	return r.ApiService.NsgroupdelegationGetExecute(r)
}

/*
NsgroupdelegationGet Retrieve nsgroup:delegation objects

Returns a list of nsgroup:delegation objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupDelegationAPINsgroupdelegationGetRequest
*/
func (a *NsgroupDelegationAPIService) NsgroupdelegationGet(ctx context.Context) NsgroupDelegationAPINsgroupdelegationGetRequest {
	return NsgroupDelegationAPINsgroupdelegationGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNsgroupDelegationResponse
func (a *NsgroupDelegationAPIService) NsgroupdelegationGetExecute(r NsgroupDelegationAPINsgroupdelegationGetRequest) (*ListNsgroupDelegationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNsgroupDelegationResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.NsgroupdelegationGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupDelegationAPINsgroupdelegationPostRequest struct {
	ctx               context.Context
	ApiService        NsgroupDelegationAPI
	nsgroupDelegation *NsgroupDelegation
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to create
func (r NsgroupDelegationAPINsgroupdelegationPostRequest) NsgroupDelegation(nsgroupDelegation NsgroupDelegation) NsgroupDelegationAPINsgroupdelegationPostRequest {
	r.nsgroupDelegation = &nsgroupDelegation
	return r
}

// Enter the field names followed by comma
func (r NsgroupDelegationAPINsgroupdelegationPostRequest) ReturnFields(returnFields string) NsgroupDelegationAPINsgroupdelegationPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupDelegationAPINsgroupdelegationPostRequest) ReturnFields2(returnFields2 string) NsgroupDelegationAPINsgroupdelegationPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupDelegationAPINsgroupdelegationPostRequest) ReturnAsObject(returnAsObject int32) NsgroupDelegationAPINsgroupdelegationPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupDelegationAPINsgroupdelegationPostRequest) Execute() (*CreateNsgroupDelegationResponse, *http.Response, error) {
	return r.ApiService.NsgroupdelegationPostExecute(r)
}

/*
NsgroupdelegationPost Create a nsgroup:delegation object

Creates a new nsgroup:delegation object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupDelegationAPINsgroupdelegationPostRequest
*/
func (a *NsgroupDelegationAPIService) NsgroupdelegationPost(ctx context.Context) NsgroupDelegationAPINsgroupdelegationPostRequest {
	return NsgroupDelegationAPINsgroupdelegationPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNsgroupDelegationResponse
func (a *NsgroupDelegationAPIService) NsgroupdelegationPostExecute(r NsgroupDelegationAPINsgroupdelegationPostRequest) (*CreateNsgroupDelegationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNsgroupDelegationResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.NsgroupdelegationPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupDelegation == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupDelegation is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupDelegation != nil {
		if r.nsgroupDelegation.Extattrs == nil {
			r.nsgroupDelegation.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupDelegation.Extattrs)[k]; !ok {
				(*r.nsgroupDelegation.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupDelegation
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupDelegationAPINsgroupdelegationReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService NsgroupDelegationAPI
	reference  string
}

func (r NsgroupDelegationAPINsgroupdelegationReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.NsgroupdelegationReferenceDeleteExecute(r)
}

/*
NsgroupdelegationReferenceDelete Delete a nsgroup:delegation object

Deletes a specific nsgroup:delegation object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:delegation object
	@return NsgroupDelegationAPINsgroupdelegationReferenceDeleteRequest
*/
func (a *NsgroupDelegationAPIService) NsgroupdelegationReferenceDelete(ctx context.Context, reference string) NsgroupDelegationAPINsgroupdelegationReferenceDeleteRequest {
	return NsgroupDelegationAPINsgroupdelegationReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NsgroupDelegationAPIService) NsgroupdelegationReferenceDeleteExecute(r NsgroupDelegationAPINsgroupdelegationReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.NsgroupdelegationReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NsgroupDelegationAPINsgroupdelegationReferenceGetRequest struct {
	ctx            context.Context
	ApiService     NsgroupDelegationAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r NsgroupDelegationAPINsgroupdelegationReferenceGetRequest) ReturnFields(returnFields string) NsgroupDelegationAPINsgroupdelegationReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupDelegationAPINsgroupdelegationReferenceGetRequest) ReturnFields2(returnFields2 string) NsgroupDelegationAPINsgroupdelegationReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupDelegationAPINsgroupdelegationReferenceGetRequest) ReturnAsObject(returnAsObject int32) NsgroupDelegationAPINsgroupdelegationReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupDelegationAPINsgroupdelegationReferenceGetRequest) Execute() (*GetNsgroupDelegationResponse, *http.Response, error) {
	return r.ApiService.NsgroupdelegationReferenceGetExecute(r)
}

/*
NsgroupdelegationReferenceGet Get a specific nsgroup:delegation object

Returns a specific nsgroup:delegation object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:delegation object
	@return NsgroupDelegationAPINsgroupdelegationReferenceGetRequest
*/
func (a *NsgroupDelegationAPIService) NsgroupdelegationReferenceGet(ctx context.Context, reference string) NsgroupDelegationAPINsgroupdelegationReferenceGetRequest {
	return NsgroupDelegationAPINsgroupdelegationReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNsgroupDelegationResponse
func (a *NsgroupDelegationAPIService) NsgroupdelegationReferenceGetExecute(r NsgroupDelegationAPINsgroupdelegationReferenceGetRequest) (*GetNsgroupDelegationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNsgroupDelegationResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.NsgroupdelegationReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupDelegationAPINsgroupdelegationReferencePutRequest struct {
	ctx               context.Context
	ApiService        NsgroupDelegationAPI
	reference         string
	nsgroupDelegation *NsgroupDelegation
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to update
func (r NsgroupDelegationAPINsgroupdelegationReferencePutRequest) NsgroupDelegation(nsgroupDelegation NsgroupDelegation) NsgroupDelegationAPINsgroupdelegationReferencePutRequest {
	r.nsgroupDelegation = &nsgroupDelegation
	return r
}

// Enter the field names followed by comma
func (r NsgroupDelegationAPINsgroupdelegationReferencePutRequest) ReturnFields(returnFields string) NsgroupDelegationAPINsgroupdelegationReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupDelegationAPINsgroupdelegationReferencePutRequest) ReturnFields2(returnFields2 string) NsgroupDelegationAPINsgroupdelegationReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupDelegationAPINsgroupdelegationReferencePutRequest) ReturnAsObject(returnAsObject int32) NsgroupDelegationAPINsgroupdelegationReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupDelegationAPINsgroupdelegationReferencePutRequest) Execute() (*UpdateNsgroupDelegationResponse, *http.Response, error) {
	return r.ApiService.NsgroupdelegationReferencePutExecute(r)
}

/*
NsgroupdelegationReferencePut Update a nsgroup:delegation object

Updates a specific nsgroup:delegation object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:delegation object
	@return NsgroupDelegationAPINsgroupdelegationReferencePutRequest
*/
func (a *NsgroupDelegationAPIService) NsgroupdelegationReferencePut(ctx context.Context, reference string) NsgroupDelegationAPINsgroupdelegationReferencePutRequest {
	return NsgroupDelegationAPINsgroupdelegationReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNsgroupDelegationResponse
func (a *NsgroupDelegationAPIService) NsgroupdelegationReferencePutExecute(r NsgroupDelegationAPINsgroupdelegationReferencePutRequest) (*UpdateNsgroupDelegationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNsgroupDelegationResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.NsgroupdelegationReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupDelegation == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupDelegation is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupDelegation != nil {
		if r.nsgroupDelegation.Extattrs == nil {
			r.nsgroupDelegation.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupDelegation.Extattrs)[k]; !ok {
				(*r.nsgroupDelegation.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupDelegation
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
