/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NsgroupForwardingmemberAPI interface {
	/*
		NsgroupforwardingmemberGet Retrieve nsgroup:forwardingmember objects

		Returns a list of nsgroup:forwardingmember objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest
	*/
	NsgroupforwardingmemberGet(ctx context.Context) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest

	// NsgroupforwardingmemberGetExecute executes the request
	//  @return ListNsgroupForwardingmemberResponse
	NsgroupforwardingmemberGetExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) (*ListNsgroupForwardingmemberResponse, *http.Response, error)
	/*
		NsgroupforwardingmemberPost Create a nsgroup:forwardingmember object

		Creates a new nsgroup:forwardingmember object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest
	*/
	NsgroupforwardingmemberPost(ctx context.Context) NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest

	// NsgroupforwardingmemberPostExecute executes the request
	//  @return CreateNsgroupForwardingmemberResponse
	NsgroupforwardingmemberPostExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest) (*CreateNsgroupForwardingmemberResponse, *http.Response, error)
	/*
		NsgroupforwardingmemberReferenceDelete Delete a nsgroup:forwardingmember object

		Deletes a specific nsgroup:forwardingmember object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:forwardingmember object
		@return NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceDeleteRequest
	*/
	NsgroupforwardingmemberReferenceDelete(ctx context.Context, reference string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceDeleteRequest

	// NsgroupforwardingmemberReferenceDeleteExecute executes the request
	NsgroupforwardingmemberReferenceDeleteExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceDeleteRequest) (*http.Response, error)
	/*
		NsgroupforwardingmemberReferenceGet Get a specific nsgroup:forwardingmember object

		Returns a specific nsgroup:forwardingmember object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:forwardingmember object
		@return NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest
	*/
	NsgroupforwardingmemberReferenceGet(ctx context.Context, reference string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest

	// NsgroupforwardingmemberReferenceGetExecute executes the request
	//  @return GetNsgroupForwardingmemberResponse
	NsgroupforwardingmemberReferenceGetExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest) (*GetNsgroupForwardingmemberResponse, *http.Response, error)
	/*
		NsgroupforwardingmemberReferencePut Update a nsgroup:forwardingmember object

		Updates a specific nsgroup:forwardingmember object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:forwardingmember object
		@return NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest
	*/
	NsgroupforwardingmemberReferencePut(ctx context.Context, reference string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest

	// NsgroupforwardingmemberReferencePutExecute executes the request
	//  @return UpdateNsgroupForwardingmemberResponse
	NsgroupforwardingmemberReferencePutExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest) (*UpdateNsgroupForwardingmemberResponse, *http.Response, error)
}

// NsgroupForwardingmemberAPIService NsgroupForwardingmemberAPI service
type NsgroupForwardingmemberAPIService internal.Service

type NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest struct {
	ctx            context.Context
	ApiService     NsgroupForwardingmemberAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) ReturnFields(returnFields string) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) ReturnFields2(returnFields2 string) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) MaxResults(maxResults int32) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) Paging(paging int32) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) PageId(pageId string) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest {
	r.pageId = &pageId
	return r
}

func (r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) Filters(filters map[string]interface{}) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest {
	r.filters = &filters
	return r
}

func (r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) Extattrfilter(extattrfilter map[string]interface{}) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) Execute() (*ListNsgroupForwardingmemberResponse, *http.Response, error) {
	return r.ApiService.NsgroupforwardingmemberGetExecute(r)
}

/*
NsgroupforwardingmemberGet Retrieve nsgroup:forwardingmember objects

Returns a list of nsgroup:forwardingmember objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest
*/
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberGet(ctx context.Context) NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest {
	return NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNsgroupForwardingmemberResponse
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberGetExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberGetRequest) (*ListNsgroupForwardingmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNsgroupForwardingmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.NsgroupforwardingmemberGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest struct {
	ctx                     context.Context
	ApiService              NsgroupForwardingmemberAPI
	nsgroupForwardingmember *NsgroupForwardingmember
	returnFields            *string
	returnFields2           *string
	returnAsObject          *int32
}

// Object data to create
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest) NsgroupForwardingmember(nsgroupForwardingmember NsgroupForwardingmember) NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest {
	r.nsgroupForwardingmember = &nsgroupForwardingmember
	return r
}

// Enter the field names followed by comma
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest) ReturnFields(returnFields string) NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest) ReturnFields2(returnFields2 string) NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest) Execute() (*CreateNsgroupForwardingmemberResponse, *http.Response, error) {
	return r.ApiService.NsgroupforwardingmemberPostExecute(r)
}

/*
NsgroupforwardingmemberPost Create a nsgroup:forwardingmember object

Creates a new nsgroup:forwardingmember object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest
*/
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberPost(ctx context.Context) NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest {
	return NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNsgroupForwardingmemberResponse
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberPostExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberPostRequest) (*CreateNsgroupForwardingmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNsgroupForwardingmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.NsgroupforwardingmemberPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupForwardingmember == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupForwardingmember is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupForwardingmember != nil {
		if r.nsgroupForwardingmember.Extattrs == nil {
			r.nsgroupForwardingmember.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupForwardingmember.Extattrs)[k]; !ok {
				(*r.nsgroupForwardingmember.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupForwardingmember
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService NsgroupForwardingmemberAPI
	reference  string
}

func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.NsgroupforwardingmemberReferenceDeleteExecute(r)
}

/*
NsgroupforwardingmemberReferenceDelete Delete a nsgroup:forwardingmember object

Deletes a specific nsgroup:forwardingmember object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:forwardingmember object
	@return NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceDeleteRequest
*/
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberReferenceDelete(ctx context.Context, reference string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceDeleteRequest {
	return NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberReferenceDeleteExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.NsgroupforwardingmemberReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest struct {
	ctx            context.Context
	ApiService     NsgroupForwardingmemberAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest) ReturnFields(returnFields string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest) ReturnFields2(returnFields2 string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest) Execute() (*GetNsgroupForwardingmemberResponse, *http.Response, error) {
	return r.ApiService.NsgroupforwardingmemberReferenceGetExecute(r)
}

/*
NsgroupforwardingmemberReferenceGet Get a specific nsgroup:forwardingmember object

Returns a specific nsgroup:forwardingmember object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:forwardingmember object
	@return NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest
*/
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberReferenceGet(ctx context.Context, reference string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest {
	return NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNsgroupForwardingmemberResponse
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberReferenceGetExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberReferenceGetRequest) (*GetNsgroupForwardingmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNsgroupForwardingmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.NsgroupforwardingmemberReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest struct {
	ctx                     context.Context
	ApiService              NsgroupForwardingmemberAPI
	reference               string
	nsgroupForwardingmember *NsgroupForwardingmember
	returnFields            *string
	returnFields2           *string
	returnAsObject          *int32
}

// Object data to update
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest) NsgroupForwardingmember(nsgroupForwardingmember NsgroupForwardingmember) NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest {
	r.nsgroupForwardingmember = &nsgroupForwardingmember
	return r
}

// Enter the field names followed by comma
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest) ReturnFields(returnFields string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest) ReturnFields2(returnFields2 string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest) Execute() (*UpdateNsgroupForwardingmemberResponse, *http.Response, error) {
	return r.ApiService.NsgroupforwardingmemberReferencePutExecute(r)
}

/*
NsgroupforwardingmemberReferencePut Update a nsgroup:forwardingmember object

Updates a specific nsgroup:forwardingmember object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:forwardingmember object
	@return NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest
*/
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberReferencePut(ctx context.Context, reference string) NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest {
	return NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNsgroupForwardingmemberResponse
func (a *NsgroupForwardingmemberAPIService) NsgroupforwardingmemberReferencePutExecute(r NsgroupForwardingmemberAPINsgroupforwardingmemberReferencePutRequest) (*UpdateNsgroupForwardingmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNsgroupForwardingmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.NsgroupforwardingmemberReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupForwardingmember == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupForwardingmember is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupForwardingmember != nil {
		if r.nsgroupForwardingmember.Extattrs == nil {
			r.nsgroupForwardingmember.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupForwardingmember.Extattrs)[k]; !ok {
				(*r.nsgroupForwardingmember.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupForwardingmember
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
