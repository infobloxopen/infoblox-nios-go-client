/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NsgroupForwardstubserverAPI interface {
	/*
		NsgroupforwardstubserverGet Retrieve nsgroup:forwardstubserver objects

		Returns a list of nsgroup:forwardstubserver objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest
	*/
	NsgroupforwardstubserverGet(ctx context.Context) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest

	// NsgroupforwardstubserverGetExecute executes the request
	//  @return ListNsgroupForwardstubserverResponse
	NsgroupforwardstubserverGetExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) (*ListNsgroupForwardstubserverResponse, *http.Response, error)
	/*
		NsgroupforwardstubserverPost Create a nsgroup:forwardstubserver object

		Creates a new nsgroup:forwardstubserver object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest
	*/
	NsgroupforwardstubserverPost(ctx context.Context) NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest

	// NsgroupforwardstubserverPostExecute executes the request
	//  @return CreateNsgroupForwardstubserverResponse
	NsgroupforwardstubserverPostExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest) (*CreateNsgroupForwardstubserverResponse, *http.Response, error)
	/*
		NsgroupforwardstubserverReferenceDelete Delete a nsgroup:forwardstubserver object

		Deletes a specific nsgroup:forwardstubserver object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:forwardstubserver object
		@return NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceDeleteRequest
	*/
	NsgroupforwardstubserverReferenceDelete(ctx context.Context, reference string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceDeleteRequest

	// NsgroupforwardstubserverReferenceDeleteExecute executes the request
	NsgroupforwardstubserverReferenceDeleteExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceDeleteRequest) (*http.Response, error)
	/*
		NsgroupforwardstubserverReferenceGet Get a specific nsgroup:forwardstubserver object

		Returns a specific nsgroup:forwardstubserver object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:forwardstubserver object
		@return NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest
	*/
	NsgroupforwardstubserverReferenceGet(ctx context.Context, reference string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest

	// NsgroupforwardstubserverReferenceGetExecute executes the request
	//  @return GetNsgroupForwardstubserverResponse
	NsgroupforwardstubserverReferenceGetExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest) (*GetNsgroupForwardstubserverResponse, *http.Response, error)
	/*
		NsgroupforwardstubserverReferencePut Update a nsgroup:forwardstubserver object

		Updates a specific nsgroup:forwardstubserver object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:forwardstubserver object
		@return NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest
	*/
	NsgroupforwardstubserverReferencePut(ctx context.Context, reference string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest

	// NsgroupforwardstubserverReferencePutExecute executes the request
	//  @return UpdateNsgroupForwardstubserverResponse
	NsgroupforwardstubserverReferencePutExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest) (*UpdateNsgroupForwardstubserverResponse, *http.Response, error)
}

// NsgroupForwardstubserverAPIService NsgroupForwardstubserverAPI service
type NsgroupForwardstubserverAPIService internal.Service

type NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest struct {
	ctx            context.Context
	ApiService     NsgroupForwardstubserverAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) ReturnFields(returnFields string) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) ReturnFields2(returnFields2 string) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) MaxResults(maxResults int32) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) Paging(paging int32) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) PageId(pageId string) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest {
	r.pageId = &pageId
	return r
}

func (r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) Filters(filters map[string]interface{}) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest {
	r.filters = &filters
	return r
}

func (r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) Extattrfilter(extattrfilter map[string]interface{}) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) Execute() (*ListNsgroupForwardstubserverResponse, *http.Response, error) {
	return r.ApiService.NsgroupforwardstubserverGetExecute(r)
}

/*
NsgroupforwardstubserverGet Retrieve nsgroup:forwardstubserver objects

Returns a list of nsgroup:forwardstubserver objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest
*/
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverGet(ctx context.Context) NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest {
	return NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNsgroupForwardstubserverResponse
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverGetExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverGetRequest) (*ListNsgroupForwardstubserverResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNsgroupForwardstubserverResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardstubserverAPIService.NsgroupforwardstubserverGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardstubserver"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest struct {
	ctx                      context.Context
	ApiService               NsgroupForwardstubserverAPI
	nsgroupForwardstubserver *NsgroupForwardstubserver
	returnFields             *string
	returnFields2            *string
	returnAsObject           *int32
}

// Object data to create
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest) NsgroupForwardstubserver(nsgroupForwardstubserver NsgroupForwardstubserver) NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest {
	r.nsgroupForwardstubserver = &nsgroupForwardstubserver
	return r
}

// Enter the field names followed by comma
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest) ReturnFields(returnFields string) NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest) ReturnFields2(returnFields2 string) NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest) Execute() (*CreateNsgroupForwardstubserverResponse, *http.Response, error) {
	return r.ApiService.NsgroupforwardstubserverPostExecute(r)
}

/*
NsgroupforwardstubserverPost Create a nsgroup:forwardstubserver object

Creates a new nsgroup:forwardstubserver object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest
*/
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverPost(ctx context.Context) NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest {
	return NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNsgroupForwardstubserverResponse
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverPostExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverPostRequest) (*CreateNsgroupForwardstubserverResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNsgroupForwardstubserverResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardstubserverAPIService.NsgroupforwardstubserverPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardstubserver"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupForwardstubserver == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupForwardstubserver is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupForwardstubserver != nil {
		if r.nsgroupForwardstubserver.Extattrs == nil {
			r.nsgroupForwardstubserver.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupForwardstubserver.Extattrs)[k]; !ok {
				(*r.nsgroupForwardstubserver.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupForwardstubserver
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService NsgroupForwardstubserverAPI
	reference  string
}

func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.NsgroupforwardstubserverReferenceDeleteExecute(r)
}

/*
NsgroupforwardstubserverReferenceDelete Delete a nsgroup:forwardstubserver object

Deletes a specific nsgroup:forwardstubserver object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:forwardstubserver object
	@return NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceDeleteRequest
*/
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverReferenceDelete(ctx context.Context, reference string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceDeleteRequest {
	return NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverReferenceDeleteExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardstubserverAPIService.NsgroupforwardstubserverReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardstubserver/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest struct {
	ctx            context.Context
	ApiService     NsgroupForwardstubserverAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest) ReturnFields(returnFields string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest) ReturnFields2(returnFields2 string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest) Execute() (*GetNsgroupForwardstubserverResponse, *http.Response, error) {
	return r.ApiService.NsgroupforwardstubserverReferenceGetExecute(r)
}

/*
NsgroupforwardstubserverReferenceGet Get a specific nsgroup:forwardstubserver object

Returns a specific nsgroup:forwardstubserver object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:forwardstubserver object
	@return NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest
*/
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverReferenceGet(ctx context.Context, reference string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest {
	return NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNsgroupForwardstubserverResponse
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverReferenceGetExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverReferenceGetRequest) (*GetNsgroupForwardstubserverResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNsgroupForwardstubserverResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardstubserverAPIService.NsgroupforwardstubserverReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardstubserver/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest struct {
	ctx                      context.Context
	ApiService               NsgroupForwardstubserverAPI
	reference                string
	nsgroupForwardstubserver *NsgroupForwardstubserver
	returnFields             *string
	returnFields2            *string
	returnAsObject           *int32
}

// Object data to update
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest) NsgroupForwardstubserver(nsgroupForwardstubserver NsgroupForwardstubserver) NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest {
	r.nsgroupForwardstubserver = &nsgroupForwardstubserver
	return r
}

// Enter the field names followed by comma
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest) ReturnFields(returnFields string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest) ReturnFields2(returnFields2 string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest) Execute() (*UpdateNsgroupForwardstubserverResponse, *http.Response, error) {
	return r.ApiService.NsgroupforwardstubserverReferencePutExecute(r)
}

/*
NsgroupforwardstubserverReferencePut Update a nsgroup:forwardstubserver object

Updates a specific nsgroup:forwardstubserver object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:forwardstubserver object
	@return NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest
*/
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverReferencePut(ctx context.Context, reference string) NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest {
	return NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNsgroupForwardstubserverResponse
func (a *NsgroupForwardstubserverAPIService) NsgroupforwardstubserverReferencePutExecute(r NsgroupForwardstubserverAPINsgroupforwardstubserverReferencePutRequest) (*UpdateNsgroupForwardstubserverResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNsgroupForwardstubserverResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardstubserverAPIService.NsgroupforwardstubserverReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardstubserver/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupForwardstubserver == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupForwardstubserver is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupForwardstubserver != nil {
		if r.nsgroupForwardstubserver.Extattrs == nil {
			r.nsgroupForwardstubserver.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupForwardstubserver.Extattrs)[k]; !ok {
				(*r.nsgroupForwardstubserver.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupForwardstubserver
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
