/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NsgroupStubmemberAPI interface {
	/*
		NsgroupstubmemberGet Retrieve nsgroup:stubmember objects

		Returns a list of nsgroup:stubmember objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupStubmemberAPINsgroupstubmemberGetRequest
	*/
	NsgroupstubmemberGet(ctx context.Context) NsgroupStubmemberAPINsgroupstubmemberGetRequest

	// NsgroupstubmemberGetExecute executes the request
	//  @return ListNsgroupStubmemberResponse
	NsgroupstubmemberGetExecute(r NsgroupStubmemberAPINsgroupstubmemberGetRequest) (*ListNsgroupStubmemberResponse, *http.Response, error)
	/*
		NsgroupstubmemberPost Create a nsgroup:stubmember object

		Creates a new nsgroup:stubmember object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupStubmemberAPINsgroupstubmemberPostRequest
	*/
	NsgroupstubmemberPost(ctx context.Context) NsgroupStubmemberAPINsgroupstubmemberPostRequest

	// NsgroupstubmemberPostExecute executes the request
	//  @return CreateNsgroupStubmemberResponse
	NsgroupstubmemberPostExecute(r NsgroupStubmemberAPINsgroupstubmemberPostRequest) (*CreateNsgroupStubmemberResponse, *http.Response, error)
	/*
		NsgroupstubmemberReferenceDelete Delete a nsgroup:stubmember object

		Deletes a specific nsgroup:stubmember object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:stubmember object
		@return NsgroupStubmemberAPINsgroupstubmemberReferenceDeleteRequest
	*/
	NsgroupstubmemberReferenceDelete(ctx context.Context, reference string) NsgroupStubmemberAPINsgroupstubmemberReferenceDeleteRequest

	// NsgroupstubmemberReferenceDeleteExecute executes the request
	NsgroupstubmemberReferenceDeleteExecute(r NsgroupStubmemberAPINsgroupstubmemberReferenceDeleteRequest) (*http.Response, error)
	/*
		NsgroupstubmemberReferenceGet Get a specific nsgroup:stubmember object

		Returns a specific nsgroup:stubmember object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:stubmember object
		@return NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest
	*/
	NsgroupstubmemberReferenceGet(ctx context.Context, reference string) NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest

	// NsgroupstubmemberReferenceGetExecute executes the request
	//  @return GetNsgroupStubmemberResponse
	NsgroupstubmemberReferenceGetExecute(r NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest) (*GetNsgroupStubmemberResponse, *http.Response, error)
	/*
		NsgroupstubmemberReferencePut Update a nsgroup:stubmember object

		Updates a specific nsgroup:stubmember object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:stubmember object
		@return NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest
	*/
	NsgroupstubmemberReferencePut(ctx context.Context, reference string) NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest

	// NsgroupstubmemberReferencePutExecute executes the request
	//  @return UpdateNsgroupStubmemberResponse
	NsgroupstubmemberReferencePutExecute(r NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest) (*UpdateNsgroupStubmemberResponse, *http.Response, error)
}

// NsgroupStubmemberAPIService NsgroupStubmemberAPI service
type NsgroupStubmemberAPIService internal.Service

type NsgroupStubmemberAPINsgroupstubmemberGetRequest struct {
	ctx            context.Context
	ApiService     NsgroupStubmemberAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r NsgroupStubmemberAPINsgroupstubmemberGetRequest) ReturnFields(returnFields string) NsgroupStubmemberAPINsgroupstubmemberGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupStubmemberAPINsgroupstubmemberGetRequest) ReturnFields2(returnFields2 string) NsgroupStubmemberAPINsgroupstubmemberGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r NsgroupStubmemberAPINsgroupstubmemberGetRequest) MaxResults(maxResults int32) NsgroupStubmemberAPINsgroupstubmemberGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NsgroupStubmemberAPINsgroupstubmemberGetRequest) ReturnAsObject(returnAsObject int32) NsgroupStubmemberAPINsgroupstubmemberGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NsgroupStubmemberAPINsgroupstubmemberGetRequest) Paging(paging int32) NsgroupStubmemberAPINsgroupstubmemberGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NsgroupStubmemberAPINsgroupstubmemberGetRequest) PageId(pageId string) NsgroupStubmemberAPINsgroupstubmemberGetRequest {
	r.pageId = &pageId
	return r
}

func (r NsgroupStubmemberAPINsgroupstubmemberGetRequest) Filters(filters map[string]interface{}) NsgroupStubmemberAPINsgroupstubmemberGetRequest {
	r.filters = &filters
	return r
}

func (r NsgroupStubmemberAPINsgroupstubmemberGetRequest) Extattrfilter(extattrfilter map[string]interface{}) NsgroupStubmemberAPINsgroupstubmemberGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NsgroupStubmemberAPINsgroupstubmemberGetRequest) Execute() (*ListNsgroupStubmemberResponse, *http.Response, error) {
	return r.ApiService.NsgroupstubmemberGetExecute(r)
}

/*
NsgroupstubmemberGet Retrieve nsgroup:stubmember objects

Returns a list of nsgroup:stubmember objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupStubmemberAPINsgroupstubmemberGetRequest
*/
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberGet(ctx context.Context) NsgroupStubmemberAPINsgroupstubmemberGetRequest {
	return NsgroupStubmemberAPINsgroupstubmemberGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNsgroupStubmemberResponse
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberGetExecute(r NsgroupStubmemberAPINsgroupstubmemberGetRequest) (*ListNsgroupStubmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNsgroupStubmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupStubmemberAPIService.NsgroupstubmemberGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:stubmember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupStubmemberAPINsgroupstubmemberPostRequest struct {
	ctx               context.Context
	ApiService        NsgroupStubmemberAPI
	nsgroupStubmember *NsgroupStubmember
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to create
func (r NsgroupStubmemberAPINsgroupstubmemberPostRequest) NsgroupStubmember(nsgroupStubmember NsgroupStubmember) NsgroupStubmemberAPINsgroupstubmemberPostRequest {
	r.nsgroupStubmember = &nsgroupStubmember
	return r
}

// Enter the field names followed by comma
func (r NsgroupStubmemberAPINsgroupstubmemberPostRequest) ReturnFields(returnFields string) NsgroupStubmemberAPINsgroupstubmemberPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupStubmemberAPINsgroupstubmemberPostRequest) ReturnFields2(returnFields2 string) NsgroupStubmemberAPINsgroupstubmemberPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupStubmemberAPINsgroupstubmemberPostRequest) ReturnAsObject(returnAsObject int32) NsgroupStubmemberAPINsgroupstubmemberPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupStubmemberAPINsgroupstubmemberPostRequest) Execute() (*CreateNsgroupStubmemberResponse, *http.Response, error) {
	return r.ApiService.NsgroupstubmemberPostExecute(r)
}

/*
NsgroupstubmemberPost Create a nsgroup:stubmember object

Creates a new nsgroup:stubmember object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupStubmemberAPINsgroupstubmemberPostRequest
*/
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberPost(ctx context.Context) NsgroupStubmemberAPINsgroupstubmemberPostRequest {
	return NsgroupStubmemberAPINsgroupstubmemberPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNsgroupStubmemberResponse
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberPostExecute(r NsgroupStubmemberAPINsgroupstubmemberPostRequest) (*CreateNsgroupStubmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNsgroupStubmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupStubmemberAPIService.NsgroupstubmemberPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:stubmember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupStubmember == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupStubmember is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupStubmember != nil {
		if r.nsgroupStubmember.Extattrs == nil {
			r.nsgroupStubmember.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupStubmember.Extattrs)[k]; !ok {
				(*r.nsgroupStubmember.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupStubmember
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupStubmemberAPINsgroupstubmemberReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService NsgroupStubmemberAPI
	reference  string
}

func (r NsgroupStubmemberAPINsgroupstubmemberReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.NsgroupstubmemberReferenceDeleteExecute(r)
}

/*
NsgroupstubmemberReferenceDelete Delete a nsgroup:stubmember object

Deletes a specific nsgroup:stubmember object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:stubmember object
	@return NsgroupStubmemberAPINsgroupstubmemberReferenceDeleteRequest
*/
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberReferenceDelete(ctx context.Context, reference string) NsgroupStubmemberAPINsgroupstubmemberReferenceDeleteRequest {
	return NsgroupStubmemberAPINsgroupstubmemberReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberReferenceDeleteExecute(r NsgroupStubmemberAPINsgroupstubmemberReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupStubmemberAPIService.NsgroupstubmemberReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:stubmember/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest struct {
	ctx            context.Context
	ApiService     NsgroupStubmemberAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest) ReturnFields(returnFields string) NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest) ReturnFields2(returnFields2 string) NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest) ReturnAsObject(returnAsObject int32) NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest) Execute() (*GetNsgroupStubmemberResponse, *http.Response, error) {
	return r.ApiService.NsgroupstubmemberReferenceGetExecute(r)
}

/*
NsgroupstubmemberReferenceGet Get a specific nsgroup:stubmember object

Returns a specific nsgroup:stubmember object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:stubmember object
	@return NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest
*/
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberReferenceGet(ctx context.Context, reference string) NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest {
	return NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNsgroupStubmemberResponse
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberReferenceGetExecute(r NsgroupStubmemberAPINsgroupstubmemberReferenceGetRequest) (*GetNsgroupStubmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNsgroupStubmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupStubmemberAPIService.NsgroupstubmemberReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:stubmember/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest struct {
	ctx               context.Context
	ApiService        NsgroupStubmemberAPI
	reference         string
	nsgroupStubmember *NsgroupStubmember
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to update
func (r NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest) NsgroupStubmember(nsgroupStubmember NsgroupStubmember) NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest {
	r.nsgroupStubmember = &nsgroupStubmember
	return r
}

// Enter the field names followed by comma
func (r NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest) ReturnFields(returnFields string) NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest) ReturnFields2(returnFields2 string) NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest) ReturnAsObject(returnAsObject int32) NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest) Execute() (*UpdateNsgroupStubmemberResponse, *http.Response, error) {
	return r.ApiService.NsgroupstubmemberReferencePutExecute(r)
}

/*
NsgroupstubmemberReferencePut Update a nsgroup:stubmember object

Updates a specific nsgroup:stubmember object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:stubmember object
	@return NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest
*/
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberReferencePut(ctx context.Context, reference string) NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest {
	return NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNsgroupStubmemberResponse
func (a *NsgroupStubmemberAPIService) NsgroupstubmemberReferencePutExecute(r NsgroupStubmemberAPINsgroupstubmemberReferencePutRequest) (*UpdateNsgroupStubmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNsgroupStubmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupStubmemberAPIService.NsgroupstubmemberReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:stubmember/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupStubmember == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupStubmember is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupStubmember != nil {
		if r.nsgroupStubmember.Extattrs == nil {
			r.nsgroupStubmember.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupStubmember.Extattrs)[k]; !ok {
				(*r.nsgroupStubmember.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupStubmember
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
