/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordAliasAPI interface {
	/*
		RecordaliasGet Retrieve record:alias objects

		Returns a list of record:alias objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordAliasAPIRecordaliasGetRequest
	*/
	RecordaliasGet(ctx context.Context) RecordAliasAPIRecordaliasGetRequest

	// RecordaliasGetExecute executes the request
	//  @return ListRecordAliasResponse
	RecordaliasGetExecute(r RecordAliasAPIRecordaliasGetRequest) (*ListRecordAliasResponse, *http.Response, error)
	/*
		RecordaliasPost Create a record:alias object

		Creates a new record:alias object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordAliasAPIRecordaliasPostRequest
	*/
	RecordaliasPost(ctx context.Context) RecordAliasAPIRecordaliasPostRequest

	// RecordaliasPostExecute executes the request
	//  @return CreateRecordAliasResponse
	RecordaliasPostExecute(r RecordAliasAPIRecordaliasPostRequest) (*CreateRecordAliasResponse, *http.Response, error)
	/*
		RecordaliasReferenceDelete Delete a record:alias object

		Deletes a specific record:alias object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:alias object
		@return RecordAliasAPIRecordaliasReferenceDeleteRequest
	*/
	RecordaliasReferenceDelete(ctx context.Context, reference string) RecordAliasAPIRecordaliasReferenceDeleteRequest

	// RecordaliasReferenceDeleteExecute executes the request
	RecordaliasReferenceDeleteExecute(r RecordAliasAPIRecordaliasReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordaliasReferenceGet Get a specific record:alias object

		Returns a specific record:alias object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:alias object
		@return RecordAliasAPIRecordaliasReferenceGetRequest
	*/
	RecordaliasReferenceGet(ctx context.Context, reference string) RecordAliasAPIRecordaliasReferenceGetRequest

	// RecordaliasReferenceGetExecute executes the request
	//  @return GetRecordAliasResponse
	RecordaliasReferenceGetExecute(r RecordAliasAPIRecordaliasReferenceGetRequest) (*GetRecordAliasResponse, *http.Response, error)
	/*
		RecordaliasReferencePut Update a record:alias object

		Updates a specific record:alias object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:alias object
		@return RecordAliasAPIRecordaliasReferencePutRequest
	*/
	RecordaliasReferencePut(ctx context.Context, reference string) RecordAliasAPIRecordaliasReferencePutRequest

	// RecordaliasReferencePutExecute executes the request
	//  @return UpdateRecordAliasResponse
	RecordaliasReferencePutExecute(r RecordAliasAPIRecordaliasReferencePutRequest) (*UpdateRecordAliasResponse, *http.Response, error)
}

// RecordAliasAPIService RecordAliasAPI service
type RecordAliasAPIService internal.Service

type RecordAliasAPIRecordaliasGetRequest struct {
	ctx            context.Context
	ApiService     RecordAliasAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordAliasAPIRecordaliasGetRequest) ReturnFields(returnFields string) RecordAliasAPIRecordaliasGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordAliasAPIRecordaliasGetRequest) ReturnFields2(returnFields2 string) RecordAliasAPIRecordaliasGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordAliasAPIRecordaliasGetRequest) MaxResults(maxResults int32) RecordAliasAPIRecordaliasGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordAliasAPIRecordaliasGetRequest) ReturnAsObject(returnAsObject int32) RecordAliasAPIRecordaliasGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordAliasAPIRecordaliasGetRequest) Paging(paging int32) RecordAliasAPIRecordaliasGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordAliasAPIRecordaliasGetRequest) PageId(pageId string) RecordAliasAPIRecordaliasGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordAliasAPIRecordaliasGetRequest) Filters(filters map[string]interface{}) RecordAliasAPIRecordaliasGetRequest {
	r.filters = &filters
	return r
}

func (r RecordAliasAPIRecordaliasGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordAliasAPIRecordaliasGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordAliasAPIRecordaliasGetRequest) Execute() (*ListRecordAliasResponse, *http.Response, error) {
	return r.ApiService.RecordaliasGetExecute(r)
}

/*
RecordaliasGet Retrieve record:alias objects

Returns a list of record:alias objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordAliasAPIRecordaliasGetRequest
*/
func (a *RecordAliasAPIService) RecordaliasGet(ctx context.Context) RecordAliasAPIRecordaliasGetRequest {
	return RecordAliasAPIRecordaliasGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordAliasResponse
func (a *RecordAliasAPIService) RecordaliasGetExecute(r RecordAliasAPIRecordaliasGetRequest) (*ListRecordAliasResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordAliasResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordAliasAPIService.RecordaliasGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:alias"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordAliasAPIRecordaliasPostRequest struct {
	ctx            context.Context
	ApiService     RecordAliasAPI
	recordAlias    *RecordAlias
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordAliasAPIRecordaliasPostRequest) RecordAlias(recordAlias RecordAlias) RecordAliasAPIRecordaliasPostRequest {
	r.recordAlias = &recordAlias
	return r
}

// Enter the field names followed by comma
func (r RecordAliasAPIRecordaliasPostRequest) ReturnFields(returnFields string) RecordAliasAPIRecordaliasPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordAliasAPIRecordaliasPostRequest) ReturnFields2(returnFields2 string) RecordAliasAPIRecordaliasPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordAliasAPIRecordaliasPostRequest) ReturnAsObject(returnAsObject int32) RecordAliasAPIRecordaliasPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordAliasAPIRecordaliasPostRequest) Execute() (*CreateRecordAliasResponse, *http.Response, error) {
	return r.ApiService.RecordaliasPostExecute(r)
}

/*
RecordaliasPost Create a record:alias object

Creates a new record:alias object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordAliasAPIRecordaliasPostRequest
*/
func (a *RecordAliasAPIService) RecordaliasPost(ctx context.Context) RecordAliasAPIRecordaliasPostRequest {
	return RecordAliasAPIRecordaliasPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordAliasResponse
func (a *RecordAliasAPIService) RecordaliasPostExecute(r RecordAliasAPIRecordaliasPostRequest) (*CreateRecordAliasResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordAliasResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordAliasAPIService.RecordaliasPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:alias"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordAlias == nil {
		return localVarReturnValue, nil, internal.ReportError("recordAlias is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordAlias != nil {
		if r.recordAlias.Extattrs == nil {
			r.recordAlias.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordAlias.Extattrs)[k]; !ok {
				(*r.recordAlias.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordAlias
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordAliasAPIRecordaliasReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordAliasAPI
	reference  string
}

func (r RecordAliasAPIRecordaliasReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordaliasReferenceDeleteExecute(r)
}

/*
RecordaliasReferenceDelete Delete a record:alias object

Deletes a specific record:alias object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:alias object
	@return RecordAliasAPIRecordaliasReferenceDeleteRequest
*/
func (a *RecordAliasAPIService) RecordaliasReferenceDelete(ctx context.Context, reference string) RecordAliasAPIRecordaliasReferenceDeleteRequest {
	return RecordAliasAPIRecordaliasReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordAliasAPIService) RecordaliasReferenceDeleteExecute(r RecordAliasAPIRecordaliasReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordAliasAPIService.RecordaliasReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:alias/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordAliasAPIRecordaliasReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordAliasAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordAliasAPIRecordaliasReferenceGetRequest) ReturnFields(returnFields string) RecordAliasAPIRecordaliasReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordAliasAPIRecordaliasReferenceGetRequest) ReturnFields2(returnFields2 string) RecordAliasAPIRecordaliasReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordAliasAPIRecordaliasReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordAliasAPIRecordaliasReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordAliasAPIRecordaliasReferenceGetRequest) Execute() (*GetRecordAliasResponse, *http.Response, error) {
	return r.ApiService.RecordaliasReferenceGetExecute(r)
}

/*
RecordaliasReferenceGet Get a specific record:alias object

Returns a specific record:alias object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:alias object
	@return RecordAliasAPIRecordaliasReferenceGetRequest
*/
func (a *RecordAliasAPIService) RecordaliasReferenceGet(ctx context.Context, reference string) RecordAliasAPIRecordaliasReferenceGetRequest {
	return RecordAliasAPIRecordaliasReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordAliasResponse
func (a *RecordAliasAPIService) RecordaliasReferenceGetExecute(r RecordAliasAPIRecordaliasReferenceGetRequest) (*GetRecordAliasResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordAliasResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordAliasAPIService.RecordaliasReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:alias/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordAliasAPIRecordaliasReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordAliasAPI
	reference      string
	recordAlias    *RecordAlias
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordAliasAPIRecordaliasReferencePutRequest) RecordAlias(recordAlias RecordAlias) RecordAliasAPIRecordaliasReferencePutRequest {
	r.recordAlias = &recordAlias
	return r
}

// Enter the field names followed by comma
func (r RecordAliasAPIRecordaliasReferencePutRequest) ReturnFields(returnFields string) RecordAliasAPIRecordaliasReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordAliasAPIRecordaliasReferencePutRequest) ReturnFields2(returnFields2 string) RecordAliasAPIRecordaliasReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordAliasAPIRecordaliasReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordAliasAPIRecordaliasReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordAliasAPIRecordaliasReferencePutRequest) Execute() (*UpdateRecordAliasResponse, *http.Response, error) {
	return r.ApiService.RecordaliasReferencePutExecute(r)
}

/*
RecordaliasReferencePut Update a record:alias object

Updates a specific record:alias object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:alias object
	@return RecordAliasAPIRecordaliasReferencePutRequest
*/
func (a *RecordAliasAPIService) RecordaliasReferencePut(ctx context.Context, reference string) RecordAliasAPIRecordaliasReferencePutRequest {
	return RecordAliasAPIRecordaliasReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordAliasResponse
func (a *RecordAliasAPIService) RecordaliasReferencePutExecute(r RecordAliasAPIRecordaliasReferencePutRequest) (*UpdateRecordAliasResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordAliasResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordAliasAPIService.RecordaliasReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:alias/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordAlias == nil {
		return localVarReturnValue, nil, internal.ReportError("recordAlias is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordAlias != nil {
		if r.recordAlias.Extattrs == nil {
			r.recordAlias.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordAlias.Extattrs)[k]; !ok {
				(*r.recordAlias.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordAlias
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
