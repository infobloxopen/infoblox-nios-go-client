/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordCnameAPI interface {
	/*
		RecordcnameGet Retrieve record:cname objects

		Returns a list of record:cname objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordCnameAPIRecordcnameGetRequest
	*/
	RecordcnameGet(ctx context.Context) RecordCnameAPIRecordcnameGetRequest

	// RecordcnameGetExecute executes the request
	//  @return ListRecordCnameResponse
	RecordcnameGetExecute(r RecordCnameAPIRecordcnameGetRequest) (*ListRecordCnameResponse, *http.Response, error)
	/*
		RecordcnamePost Create a record:cname object

		Creates a new record:cname object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordCnameAPIRecordcnamePostRequest
	*/
	RecordcnamePost(ctx context.Context) RecordCnameAPIRecordcnamePostRequest

	// RecordcnamePostExecute executes the request
	//  @return CreateRecordCnameResponse
	RecordcnamePostExecute(r RecordCnameAPIRecordcnamePostRequest) (*CreateRecordCnameResponse, *http.Response, error)
	/*
		RecordcnameReferenceDelete Delete a record:cname object

		Deletes a specific record:cname object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:cname object
		@return RecordCnameAPIRecordcnameReferenceDeleteRequest
	*/
	RecordcnameReferenceDelete(ctx context.Context, reference string) RecordCnameAPIRecordcnameReferenceDeleteRequest

	// RecordcnameReferenceDeleteExecute executes the request
	RecordcnameReferenceDeleteExecute(r RecordCnameAPIRecordcnameReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordcnameReferenceGet Get a specific record:cname object

		Returns a specific record:cname object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:cname object
		@return RecordCnameAPIRecordcnameReferenceGetRequest
	*/
	RecordcnameReferenceGet(ctx context.Context, reference string) RecordCnameAPIRecordcnameReferenceGetRequest

	// RecordcnameReferenceGetExecute executes the request
	//  @return GetRecordCnameResponse
	RecordcnameReferenceGetExecute(r RecordCnameAPIRecordcnameReferenceGetRequest) (*GetRecordCnameResponse, *http.Response, error)
	/*
		RecordcnameReferencePut Update a record:cname object

		Updates a specific record:cname object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:cname object
		@return RecordCnameAPIRecordcnameReferencePutRequest
	*/
	RecordcnameReferencePut(ctx context.Context, reference string) RecordCnameAPIRecordcnameReferencePutRequest

	// RecordcnameReferencePutExecute executes the request
	//  @return UpdateRecordCnameResponse
	RecordcnameReferencePutExecute(r RecordCnameAPIRecordcnameReferencePutRequest) (*UpdateRecordCnameResponse, *http.Response, error)
}

// RecordCnameAPIService RecordCnameAPI service
type RecordCnameAPIService internal.Service

type RecordCnameAPIRecordcnameGetRequest struct {
	ctx            context.Context
	ApiService     RecordCnameAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordCnameAPIRecordcnameGetRequest) ReturnFields(returnFields string) RecordCnameAPIRecordcnameGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordCnameAPIRecordcnameGetRequest) ReturnFields2(returnFields2 string) RecordCnameAPIRecordcnameGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordCnameAPIRecordcnameGetRequest) MaxResults(maxResults int32) RecordCnameAPIRecordcnameGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordCnameAPIRecordcnameGetRequest) ReturnAsObject(returnAsObject int32) RecordCnameAPIRecordcnameGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordCnameAPIRecordcnameGetRequest) Paging(paging int32) RecordCnameAPIRecordcnameGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordCnameAPIRecordcnameGetRequest) PageId(pageId string) RecordCnameAPIRecordcnameGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordCnameAPIRecordcnameGetRequest) Filters(filters map[string]interface{}) RecordCnameAPIRecordcnameGetRequest {
	r.filters = &filters
	return r
}

func (r RecordCnameAPIRecordcnameGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordCnameAPIRecordcnameGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordCnameAPIRecordcnameGetRequest) Execute() (*ListRecordCnameResponse, *http.Response, error) {
	return r.ApiService.RecordcnameGetExecute(r)
}

/*
RecordcnameGet Retrieve record:cname objects

Returns a list of record:cname objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordCnameAPIRecordcnameGetRequest
*/
func (a *RecordCnameAPIService) RecordcnameGet(ctx context.Context) RecordCnameAPIRecordcnameGetRequest {
	return RecordCnameAPIRecordcnameGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordCnameResponse
func (a *RecordCnameAPIService) RecordcnameGetExecute(r RecordCnameAPIRecordcnameGetRequest) (*ListRecordCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordCnameAPIService.RecordcnameGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:cname"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordCnameAPIRecordcnamePostRequest struct {
	ctx            context.Context
	ApiService     RecordCnameAPI
	recordCname    *RecordCname
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordCnameAPIRecordcnamePostRequest) RecordCname(recordCname RecordCname) RecordCnameAPIRecordcnamePostRequest {
	r.recordCname = &recordCname
	return r
}

// Enter the field names followed by comma
func (r RecordCnameAPIRecordcnamePostRequest) ReturnFields(returnFields string) RecordCnameAPIRecordcnamePostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordCnameAPIRecordcnamePostRequest) ReturnFields2(returnFields2 string) RecordCnameAPIRecordcnamePostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordCnameAPIRecordcnamePostRequest) ReturnAsObject(returnAsObject int32) RecordCnameAPIRecordcnamePostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordCnameAPIRecordcnamePostRequest) Execute() (*CreateRecordCnameResponse, *http.Response, error) {
	return r.ApiService.RecordcnamePostExecute(r)
}

/*
RecordcnamePost Create a record:cname object

Creates a new record:cname object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordCnameAPIRecordcnamePostRequest
*/
func (a *RecordCnameAPIService) RecordcnamePost(ctx context.Context) RecordCnameAPIRecordcnamePostRequest {
	return RecordCnameAPIRecordcnamePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordCnameResponse
func (a *RecordCnameAPIService) RecordcnamePostExecute(r RecordCnameAPIRecordcnamePostRequest) (*CreateRecordCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordCnameAPIService.RecordcnamePost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:cname"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordCname == nil {
		return localVarReturnValue, nil, internal.ReportError("recordCname is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordCname != nil {
		if r.recordCname.Extattrs == nil {
			r.recordCname.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordCname.Extattrs)[k]; !ok {
				(*r.recordCname.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordCname
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordCnameAPIRecordcnameReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordCnameAPI
	reference  string
}

func (r RecordCnameAPIRecordcnameReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordcnameReferenceDeleteExecute(r)
}

/*
RecordcnameReferenceDelete Delete a record:cname object

Deletes a specific record:cname object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:cname object
	@return RecordCnameAPIRecordcnameReferenceDeleteRequest
*/
func (a *RecordCnameAPIService) RecordcnameReferenceDelete(ctx context.Context, reference string) RecordCnameAPIRecordcnameReferenceDeleteRequest {
	return RecordCnameAPIRecordcnameReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordCnameAPIService) RecordcnameReferenceDeleteExecute(r RecordCnameAPIRecordcnameReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordCnameAPIService.RecordcnameReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:cname/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordCnameAPIRecordcnameReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordCnameAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordCnameAPIRecordcnameReferenceGetRequest) ReturnFields(returnFields string) RecordCnameAPIRecordcnameReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordCnameAPIRecordcnameReferenceGetRequest) ReturnFields2(returnFields2 string) RecordCnameAPIRecordcnameReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordCnameAPIRecordcnameReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordCnameAPIRecordcnameReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordCnameAPIRecordcnameReferenceGetRequest) Execute() (*GetRecordCnameResponse, *http.Response, error) {
	return r.ApiService.RecordcnameReferenceGetExecute(r)
}

/*
RecordcnameReferenceGet Get a specific record:cname object

Returns a specific record:cname object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:cname object
	@return RecordCnameAPIRecordcnameReferenceGetRequest
*/
func (a *RecordCnameAPIService) RecordcnameReferenceGet(ctx context.Context, reference string) RecordCnameAPIRecordcnameReferenceGetRequest {
	return RecordCnameAPIRecordcnameReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordCnameResponse
func (a *RecordCnameAPIService) RecordcnameReferenceGetExecute(r RecordCnameAPIRecordcnameReferenceGetRequest) (*GetRecordCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordCnameAPIService.RecordcnameReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:cname/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordCnameAPIRecordcnameReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordCnameAPI
	reference      string
	recordCname    *RecordCname
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordCnameAPIRecordcnameReferencePutRequest) RecordCname(recordCname RecordCname) RecordCnameAPIRecordcnameReferencePutRequest {
	r.recordCname = &recordCname
	return r
}

// Enter the field names followed by comma
func (r RecordCnameAPIRecordcnameReferencePutRequest) ReturnFields(returnFields string) RecordCnameAPIRecordcnameReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordCnameAPIRecordcnameReferencePutRequest) ReturnFields2(returnFields2 string) RecordCnameAPIRecordcnameReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordCnameAPIRecordcnameReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordCnameAPIRecordcnameReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordCnameAPIRecordcnameReferencePutRequest) Execute() (*UpdateRecordCnameResponse, *http.Response, error) {
	return r.ApiService.RecordcnameReferencePutExecute(r)
}

/*
RecordcnameReferencePut Update a record:cname object

Updates a specific record:cname object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:cname object
	@return RecordCnameAPIRecordcnameReferencePutRequest
*/
func (a *RecordCnameAPIService) RecordcnameReferencePut(ctx context.Context, reference string) RecordCnameAPIRecordcnameReferencePutRequest {
	return RecordCnameAPIRecordcnameReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordCnameResponse
func (a *RecordCnameAPIService) RecordcnameReferencePutExecute(r RecordCnameAPIRecordcnameReferencePutRequest) (*UpdateRecordCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordCnameAPIService.RecordcnameReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:cname/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordCname == nil {
		return localVarReturnValue, nil, internal.ReportError("recordCname is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordCname != nil {
		if r.recordCname.Extattrs == nil {
			r.recordCname.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordCname.Extattrs)[k]; !ok {
				(*r.recordCname.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordCname
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
