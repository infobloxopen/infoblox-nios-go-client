/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordDhcidAPI interface {
	/*
		RecorddhcidGet Retrieve record:dhcid objects

		Returns a list of record:dhcid objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordDhcidAPIRecorddhcidGetRequest
	*/
	RecorddhcidGet(ctx context.Context) RecordDhcidAPIRecorddhcidGetRequest

	// RecorddhcidGetExecute executes the request
	//  @return ListRecordDhcidResponse
	RecorddhcidGetExecute(r RecordDhcidAPIRecorddhcidGetRequest) (*ListRecordDhcidResponse, *http.Response, error)
	/*
		RecorddhcidReferenceDelete Delete a record:dhcid object

		Deletes a specific record:dhcid object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:dhcid object
		@return RecordDhcidAPIRecorddhcidReferenceDeleteRequest
	*/
	RecorddhcidReferenceDelete(ctx context.Context, reference string) RecordDhcidAPIRecorddhcidReferenceDeleteRequest

	// RecorddhcidReferenceDeleteExecute executes the request
	RecorddhcidReferenceDeleteExecute(r RecordDhcidAPIRecorddhcidReferenceDeleteRequest) (*http.Response, error)
	/*
		RecorddhcidReferenceGet Get a specific record:dhcid object

		Returns a specific record:dhcid object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:dhcid object
		@return RecordDhcidAPIRecorddhcidReferenceGetRequest
	*/
	RecorddhcidReferenceGet(ctx context.Context, reference string) RecordDhcidAPIRecorddhcidReferenceGetRequest

	// RecorddhcidReferenceGetExecute executes the request
	//  @return GetRecordDhcidResponse
	RecorddhcidReferenceGetExecute(r RecordDhcidAPIRecorddhcidReferenceGetRequest) (*GetRecordDhcidResponse, *http.Response, error)
}

// RecordDhcidAPIService RecordDhcidAPI service
type RecordDhcidAPIService internal.Service

type RecordDhcidAPIRecorddhcidGetRequest struct {
	ctx            context.Context
	ApiService     RecordDhcidAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordDhcidAPIRecorddhcidGetRequest) ReturnFields(returnFields string) RecordDhcidAPIRecorddhcidGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordDhcidAPIRecorddhcidGetRequest) ReturnFields2(returnFields2 string) RecordDhcidAPIRecorddhcidGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordDhcidAPIRecorddhcidGetRequest) MaxResults(maxResults int32) RecordDhcidAPIRecorddhcidGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordDhcidAPIRecorddhcidGetRequest) ReturnAsObject(returnAsObject int32) RecordDhcidAPIRecorddhcidGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordDhcidAPIRecorddhcidGetRequest) Paging(paging int32) RecordDhcidAPIRecorddhcidGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordDhcidAPIRecorddhcidGetRequest) PageId(pageId string) RecordDhcidAPIRecorddhcidGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordDhcidAPIRecorddhcidGetRequest) Filters(filters map[string]interface{}) RecordDhcidAPIRecorddhcidGetRequest {
	r.filters = &filters
	return r
}

func (r RecordDhcidAPIRecorddhcidGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordDhcidAPIRecorddhcidGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordDhcidAPIRecorddhcidGetRequest) Execute() (*ListRecordDhcidResponse, *http.Response, error) {
	return r.ApiService.RecorddhcidGetExecute(r)
}

/*
RecorddhcidGet Retrieve record:dhcid objects

Returns a list of record:dhcid objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordDhcidAPIRecorddhcidGetRequest
*/
func (a *RecordDhcidAPIService) RecorddhcidGet(ctx context.Context) RecordDhcidAPIRecorddhcidGetRequest {
	return RecordDhcidAPIRecorddhcidGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordDhcidResponse
func (a *RecordDhcidAPIService) RecorddhcidGetExecute(r RecordDhcidAPIRecorddhcidGetRequest) (*ListRecordDhcidResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordDhcidResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordDhcidAPIService.RecorddhcidGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:dhcid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordDhcidAPIRecorddhcidReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordDhcidAPI
	reference  string
}

func (r RecordDhcidAPIRecorddhcidReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecorddhcidReferenceDeleteExecute(r)
}

/*
RecorddhcidReferenceDelete Delete a record:dhcid object

Deletes a specific record:dhcid object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:dhcid object
	@return RecordDhcidAPIRecorddhcidReferenceDeleteRequest
*/
func (a *RecordDhcidAPIService) RecorddhcidReferenceDelete(ctx context.Context, reference string) RecordDhcidAPIRecorddhcidReferenceDeleteRequest {
	return RecordDhcidAPIRecorddhcidReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordDhcidAPIService) RecorddhcidReferenceDeleteExecute(r RecordDhcidAPIRecorddhcidReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordDhcidAPIService.RecorddhcidReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:dhcid/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordDhcidAPIRecorddhcidReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordDhcidAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordDhcidAPIRecorddhcidReferenceGetRequest) ReturnFields(returnFields string) RecordDhcidAPIRecorddhcidReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordDhcidAPIRecorddhcidReferenceGetRequest) ReturnFields2(returnFields2 string) RecordDhcidAPIRecorddhcidReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordDhcidAPIRecorddhcidReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordDhcidAPIRecorddhcidReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordDhcidAPIRecorddhcidReferenceGetRequest) Execute() (*GetRecordDhcidResponse, *http.Response, error) {
	return r.ApiService.RecorddhcidReferenceGetExecute(r)
}

/*
RecorddhcidReferenceGet Get a specific record:dhcid object

Returns a specific record:dhcid object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:dhcid object
	@return RecordDhcidAPIRecorddhcidReferenceGetRequest
*/
func (a *RecordDhcidAPIService) RecorddhcidReferenceGet(ctx context.Context, reference string) RecordDhcidAPIRecorddhcidReferenceGetRequest {
	return RecordDhcidAPIRecorddhcidReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordDhcidResponse
func (a *RecordDhcidAPIService) RecorddhcidReferenceGetExecute(r RecordDhcidAPIRecorddhcidReferenceGetRequest) (*GetRecordDhcidResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordDhcidResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordDhcidAPIService.RecorddhcidReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:dhcid/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
