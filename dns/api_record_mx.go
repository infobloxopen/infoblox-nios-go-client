/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordMxAPI interface {
	/*
		RecordmxGet Retrieve record:mx objects

		Returns a list of record:mx objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordMxAPIRecordmxGetRequest
	*/
	RecordmxGet(ctx context.Context) RecordMxAPIRecordmxGetRequest

	// RecordmxGetExecute executes the request
	//  @return ListRecordMxResponse
	RecordmxGetExecute(r RecordMxAPIRecordmxGetRequest) (*ListRecordMxResponse, *http.Response, error)
	/*
		RecordmxPost Create a record:mx object

		Creates a new record:mx object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordMxAPIRecordmxPostRequest
	*/
	RecordmxPost(ctx context.Context) RecordMxAPIRecordmxPostRequest

	// RecordmxPostExecute executes the request
	//  @return CreateRecordMxResponse
	RecordmxPostExecute(r RecordMxAPIRecordmxPostRequest) (*CreateRecordMxResponse, *http.Response, error)
	/*
		RecordmxReferenceDelete Delete a record:mx object

		Deletes a specific record:mx object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:mx object
		@return RecordMxAPIRecordmxReferenceDeleteRequest
	*/
	RecordmxReferenceDelete(ctx context.Context, reference string) RecordMxAPIRecordmxReferenceDeleteRequest

	// RecordmxReferenceDeleteExecute executes the request
	RecordmxReferenceDeleteExecute(r RecordMxAPIRecordmxReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordmxReferenceGet Get a specific record:mx object

		Returns a specific record:mx object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:mx object
		@return RecordMxAPIRecordmxReferenceGetRequest
	*/
	RecordmxReferenceGet(ctx context.Context, reference string) RecordMxAPIRecordmxReferenceGetRequest

	// RecordmxReferenceGetExecute executes the request
	//  @return GetRecordMxResponse
	RecordmxReferenceGetExecute(r RecordMxAPIRecordmxReferenceGetRequest) (*GetRecordMxResponse, *http.Response, error)
	/*
		RecordmxReferencePut Update a record:mx object

		Updates a specific record:mx object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:mx object
		@return RecordMxAPIRecordmxReferencePutRequest
	*/
	RecordmxReferencePut(ctx context.Context, reference string) RecordMxAPIRecordmxReferencePutRequest

	// RecordmxReferencePutExecute executes the request
	//  @return UpdateRecordMxResponse
	RecordmxReferencePutExecute(r RecordMxAPIRecordmxReferencePutRequest) (*UpdateRecordMxResponse, *http.Response, error)
}

// RecordMxAPIService RecordMxAPI service
type RecordMxAPIService internal.Service

type RecordMxAPIRecordmxGetRequest struct {
	ctx            context.Context
	ApiService     RecordMxAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordMxAPIRecordmxGetRequest) ReturnFields(returnFields string) RecordMxAPIRecordmxGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordMxAPIRecordmxGetRequest) ReturnFields2(returnFields2 string) RecordMxAPIRecordmxGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordMxAPIRecordmxGetRequest) MaxResults(maxResults int32) RecordMxAPIRecordmxGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordMxAPIRecordmxGetRequest) ReturnAsObject(returnAsObject int32) RecordMxAPIRecordmxGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordMxAPIRecordmxGetRequest) Paging(paging int32) RecordMxAPIRecordmxGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordMxAPIRecordmxGetRequest) PageId(pageId string) RecordMxAPIRecordmxGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordMxAPIRecordmxGetRequest) Filters(filters map[string]interface{}) RecordMxAPIRecordmxGetRequest {
	r.filters = &filters
	return r
}

func (r RecordMxAPIRecordmxGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordMxAPIRecordmxGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordMxAPIRecordmxGetRequest) Execute() (*ListRecordMxResponse, *http.Response, error) {
	return r.ApiService.RecordmxGetExecute(r)
}

/*
RecordmxGet Retrieve record:mx objects

Returns a list of record:mx objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordMxAPIRecordmxGetRequest
*/
func (a *RecordMxAPIService) RecordmxGet(ctx context.Context) RecordMxAPIRecordmxGetRequest {
	return RecordMxAPIRecordmxGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordMxResponse
func (a *RecordMxAPIService) RecordmxGetExecute(r RecordMxAPIRecordmxGetRequest) (*ListRecordMxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordMxResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordMxAPIService.RecordmxGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:mx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordMxAPIRecordmxPostRequest struct {
	ctx            context.Context
	ApiService     RecordMxAPI
	recordMx       *RecordMx
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordMxAPIRecordmxPostRequest) RecordMx(recordMx RecordMx) RecordMxAPIRecordmxPostRequest {
	r.recordMx = &recordMx
	return r
}

// Enter the field names followed by comma
func (r RecordMxAPIRecordmxPostRequest) ReturnFields(returnFields string) RecordMxAPIRecordmxPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordMxAPIRecordmxPostRequest) ReturnFields2(returnFields2 string) RecordMxAPIRecordmxPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordMxAPIRecordmxPostRequest) ReturnAsObject(returnAsObject int32) RecordMxAPIRecordmxPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordMxAPIRecordmxPostRequest) Execute() (*CreateRecordMxResponse, *http.Response, error) {
	return r.ApiService.RecordmxPostExecute(r)
}

/*
RecordmxPost Create a record:mx object

Creates a new record:mx object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordMxAPIRecordmxPostRequest
*/
func (a *RecordMxAPIService) RecordmxPost(ctx context.Context) RecordMxAPIRecordmxPostRequest {
	return RecordMxAPIRecordmxPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordMxResponse
func (a *RecordMxAPIService) RecordmxPostExecute(r RecordMxAPIRecordmxPostRequest) (*CreateRecordMxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordMxResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordMxAPIService.RecordmxPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:mx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordMx == nil {
		return localVarReturnValue, nil, internal.ReportError("recordMx is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordMx != nil {
		if r.recordMx.Extattrs == nil {
			r.recordMx.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordMx.Extattrs)[k]; !ok {
				(*r.recordMx.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordMx
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordMxAPIRecordmxReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordMxAPI
	reference  string
}

func (r RecordMxAPIRecordmxReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordmxReferenceDeleteExecute(r)
}

/*
RecordmxReferenceDelete Delete a record:mx object

Deletes a specific record:mx object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:mx object
	@return RecordMxAPIRecordmxReferenceDeleteRequest
*/
func (a *RecordMxAPIService) RecordmxReferenceDelete(ctx context.Context, reference string) RecordMxAPIRecordmxReferenceDeleteRequest {
	return RecordMxAPIRecordmxReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordMxAPIService) RecordmxReferenceDeleteExecute(r RecordMxAPIRecordmxReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordMxAPIService.RecordmxReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:mx/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordMxAPIRecordmxReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordMxAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordMxAPIRecordmxReferenceGetRequest) ReturnFields(returnFields string) RecordMxAPIRecordmxReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordMxAPIRecordmxReferenceGetRequest) ReturnFields2(returnFields2 string) RecordMxAPIRecordmxReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordMxAPIRecordmxReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordMxAPIRecordmxReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordMxAPIRecordmxReferenceGetRequest) Execute() (*GetRecordMxResponse, *http.Response, error) {
	return r.ApiService.RecordmxReferenceGetExecute(r)
}

/*
RecordmxReferenceGet Get a specific record:mx object

Returns a specific record:mx object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:mx object
	@return RecordMxAPIRecordmxReferenceGetRequest
*/
func (a *RecordMxAPIService) RecordmxReferenceGet(ctx context.Context, reference string) RecordMxAPIRecordmxReferenceGetRequest {
	return RecordMxAPIRecordmxReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordMxResponse
func (a *RecordMxAPIService) RecordmxReferenceGetExecute(r RecordMxAPIRecordmxReferenceGetRequest) (*GetRecordMxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordMxResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordMxAPIService.RecordmxReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:mx/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordMxAPIRecordmxReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordMxAPI
	reference      string
	recordMx       *RecordMx
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordMxAPIRecordmxReferencePutRequest) RecordMx(recordMx RecordMx) RecordMxAPIRecordmxReferencePutRequest {
	r.recordMx = &recordMx
	return r
}

// Enter the field names followed by comma
func (r RecordMxAPIRecordmxReferencePutRequest) ReturnFields(returnFields string) RecordMxAPIRecordmxReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordMxAPIRecordmxReferencePutRequest) ReturnFields2(returnFields2 string) RecordMxAPIRecordmxReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordMxAPIRecordmxReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordMxAPIRecordmxReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordMxAPIRecordmxReferencePutRequest) Execute() (*UpdateRecordMxResponse, *http.Response, error) {
	return r.ApiService.RecordmxReferencePutExecute(r)
}

/*
RecordmxReferencePut Update a record:mx object

Updates a specific record:mx object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:mx object
	@return RecordMxAPIRecordmxReferencePutRequest
*/
func (a *RecordMxAPIService) RecordmxReferencePut(ctx context.Context, reference string) RecordMxAPIRecordmxReferencePutRequest {
	return RecordMxAPIRecordmxReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordMxResponse
func (a *RecordMxAPIService) RecordmxReferencePutExecute(r RecordMxAPIRecordmxReferencePutRequest) (*UpdateRecordMxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordMxResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordMxAPIService.RecordmxReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:mx/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordMx == nil {
		return localVarReturnValue, nil, internal.ReportError("recordMx is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordMx != nil {
		if r.recordMx.Extattrs == nil {
			r.recordMx.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordMx.Extattrs)[k]; !ok {
				(*r.recordMx.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordMx
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
