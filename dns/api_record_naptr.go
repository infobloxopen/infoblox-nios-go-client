/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordNaptrAPI interface {
	/*
		RecordnaptrGet Retrieve record:naptr objects

		Returns a list of record:naptr objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordNaptrAPIRecordnaptrGetRequest
	*/
	RecordnaptrGet(ctx context.Context) RecordNaptrAPIRecordnaptrGetRequest

	// RecordnaptrGetExecute executes the request
	//  @return ListRecordNaptrResponse
	RecordnaptrGetExecute(r RecordNaptrAPIRecordnaptrGetRequest) (*ListRecordNaptrResponse, *http.Response, error)
	/*
		RecordnaptrPost Create a record:naptr object

		Creates a new record:naptr object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordNaptrAPIRecordnaptrPostRequest
	*/
	RecordnaptrPost(ctx context.Context) RecordNaptrAPIRecordnaptrPostRequest

	// RecordnaptrPostExecute executes the request
	//  @return CreateRecordNaptrResponse
	RecordnaptrPostExecute(r RecordNaptrAPIRecordnaptrPostRequest) (*CreateRecordNaptrResponse, *http.Response, error)
	/*
		RecordnaptrReferenceDelete Delete a record:naptr object

		Deletes a specific record:naptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:naptr object
		@return RecordNaptrAPIRecordnaptrReferenceDeleteRequest
	*/
	RecordnaptrReferenceDelete(ctx context.Context, reference string) RecordNaptrAPIRecordnaptrReferenceDeleteRequest

	// RecordnaptrReferenceDeleteExecute executes the request
	RecordnaptrReferenceDeleteExecute(r RecordNaptrAPIRecordnaptrReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordnaptrReferenceGet Get a specific record:naptr object

		Returns a specific record:naptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:naptr object
		@return RecordNaptrAPIRecordnaptrReferenceGetRequest
	*/
	RecordnaptrReferenceGet(ctx context.Context, reference string) RecordNaptrAPIRecordnaptrReferenceGetRequest

	// RecordnaptrReferenceGetExecute executes the request
	//  @return GetRecordNaptrResponse
	RecordnaptrReferenceGetExecute(r RecordNaptrAPIRecordnaptrReferenceGetRequest) (*GetRecordNaptrResponse, *http.Response, error)
	/*
		RecordnaptrReferencePut Update a record:naptr object

		Updates a specific record:naptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:naptr object
		@return RecordNaptrAPIRecordnaptrReferencePutRequest
	*/
	RecordnaptrReferencePut(ctx context.Context, reference string) RecordNaptrAPIRecordnaptrReferencePutRequest

	// RecordnaptrReferencePutExecute executes the request
	//  @return UpdateRecordNaptrResponse
	RecordnaptrReferencePutExecute(r RecordNaptrAPIRecordnaptrReferencePutRequest) (*UpdateRecordNaptrResponse, *http.Response, error)
}

// RecordNaptrAPIService RecordNaptrAPI service
type RecordNaptrAPIService internal.Service

type RecordNaptrAPIRecordnaptrGetRequest struct {
	ctx            context.Context
	ApiService     RecordNaptrAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordNaptrAPIRecordnaptrGetRequest) ReturnFields(returnFields string) RecordNaptrAPIRecordnaptrGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordNaptrAPIRecordnaptrGetRequest) ReturnFields2(returnFields2 string) RecordNaptrAPIRecordnaptrGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordNaptrAPIRecordnaptrGetRequest) MaxResults(maxResults int32) RecordNaptrAPIRecordnaptrGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordNaptrAPIRecordnaptrGetRequest) ReturnAsObject(returnAsObject int32) RecordNaptrAPIRecordnaptrGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordNaptrAPIRecordnaptrGetRequest) Paging(paging int32) RecordNaptrAPIRecordnaptrGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordNaptrAPIRecordnaptrGetRequest) PageId(pageId string) RecordNaptrAPIRecordnaptrGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordNaptrAPIRecordnaptrGetRequest) Filters(filters map[string]interface{}) RecordNaptrAPIRecordnaptrGetRequest {
	r.filters = &filters
	return r
}

func (r RecordNaptrAPIRecordnaptrGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordNaptrAPIRecordnaptrGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordNaptrAPIRecordnaptrGetRequest) Execute() (*ListRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.RecordnaptrGetExecute(r)
}

/*
RecordnaptrGet Retrieve record:naptr objects

Returns a list of record:naptr objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordNaptrAPIRecordnaptrGetRequest
*/
func (a *RecordNaptrAPIService) RecordnaptrGet(ctx context.Context) RecordNaptrAPIRecordnaptrGetRequest {
	return RecordNaptrAPIRecordnaptrGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordNaptrResponse
func (a *RecordNaptrAPIService) RecordnaptrGetExecute(r RecordNaptrAPIRecordnaptrGetRequest) (*ListRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNaptrAPIService.RecordnaptrGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:naptr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordNaptrAPIRecordnaptrPostRequest struct {
	ctx            context.Context
	ApiService     RecordNaptrAPI
	recordNaptr    *RecordNaptr
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordNaptrAPIRecordnaptrPostRequest) RecordNaptr(recordNaptr RecordNaptr) RecordNaptrAPIRecordnaptrPostRequest {
	r.recordNaptr = &recordNaptr
	return r
}

// Enter the field names followed by comma
func (r RecordNaptrAPIRecordnaptrPostRequest) ReturnFields(returnFields string) RecordNaptrAPIRecordnaptrPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordNaptrAPIRecordnaptrPostRequest) ReturnFields2(returnFields2 string) RecordNaptrAPIRecordnaptrPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordNaptrAPIRecordnaptrPostRequest) ReturnAsObject(returnAsObject int32) RecordNaptrAPIRecordnaptrPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordNaptrAPIRecordnaptrPostRequest) Execute() (*CreateRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.RecordnaptrPostExecute(r)
}

/*
RecordnaptrPost Create a record:naptr object

Creates a new record:naptr object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordNaptrAPIRecordnaptrPostRequest
*/
func (a *RecordNaptrAPIService) RecordnaptrPost(ctx context.Context) RecordNaptrAPIRecordnaptrPostRequest {
	return RecordNaptrAPIRecordnaptrPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordNaptrResponse
func (a *RecordNaptrAPIService) RecordnaptrPostExecute(r RecordNaptrAPIRecordnaptrPostRequest) (*CreateRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNaptrAPIService.RecordnaptrPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:naptr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordNaptr == nil {
		return localVarReturnValue, nil, internal.ReportError("recordNaptr is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordNaptr != nil {
		if r.recordNaptr.Extattrs == nil {
			r.recordNaptr.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordNaptr.Extattrs)[k]; !ok {
				(*r.recordNaptr.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordNaptr
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordNaptrAPIRecordnaptrReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordNaptrAPI
	reference  string
}

func (r RecordNaptrAPIRecordnaptrReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordnaptrReferenceDeleteExecute(r)
}

/*
RecordnaptrReferenceDelete Delete a record:naptr object

Deletes a specific record:naptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:naptr object
	@return RecordNaptrAPIRecordnaptrReferenceDeleteRequest
*/
func (a *RecordNaptrAPIService) RecordnaptrReferenceDelete(ctx context.Context, reference string) RecordNaptrAPIRecordnaptrReferenceDeleteRequest {
	return RecordNaptrAPIRecordnaptrReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordNaptrAPIService) RecordnaptrReferenceDeleteExecute(r RecordNaptrAPIRecordnaptrReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNaptrAPIService.RecordnaptrReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:naptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordNaptrAPIRecordnaptrReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordNaptrAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordNaptrAPIRecordnaptrReferenceGetRequest) ReturnFields(returnFields string) RecordNaptrAPIRecordnaptrReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordNaptrAPIRecordnaptrReferenceGetRequest) ReturnFields2(returnFields2 string) RecordNaptrAPIRecordnaptrReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordNaptrAPIRecordnaptrReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordNaptrAPIRecordnaptrReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordNaptrAPIRecordnaptrReferenceGetRequest) Execute() (*GetRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.RecordnaptrReferenceGetExecute(r)
}

/*
RecordnaptrReferenceGet Get a specific record:naptr object

Returns a specific record:naptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:naptr object
	@return RecordNaptrAPIRecordnaptrReferenceGetRequest
*/
func (a *RecordNaptrAPIService) RecordnaptrReferenceGet(ctx context.Context, reference string) RecordNaptrAPIRecordnaptrReferenceGetRequest {
	return RecordNaptrAPIRecordnaptrReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordNaptrResponse
func (a *RecordNaptrAPIService) RecordnaptrReferenceGetExecute(r RecordNaptrAPIRecordnaptrReferenceGetRequest) (*GetRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNaptrAPIService.RecordnaptrReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:naptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordNaptrAPIRecordnaptrReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordNaptrAPI
	reference      string
	recordNaptr    *RecordNaptr
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordNaptrAPIRecordnaptrReferencePutRequest) RecordNaptr(recordNaptr RecordNaptr) RecordNaptrAPIRecordnaptrReferencePutRequest {
	r.recordNaptr = &recordNaptr
	return r
}

// Enter the field names followed by comma
func (r RecordNaptrAPIRecordnaptrReferencePutRequest) ReturnFields(returnFields string) RecordNaptrAPIRecordnaptrReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordNaptrAPIRecordnaptrReferencePutRequest) ReturnFields2(returnFields2 string) RecordNaptrAPIRecordnaptrReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordNaptrAPIRecordnaptrReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordNaptrAPIRecordnaptrReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordNaptrAPIRecordnaptrReferencePutRequest) Execute() (*UpdateRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.RecordnaptrReferencePutExecute(r)
}

/*
RecordnaptrReferencePut Update a record:naptr object

Updates a specific record:naptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:naptr object
	@return RecordNaptrAPIRecordnaptrReferencePutRequest
*/
func (a *RecordNaptrAPIService) RecordnaptrReferencePut(ctx context.Context, reference string) RecordNaptrAPIRecordnaptrReferencePutRequest {
	return RecordNaptrAPIRecordnaptrReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordNaptrResponse
func (a *RecordNaptrAPIService) RecordnaptrReferencePutExecute(r RecordNaptrAPIRecordnaptrReferencePutRequest) (*UpdateRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNaptrAPIService.RecordnaptrReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:naptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordNaptr == nil {
		return localVarReturnValue, nil, internal.ReportError("recordNaptr is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordNaptr != nil {
		if r.recordNaptr.Extattrs == nil {
			r.recordNaptr.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordNaptr.Extattrs)[k]; !ok {
				(*r.recordNaptr.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordNaptr
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
