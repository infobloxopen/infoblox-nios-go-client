/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordNsAPI interface {
	/*
		RecordnsGet Retrieve record:ns objects

		Returns a list of record:ns objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordNsAPIRecordnsGetRequest
	*/
	RecordnsGet(ctx context.Context) RecordNsAPIRecordnsGetRequest

	// RecordnsGetExecute executes the request
	//  @return ListRecordNsResponse
	RecordnsGetExecute(r RecordNsAPIRecordnsGetRequest) (*ListRecordNsResponse, *http.Response, error)
	/*
		RecordnsPost Create a record:ns object

		Creates a new record:ns object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordNsAPIRecordnsPostRequest
	*/
	RecordnsPost(ctx context.Context) RecordNsAPIRecordnsPostRequest

	// RecordnsPostExecute executes the request
	//  @return CreateRecordNsResponse
	RecordnsPostExecute(r RecordNsAPIRecordnsPostRequest) (*CreateRecordNsResponse, *http.Response, error)
	/*
		RecordnsReferenceDelete Delete a record:ns object

		Deletes a specific record:ns object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:ns object
		@return RecordNsAPIRecordnsReferenceDeleteRequest
	*/
	RecordnsReferenceDelete(ctx context.Context, reference string) RecordNsAPIRecordnsReferenceDeleteRequest

	// RecordnsReferenceDeleteExecute executes the request
	RecordnsReferenceDeleteExecute(r RecordNsAPIRecordnsReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordnsReferenceGet Get a specific record:ns object

		Returns a specific record:ns object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:ns object
		@return RecordNsAPIRecordnsReferenceGetRequest
	*/
	RecordnsReferenceGet(ctx context.Context, reference string) RecordNsAPIRecordnsReferenceGetRequest

	// RecordnsReferenceGetExecute executes the request
	//  @return GetRecordNsResponse
	RecordnsReferenceGetExecute(r RecordNsAPIRecordnsReferenceGetRequest) (*GetRecordNsResponse, *http.Response, error)
	/*
		RecordnsReferencePut Update a record:ns object

		Updates a specific record:ns object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:ns object
		@return RecordNsAPIRecordnsReferencePutRequest
	*/
	RecordnsReferencePut(ctx context.Context, reference string) RecordNsAPIRecordnsReferencePutRequest

	// RecordnsReferencePutExecute executes the request
	//  @return UpdateRecordNsResponse
	RecordnsReferencePutExecute(r RecordNsAPIRecordnsReferencePutRequest) (*UpdateRecordNsResponse, *http.Response, error)
}

// RecordNsAPIService RecordNsAPI service
type RecordNsAPIService internal.Service

type RecordNsAPIRecordnsGetRequest struct {
	ctx            context.Context
	ApiService     RecordNsAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordNsAPIRecordnsGetRequest) ReturnFields(returnFields string) RecordNsAPIRecordnsGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordNsAPIRecordnsGetRequest) ReturnFields2(returnFields2 string) RecordNsAPIRecordnsGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordNsAPIRecordnsGetRequest) MaxResults(maxResults int32) RecordNsAPIRecordnsGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordNsAPIRecordnsGetRequest) ReturnAsObject(returnAsObject int32) RecordNsAPIRecordnsGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordNsAPIRecordnsGetRequest) Paging(paging int32) RecordNsAPIRecordnsGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordNsAPIRecordnsGetRequest) PageId(pageId string) RecordNsAPIRecordnsGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordNsAPIRecordnsGetRequest) Filters(filters map[string]interface{}) RecordNsAPIRecordnsGetRequest {
	r.filters = &filters
	return r
}

func (r RecordNsAPIRecordnsGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordNsAPIRecordnsGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordNsAPIRecordnsGetRequest) Execute() (*ListRecordNsResponse, *http.Response, error) {
	return r.ApiService.RecordnsGetExecute(r)
}

/*
RecordnsGet Retrieve record:ns objects

Returns a list of record:ns objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordNsAPIRecordnsGetRequest
*/
func (a *RecordNsAPIService) RecordnsGet(ctx context.Context) RecordNsAPIRecordnsGetRequest {
	return RecordNsAPIRecordnsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordNsResponse
func (a *RecordNsAPIService) RecordnsGetExecute(r RecordNsAPIRecordnsGetRequest) (*ListRecordNsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordNsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNsAPIService.RecordnsGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordNsAPIRecordnsPostRequest struct {
	ctx            context.Context
	ApiService     RecordNsAPI
	recordNs       *RecordNs
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordNsAPIRecordnsPostRequest) RecordNs(recordNs RecordNs) RecordNsAPIRecordnsPostRequest {
	r.recordNs = &recordNs
	return r
}

// Enter the field names followed by comma
func (r RecordNsAPIRecordnsPostRequest) ReturnFields(returnFields string) RecordNsAPIRecordnsPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordNsAPIRecordnsPostRequest) ReturnFields2(returnFields2 string) RecordNsAPIRecordnsPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordNsAPIRecordnsPostRequest) ReturnAsObject(returnAsObject int32) RecordNsAPIRecordnsPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordNsAPIRecordnsPostRequest) Execute() (*CreateRecordNsResponse, *http.Response, error) {
	return r.ApiService.RecordnsPostExecute(r)
}

/*
RecordnsPost Create a record:ns object

Creates a new record:ns object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordNsAPIRecordnsPostRequest
*/
func (a *RecordNsAPIService) RecordnsPost(ctx context.Context) RecordNsAPIRecordnsPostRequest {
	return RecordNsAPIRecordnsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordNsResponse
func (a *RecordNsAPIService) RecordnsPostExecute(r RecordNsAPIRecordnsPostRequest) (*CreateRecordNsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordNsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNsAPIService.RecordnsPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordNs == nil {
		return localVarReturnValue, nil, internal.ReportError("recordNs is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recordNs
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordNsAPIRecordnsReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordNsAPI
	reference  string
}

func (r RecordNsAPIRecordnsReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordnsReferenceDeleteExecute(r)
}

/*
RecordnsReferenceDelete Delete a record:ns object

Deletes a specific record:ns object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:ns object
	@return RecordNsAPIRecordnsReferenceDeleteRequest
*/
func (a *RecordNsAPIService) RecordnsReferenceDelete(ctx context.Context, reference string) RecordNsAPIRecordnsReferenceDeleteRequest {
	return RecordNsAPIRecordnsReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordNsAPIService) RecordnsReferenceDeleteExecute(r RecordNsAPIRecordnsReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNsAPIService.RecordnsReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ns/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordNsAPIRecordnsReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordNsAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordNsAPIRecordnsReferenceGetRequest) ReturnFields(returnFields string) RecordNsAPIRecordnsReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordNsAPIRecordnsReferenceGetRequest) ReturnFields2(returnFields2 string) RecordNsAPIRecordnsReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordNsAPIRecordnsReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordNsAPIRecordnsReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordNsAPIRecordnsReferenceGetRequest) Execute() (*GetRecordNsResponse, *http.Response, error) {
	return r.ApiService.RecordnsReferenceGetExecute(r)
}

/*
RecordnsReferenceGet Get a specific record:ns object

Returns a specific record:ns object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:ns object
	@return RecordNsAPIRecordnsReferenceGetRequest
*/
func (a *RecordNsAPIService) RecordnsReferenceGet(ctx context.Context, reference string) RecordNsAPIRecordnsReferenceGetRequest {
	return RecordNsAPIRecordnsReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordNsResponse
func (a *RecordNsAPIService) RecordnsReferenceGetExecute(r RecordNsAPIRecordnsReferenceGetRequest) (*GetRecordNsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordNsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNsAPIService.RecordnsReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ns/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordNsAPIRecordnsReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordNsAPI
	reference      string
	recordNs       *RecordNs
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordNsAPIRecordnsReferencePutRequest) RecordNs(recordNs RecordNs) RecordNsAPIRecordnsReferencePutRequest {
	r.recordNs = &recordNs
	return r
}

// Enter the field names followed by comma
func (r RecordNsAPIRecordnsReferencePutRequest) ReturnFields(returnFields string) RecordNsAPIRecordnsReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordNsAPIRecordnsReferencePutRequest) ReturnFields2(returnFields2 string) RecordNsAPIRecordnsReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordNsAPIRecordnsReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordNsAPIRecordnsReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordNsAPIRecordnsReferencePutRequest) Execute() (*UpdateRecordNsResponse, *http.Response, error) {
	return r.ApiService.RecordnsReferencePutExecute(r)
}

/*
RecordnsReferencePut Update a record:ns object

Updates a specific record:ns object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:ns object
	@return RecordNsAPIRecordnsReferencePutRequest
*/
func (a *RecordNsAPIService) RecordnsReferencePut(ctx context.Context, reference string) RecordNsAPIRecordnsReferencePutRequest {
	return RecordNsAPIRecordnsReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordNsResponse
func (a *RecordNsAPIService) RecordnsReferencePutExecute(r RecordNsAPIRecordnsReferencePutRequest) (*UpdateRecordNsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordNsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordNsAPIService.RecordnsReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ns/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordNs == nil {
		return localVarReturnValue, nil, internal.ReportError("recordNs is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recordNs
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
