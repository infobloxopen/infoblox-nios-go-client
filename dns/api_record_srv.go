/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordSrvAPI interface {
	/*
		RecordsrvGet Retrieve record:srv objects

		Returns a list of record:srv objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordSrvAPIRecordsrvGetRequest
	*/
	RecordsrvGet(ctx context.Context) RecordSrvAPIRecordsrvGetRequest

	// RecordsrvGetExecute executes the request
	//  @return ListRecordSrvResponse
	RecordsrvGetExecute(r RecordSrvAPIRecordsrvGetRequest) (*ListRecordSrvResponse, *http.Response, error)
	/*
		RecordsrvPost Create a record:srv object

		Creates a new record:srv object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordSrvAPIRecordsrvPostRequest
	*/
	RecordsrvPost(ctx context.Context) RecordSrvAPIRecordsrvPostRequest

	// RecordsrvPostExecute executes the request
	//  @return CreateRecordSrvResponse
	RecordsrvPostExecute(r RecordSrvAPIRecordsrvPostRequest) (*CreateRecordSrvResponse, *http.Response, error)
	/*
		RecordsrvReferenceDelete Delete a record:srv object

		Deletes a specific record:srv object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:srv object
		@return RecordSrvAPIRecordsrvReferenceDeleteRequest
	*/
	RecordsrvReferenceDelete(ctx context.Context, reference string) RecordSrvAPIRecordsrvReferenceDeleteRequest

	// RecordsrvReferenceDeleteExecute executes the request
	RecordsrvReferenceDeleteExecute(r RecordSrvAPIRecordsrvReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordsrvReferenceGet Get a specific record:srv object

		Returns a specific record:srv object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:srv object
		@return RecordSrvAPIRecordsrvReferenceGetRequest
	*/
	RecordsrvReferenceGet(ctx context.Context, reference string) RecordSrvAPIRecordsrvReferenceGetRequest

	// RecordsrvReferenceGetExecute executes the request
	//  @return GetRecordSrvResponse
	RecordsrvReferenceGetExecute(r RecordSrvAPIRecordsrvReferenceGetRequest) (*GetRecordSrvResponse, *http.Response, error)
	/*
		RecordsrvReferencePut Update a record:srv object

		Updates a specific record:srv object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:srv object
		@return RecordSrvAPIRecordsrvReferencePutRequest
	*/
	RecordsrvReferencePut(ctx context.Context, reference string) RecordSrvAPIRecordsrvReferencePutRequest

	// RecordsrvReferencePutExecute executes the request
	//  @return UpdateRecordSrvResponse
	RecordsrvReferencePutExecute(r RecordSrvAPIRecordsrvReferencePutRequest) (*UpdateRecordSrvResponse, *http.Response, error)
}

// RecordSrvAPIService RecordSrvAPI service
type RecordSrvAPIService internal.Service

type RecordSrvAPIRecordsrvGetRequest struct {
	ctx            context.Context
	ApiService     RecordSrvAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordSrvAPIRecordsrvGetRequest) ReturnFields(returnFields string) RecordSrvAPIRecordsrvGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordSrvAPIRecordsrvGetRequest) ReturnFields2(returnFields2 string) RecordSrvAPIRecordsrvGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordSrvAPIRecordsrvGetRequest) MaxResults(maxResults int32) RecordSrvAPIRecordsrvGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordSrvAPIRecordsrvGetRequest) ReturnAsObject(returnAsObject int32) RecordSrvAPIRecordsrvGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordSrvAPIRecordsrvGetRequest) Paging(paging int32) RecordSrvAPIRecordsrvGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordSrvAPIRecordsrvGetRequest) PageId(pageId string) RecordSrvAPIRecordsrvGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordSrvAPIRecordsrvGetRequest) Filters(filters map[string]interface{}) RecordSrvAPIRecordsrvGetRequest {
	r.filters = &filters
	return r
}

func (r RecordSrvAPIRecordsrvGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordSrvAPIRecordsrvGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordSrvAPIRecordsrvGetRequest) Execute() (*ListRecordSrvResponse, *http.Response, error) {
	return r.ApiService.RecordsrvGetExecute(r)
}

/*
RecordsrvGet Retrieve record:srv objects

Returns a list of record:srv objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordSrvAPIRecordsrvGetRequest
*/
func (a *RecordSrvAPIService) RecordsrvGet(ctx context.Context) RecordSrvAPIRecordsrvGetRequest {
	return RecordSrvAPIRecordsrvGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordSrvResponse
func (a *RecordSrvAPIService) RecordsrvGetExecute(r RecordSrvAPIRecordsrvGetRequest) (*ListRecordSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordSrvAPIService.RecordsrvGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:srv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordSrvAPIRecordsrvPostRequest struct {
	ctx            context.Context
	ApiService     RecordSrvAPI
	recordSrv      *RecordSrv
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordSrvAPIRecordsrvPostRequest) RecordSrv(recordSrv RecordSrv) RecordSrvAPIRecordsrvPostRequest {
	r.recordSrv = &recordSrv
	return r
}

// Enter the field names followed by comma
func (r RecordSrvAPIRecordsrvPostRequest) ReturnFields(returnFields string) RecordSrvAPIRecordsrvPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordSrvAPIRecordsrvPostRequest) ReturnFields2(returnFields2 string) RecordSrvAPIRecordsrvPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordSrvAPIRecordsrvPostRequest) ReturnAsObject(returnAsObject int32) RecordSrvAPIRecordsrvPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordSrvAPIRecordsrvPostRequest) Execute() (*CreateRecordSrvResponse, *http.Response, error) {
	return r.ApiService.RecordsrvPostExecute(r)
}

/*
RecordsrvPost Create a record:srv object

Creates a new record:srv object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordSrvAPIRecordsrvPostRequest
*/
func (a *RecordSrvAPIService) RecordsrvPost(ctx context.Context) RecordSrvAPIRecordsrvPostRequest {
	return RecordSrvAPIRecordsrvPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordSrvResponse
func (a *RecordSrvAPIService) RecordsrvPostExecute(r RecordSrvAPIRecordsrvPostRequest) (*CreateRecordSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordSrvAPIService.RecordsrvPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:srv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordSrv == nil {
		return localVarReturnValue, nil, internal.ReportError("recordSrv is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordSrv != nil {
		if r.recordSrv.Extattrs == nil {
			r.recordSrv.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordSrv.Extattrs)[k]; !ok {
				(*r.recordSrv.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordSrv
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordSrvAPIRecordsrvReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordSrvAPI
	reference  string
}

func (r RecordSrvAPIRecordsrvReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordsrvReferenceDeleteExecute(r)
}

/*
RecordsrvReferenceDelete Delete a record:srv object

Deletes a specific record:srv object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:srv object
	@return RecordSrvAPIRecordsrvReferenceDeleteRequest
*/
func (a *RecordSrvAPIService) RecordsrvReferenceDelete(ctx context.Context, reference string) RecordSrvAPIRecordsrvReferenceDeleteRequest {
	return RecordSrvAPIRecordsrvReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordSrvAPIService) RecordsrvReferenceDeleteExecute(r RecordSrvAPIRecordsrvReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordSrvAPIService.RecordsrvReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:srv/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordSrvAPIRecordsrvReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordSrvAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordSrvAPIRecordsrvReferenceGetRequest) ReturnFields(returnFields string) RecordSrvAPIRecordsrvReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordSrvAPIRecordsrvReferenceGetRequest) ReturnFields2(returnFields2 string) RecordSrvAPIRecordsrvReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordSrvAPIRecordsrvReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordSrvAPIRecordsrvReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordSrvAPIRecordsrvReferenceGetRequest) Execute() (*GetRecordSrvResponse, *http.Response, error) {
	return r.ApiService.RecordsrvReferenceGetExecute(r)
}

/*
RecordsrvReferenceGet Get a specific record:srv object

Returns a specific record:srv object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:srv object
	@return RecordSrvAPIRecordsrvReferenceGetRequest
*/
func (a *RecordSrvAPIService) RecordsrvReferenceGet(ctx context.Context, reference string) RecordSrvAPIRecordsrvReferenceGetRequest {
	return RecordSrvAPIRecordsrvReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordSrvResponse
func (a *RecordSrvAPIService) RecordsrvReferenceGetExecute(r RecordSrvAPIRecordsrvReferenceGetRequest) (*GetRecordSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordSrvAPIService.RecordsrvReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:srv/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordSrvAPIRecordsrvReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordSrvAPI
	reference      string
	recordSrv      *RecordSrv
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordSrvAPIRecordsrvReferencePutRequest) RecordSrv(recordSrv RecordSrv) RecordSrvAPIRecordsrvReferencePutRequest {
	r.recordSrv = &recordSrv
	return r
}

// Enter the field names followed by comma
func (r RecordSrvAPIRecordsrvReferencePutRequest) ReturnFields(returnFields string) RecordSrvAPIRecordsrvReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordSrvAPIRecordsrvReferencePutRequest) ReturnFields2(returnFields2 string) RecordSrvAPIRecordsrvReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordSrvAPIRecordsrvReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordSrvAPIRecordsrvReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordSrvAPIRecordsrvReferencePutRequest) Execute() (*UpdateRecordSrvResponse, *http.Response, error) {
	return r.ApiService.RecordsrvReferencePutExecute(r)
}

/*
RecordsrvReferencePut Update a record:srv object

Updates a specific record:srv object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:srv object
	@return RecordSrvAPIRecordsrvReferencePutRequest
*/
func (a *RecordSrvAPIService) RecordsrvReferencePut(ctx context.Context, reference string) RecordSrvAPIRecordsrvReferencePutRequest {
	return RecordSrvAPIRecordsrvReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordSrvResponse
func (a *RecordSrvAPIService) RecordsrvReferencePutExecute(r RecordSrvAPIRecordsrvReferencePutRequest) (*UpdateRecordSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordSrvAPIService.RecordsrvReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:srv/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordSrv == nil {
		return localVarReturnValue, nil, internal.ReportError("recordSrv is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordSrv != nil {
		if r.recordSrv.Extattrs == nil {
			r.recordSrv.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordSrv.Extattrs)[k]; !ok {
				(*r.recordSrv.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordSrv
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
