/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordTlsaAPI interface {
	/*
		RecordtlsaGet Retrieve record:tlsa objects

		Returns a list of record:tlsa objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordTlsaAPIRecordtlsaGetRequest
	*/
	RecordtlsaGet(ctx context.Context) RecordTlsaAPIRecordtlsaGetRequest

	// RecordtlsaGetExecute executes the request
	//  @return ListRecordTlsaResponse
	RecordtlsaGetExecute(r RecordTlsaAPIRecordtlsaGetRequest) (*ListRecordTlsaResponse, *http.Response, error)
	/*
		RecordtlsaPost Create a record:tlsa object

		Creates a new record:tlsa object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordTlsaAPIRecordtlsaPostRequest
	*/
	RecordtlsaPost(ctx context.Context) RecordTlsaAPIRecordtlsaPostRequest

	// RecordtlsaPostExecute executes the request
	//  @return CreateRecordTlsaResponse
	RecordtlsaPostExecute(r RecordTlsaAPIRecordtlsaPostRequest) (*CreateRecordTlsaResponse, *http.Response, error)
	/*
		RecordtlsaReferenceDelete Delete a record:tlsa object

		Deletes a specific record:tlsa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:tlsa object
		@return RecordTlsaAPIRecordtlsaReferenceDeleteRequest
	*/
	RecordtlsaReferenceDelete(ctx context.Context, reference string) RecordTlsaAPIRecordtlsaReferenceDeleteRequest

	// RecordtlsaReferenceDeleteExecute executes the request
	RecordtlsaReferenceDeleteExecute(r RecordTlsaAPIRecordtlsaReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordtlsaReferenceGet Get a specific record:tlsa object

		Returns a specific record:tlsa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:tlsa object
		@return RecordTlsaAPIRecordtlsaReferenceGetRequest
	*/
	RecordtlsaReferenceGet(ctx context.Context, reference string) RecordTlsaAPIRecordtlsaReferenceGetRequest

	// RecordtlsaReferenceGetExecute executes the request
	//  @return GetRecordTlsaResponse
	RecordtlsaReferenceGetExecute(r RecordTlsaAPIRecordtlsaReferenceGetRequest) (*GetRecordTlsaResponse, *http.Response, error)
	/*
		RecordtlsaReferencePut Update a record:tlsa object

		Updates a specific record:tlsa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:tlsa object
		@return RecordTlsaAPIRecordtlsaReferencePutRequest
	*/
	RecordtlsaReferencePut(ctx context.Context, reference string) RecordTlsaAPIRecordtlsaReferencePutRequest

	// RecordtlsaReferencePutExecute executes the request
	//  @return UpdateRecordTlsaResponse
	RecordtlsaReferencePutExecute(r RecordTlsaAPIRecordtlsaReferencePutRequest) (*UpdateRecordTlsaResponse, *http.Response, error)
}

// RecordTlsaAPIService RecordTlsaAPI service
type RecordTlsaAPIService internal.Service

type RecordTlsaAPIRecordtlsaGetRequest struct {
	ctx            context.Context
	ApiService     RecordTlsaAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordTlsaAPIRecordtlsaGetRequest) ReturnFields(returnFields string) RecordTlsaAPIRecordtlsaGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordTlsaAPIRecordtlsaGetRequest) ReturnFields2(returnFields2 string) RecordTlsaAPIRecordtlsaGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordTlsaAPIRecordtlsaGetRequest) MaxResults(maxResults int32) RecordTlsaAPIRecordtlsaGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordTlsaAPIRecordtlsaGetRequest) ReturnAsObject(returnAsObject int32) RecordTlsaAPIRecordtlsaGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordTlsaAPIRecordtlsaGetRequest) Paging(paging int32) RecordTlsaAPIRecordtlsaGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordTlsaAPIRecordtlsaGetRequest) PageId(pageId string) RecordTlsaAPIRecordtlsaGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordTlsaAPIRecordtlsaGetRequest) Filters(filters map[string]interface{}) RecordTlsaAPIRecordtlsaGetRequest {
	r.filters = &filters
	return r
}

func (r RecordTlsaAPIRecordtlsaGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordTlsaAPIRecordtlsaGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordTlsaAPIRecordtlsaGetRequest) Execute() (*ListRecordTlsaResponse, *http.Response, error) {
	return r.ApiService.RecordtlsaGetExecute(r)
}

/*
RecordtlsaGet Retrieve record:tlsa objects

Returns a list of record:tlsa objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordTlsaAPIRecordtlsaGetRequest
*/
func (a *RecordTlsaAPIService) RecordtlsaGet(ctx context.Context) RecordTlsaAPIRecordtlsaGetRequest {
	return RecordTlsaAPIRecordtlsaGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordTlsaResponse
func (a *RecordTlsaAPIService) RecordtlsaGetExecute(r RecordTlsaAPIRecordtlsaGetRequest) (*ListRecordTlsaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordTlsaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordTlsaAPIService.RecordtlsaGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:tlsa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordTlsaAPIRecordtlsaPostRequest struct {
	ctx            context.Context
	ApiService     RecordTlsaAPI
	recordTlsa     *RecordTlsa
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordTlsaAPIRecordtlsaPostRequest) RecordTlsa(recordTlsa RecordTlsa) RecordTlsaAPIRecordtlsaPostRequest {
	r.recordTlsa = &recordTlsa
	return r
}

// Enter the field names followed by comma
func (r RecordTlsaAPIRecordtlsaPostRequest) ReturnFields(returnFields string) RecordTlsaAPIRecordtlsaPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordTlsaAPIRecordtlsaPostRequest) ReturnFields2(returnFields2 string) RecordTlsaAPIRecordtlsaPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordTlsaAPIRecordtlsaPostRequest) ReturnAsObject(returnAsObject int32) RecordTlsaAPIRecordtlsaPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordTlsaAPIRecordtlsaPostRequest) Execute() (*CreateRecordTlsaResponse, *http.Response, error) {
	return r.ApiService.RecordtlsaPostExecute(r)
}

/*
RecordtlsaPost Create a record:tlsa object

Creates a new record:tlsa object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordTlsaAPIRecordtlsaPostRequest
*/
func (a *RecordTlsaAPIService) RecordtlsaPost(ctx context.Context) RecordTlsaAPIRecordtlsaPostRequest {
	return RecordTlsaAPIRecordtlsaPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordTlsaResponse
func (a *RecordTlsaAPIService) RecordtlsaPostExecute(r RecordTlsaAPIRecordtlsaPostRequest) (*CreateRecordTlsaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordTlsaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordTlsaAPIService.RecordtlsaPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:tlsa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordTlsa == nil {
		return localVarReturnValue, nil, internal.ReportError("recordTlsa is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordTlsa != nil {
		if r.recordTlsa.Extattrs == nil {
			r.recordTlsa.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordTlsa.Extattrs)[k]; !ok {
				(*r.recordTlsa.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordTlsa
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordTlsaAPIRecordtlsaReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordTlsaAPI
	reference  string
}

func (r RecordTlsaAPIRecordtlsaReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordtlsaReferenceDeleteExecute(r)
}

/*
RecordtlsaReferenceDelete Delete a record:tlsa object

Deletes a specific record:tlsa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:tlsa object
	@return RecordTlsaAPIRecordtlsaReferenceDeleteRequest
*/
func (a *RecordTlsaAPIService) RecordtlsaReferenceDelete(ctx context.Context, reference string) RecordTlsaAPIRecordtlsaReferenceDeleteRequest {
	return RecordTlsaAPIRecordtlsaReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordTlsaAPIService) RecordtlsaReferenceDeleteExecute(r RecordTlsaAPIRecordtlsaReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordTlsaAPIService.RecordtlsaReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:tlsa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordTlsaAPIRecordtlsaReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordTlsaAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordTlsaAPIRecordtlsaReferenceGetRequest) ReturnFields(returnFields string) RecordTlsaAPIRecordtlsaReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordTlsaAPIRecordtlsaReferenceGetRequest) ReturnFields2(returnFields2 string) RecordTlsaAPIRecordtlsaReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordTlsaAPIRecordtlsaReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordTlsaAPIRecordtlsaReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordTlsaAPIRecordtlsaReferenceGetRequest) Execute() (*GetRecordTlsaResponse, *http.Response, error) {
	return r.ApiService.RecordtlsaReferenceGetExecute(r)
}

/*
RecordtlsaReferenceGet Get a specific record:tlsa object

Returns a specific record:tlsa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:tlsa object
	@return RecordTlsaAPIRecordtlsaReferenceGetRequest
*/
func (a *RecordTlsaAPIService) RecordtlsaReferenceGet(ctx context.Context, reference string) RecordTlsaAPIRecordtlsaReferenceGetRequest {
	return RecordTlsaAPIRecordtlsaReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordTlsaResponse
func (a *RecordTlsaAPIService) RecordtlsaReferenceGetExecute(r RecordTlsaAPIRecordtlsaReferenceGetRequest) (*GetRecordTlsaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordTlsaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordTlsaAPIService.RecordtlsaReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:tlsa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordTlsaAPIRecordtlsaReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordTlsaAPI
	reference      string
	recordTlsa     *RecordTlsa
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordTlsaAPIRecordtlsaReferencePutRequest) RecordTlsa(recordTlsa RecordTlsa) RecordTlsaAPIRecordtlsaReferencePutRequest {
	r.recordTlsa = &recordTlsa
	return r
}

// Enter the field names followed by comma
func (r RecordTlsaAPIRecordtlsaReferencePutRequest) ReturnFields(returnFields string) RecordTlsaAPIRecordtlsaReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordTlsaAPIRecordtlsaReferencePutRequest) ReturnFields2(returnFields2 string) RecordTlsaAPIRecordtlsaReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordTlsaAPIRecordtlsaReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordTlsaAPIRecordtlsaReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordTlsaAPIRecordtlsaReferencePutRequest) Execute() (*UpdateRecordTlsaResponse, *http.Response, error) {
	return r.ApiService.RecordtlsaReferencePutExecute(r)
}

/*
RecordtlsaReferencePut Update a record:tlsa object

Updates a specific record:tlsa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:tlsa object
	@return RecordTlsaAPIRecordtlsaReferencePutRequest
*/
func (a *RecordTlsaAPIService) RecordtlsaReferencePut(ctx context.Context, reference string) RecordTlsaAPIRecordtlsaReferencePutRequest {
	return RecordTlsaAPIRecordtlsaReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordTlsaResponse
func (a *RecordTlsaAPIService) RecordtlsaReferencePutExecute(r RecordTlsaAPIRecordtlsaReferencePutRequest) (*UpdateRecordTlsaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordTlsaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordTlsaAPIService.RecordtlsaReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:tlsa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordTlsa == nil {
		return localVarReturnValue, nil, internal.ReportError("recordTlsa is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordTlsa != nil {
		if r.recordTlsa.Extattrs == nil {
			r.recordTlsa.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordTlsa.Extattrs)[k]; !ok {
				(*r.recordTlsa.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordTlsa
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
