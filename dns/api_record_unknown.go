/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordUnknownAPI interface {
	/*
		RecordunknownGet Retrieve record:unknown objects

		Returns a list of record:unknown objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordUnknownAPIRecordunknownGetRequest
	*/
	RecordunknownGet(ctx context.Context) RecordUnknownAPIRecordunknownGetRequest

	// RecordunknownGetExecute executes the request
	//  @return ListRecordUnknownResponse
	RecordunknownGetExecute(r RecordUnknownAPIRecordunknownGetRequest) (*ListRecordUnknownResponse, *http.Response, error)
	/*
		RecordunknownPost Create a record:unknown object

		Creates a new record:unknown object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordUnknownAPIRecordunknownPostRequest
	*/
	RecordunknownPost(ctx context.Context) RecordUnknownAPIRecordunknownPostRequest

	// RecordunknownPostExecute executes the request
	//  @return CreateRecordUnknownResponse
	RecordunknownPostExecute(r RecordUnknownAPIRecordunknownPostRequest) (*CreateRecordUnknownResponse, *http.Response, error)
	/*
		RecordunknownReferenceDelete Delete a record:unknown object

		Deletes a specific record:unknown object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:unknown object
		@return RecordUnknownAPIRecordunknownReferenceDeleteRequest
	*/
	RecordunknownReferenceDelete(ctx context.Context, reference string) RecordUnknownAPIRecordunknownReferenceDeleteRequest

	// RecordunknownReferenceDeleteExecute executes the request
	RecordunknownReferenceDeleteExecute(r RecordUnknownAPIRecordunknownReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordunknownReferenceGet Get a specific record:unknown object

		Returns a specific record:unknown object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:unknown object
		@return RecordUnknownAPIRecordunknownReferenceGetRequest
	*/
	RecordunknownReferenceGet(ctx context.Context, reference string) RecordUnknownAPIRecordunknownReferenceGetRequest

	// RecordunknownReferenceGetExecute executes the request
	//  @return GetRecordUnknownResponse
	RecordunknownReferenceGetExecute(r RecordUnknownAPIRecordunknownReferenceGetRequest) (*GetRecordUnknownResponse, *http.Response, error)
	/*
		RecordunknownReferencePut Update a record:unknown object

		Updates a specific record:unknown object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:unknown object
		@return RecordUnknownAPIRecordunknownReferencePutRequest
	*/
	RecordunknownReferencePut(ctx context.Context, reference string) RecordUnknownAPIRecordunknownReferencePutRequest

	// RecordunknownReferencePutExecute executes the request
	//  @return UpdateRecordUnknownResponse
	RecordunknownReferencePutExecute(r RecordUnknownAPIRecordunknownReferencePutRequest) (*UpdateRecordUnknownResponse, *http.Response, error)
}

// RecordUnknownAPIService RecordUnknownAPI service
type RecordUnknownAPIService internal.Service

type RecordUnknownAPIRecordunknownGetRequest struct {
	ctx            context.Context
	ApiService     RecordUnknownAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordUnknownAPIRecordunknownGetRequest) ReturnFields(returnFields string) RecordUnknownAPIRecordunknownGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordUnknownAPIRecordunknownGetRequest) ReturnFields2(returnFields2 string) RecordUnknownAPIRecordunknownGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordUnknownAPIRecordunknownGetRequest) MaxResults(maxResults int32) RecordUnknownAPIRecordunknownGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordUnknownAPIRecordunknownGetRequest) ReturnAsObject(returnAsObject int32) RecordUnknownAPIRecordunknownGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordUnknownAPIRecordunknownGetRequest) Paging(paging int32) RecordUnknownAPIRecordunknownGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordUnknownAPIRecordunknownGetRequest) PageId(pageId string) RecordUnknownAPIRecordunknownGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordUnknownAPIRecordunknownGetRequest) Filters(filters map[string]interface{}) RecordUnknownAPIRecordunknownGetRequest {
	r.filters = &filters
	return r
}

func (r RecordUnknownAPIRecordunknownGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordUnknownAPIRecordunknownGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordUnknownAPIRecordunknownGetRequest) Execute() (*ListRecordUnknownResponse, *http.Response, error) {
	return r.ApiService.RecordunknownGetExecute(r)
}

/*
RecordunknownGet Retrieve record:unknown objects

Returns a list of record:unknown objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordUnknownAPIRecordunknownGetRequest
*/
func (a *RecordUnknownAPIService) RecordunknownGet(ctx context.Context) RecordUnknownAPIRecordunknownGetRequest {
	return RecordUnknownAPIRecordunknownGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordUnknownResponse
func (a *RecordUnknownAPIService) RecordunknownGetExecute(r RecordUnknownAPIRecordunknownGetRequest) (*ListRecordUnknownResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordUnknownResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordUnknownAPIService.RecordunknownGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:unknown"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordUnknownAPIRecordunknownPostRequest struct {
	ctx            context.Context
	ApiService     RecordUnknownAPI
	recordUnknown  *RecordUnknown
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordUnknownAPIRecordunknownPostRequest) RecordUnknown(recordUnknown RecordUnknown) RecordUnknownAPIRecordunknownPostRequest {
	r.recordUnknown = &recordUnknown
	return r
}

// Enter the field names followed by comma
func (r RecordUnknownAPIRecordunknownPostRequest) ReturnFields(returnFields string) RecordUnknownAPIRecordunknownPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordUnknownAPIRecordunknownPostRequest) ReturnFields2(returnFields2 string) RecordUnknownAPIRecordunknownPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordUnknownAPIRecordunknownPostRequest) ReturnAsObject(returnAsObject int32) RecordUnknownAPIRecordunknownPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordUnknownAPIRecordunknownPostRequest) Execute() (*CreateRecordUnknownResponse, *http.Response, error) {
	return r.ApiService.RecordunknownPostExecute(r)
}

/*
RecordunknownPost Create a record:unknown object

Creates a new record:unknown object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordUnknownAPIRecordunknownPostRequest
*/
func (a *RecordUnknownAPIService) RecordunknownPost(ctx context.Context) RecordUnknownAPIRecordunknownPostRequest {
	return RecordUnknownAPIRecordunknownPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordUnknownResponse
func (a *RecordUnknownAPIService) RecordunknownPostExecute(r RecordUnknownAPIRecordunknownPostRequest) (*CreateRecordUnknownResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordUnknownResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordUnknownAPIService.RecordunknownPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:unknown"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordUnknown == nil {
		return localVarReturnValue, nil, internal.ReportError("recordUnknown is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordUnknown != nil {
		if r.recordUnknown.Extattrs == nil {
			r.recordUnknown.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordUnknown.Extattrs)[k]; !ok {
				(*r.recordUnknown.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordUnknown
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordUnknownAPIRecordunknownReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordUnknownAPI
	reference  string
}

func (r RecordUnknownAPIRecordunknownReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordunknownReferenceDeleteExecute(r)
}

/*
RecordunknownReferenceDelete Delete a record:unknown object

Deletes a specific record:unknown object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:unknown object
	@return RecordUnknownAPIRecordunknownReferenceDeleteRequest
*/
func (a *RecordUnknownAPIService) RecordunknownReferenceDelete(ctx context.Context, reference string) RecordUnknownAPIRecordunknownReferenceDeleteRequest {
	return RecordUnknownAPIRecordunknownReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordUnknownAPIService) RecordunknownReferenceDeleteExecute(r RecordUnknownAPIRecordunknownReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordUnknownAPIService.RecordunknownReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:unknown/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordUnknownAPIRecordunknownReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordUnknownAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordUnknownAPIRecordunknownReferenceGetRequest) ReturnFields(returnFields string) RecordUnknownAPIRecordunknownReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordUnknownAPIRecordunknownReferenceGetRequest) ReturnFields2(returnFields2 string) RecordUnknownAPIRecordunknownReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordUnknownAPIRecordunknownReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordUnknownAPIRecordunknownReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordUnknownAPIRecordunknownReferenceGetRequest) Execute() (*GetRecordUnknownResponse, *http.Response, error) {
	return r.ApiService.RecordunknownReferenceGetExecute(r)
}

/*
RecordunknownReferenceGet Get a specific record:unknown object

Returns a specific record:unknown object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:unknown object
	@return RecordUnknownAPIRecordunknownReferenceGetRequest
*/
func (a *RecordUnknownAPIService) RecordunknownReferenceGet(ctx context.Context, reference string) RecordUnknownAPIRecordunknownReferenceGetRequest {
	return RecordUnknownAPIRecordunknownReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordUnknownResponse
func (a *RecordUnknownAPIService) RecordunknownReferenceGetExecute(r RecordUnknownAPIRecordunknownReferenceGetRequest) (*GetRecordUnknownResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordUnknownResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordUnknownAPIService.RecordunknownReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:unknown/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordUnknownAPIRecordunknownReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordUnknownAPI
	reference      string
	recordUnknown  *RecordUnknown
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordUnknownAPIRecordunknownReferencePutRequest) RecordUnknown(recordUnknown RecordUnknown) RecordUnknownAPIRecordunknownReferencePutRequest {
	r.recordUnknown = &recordUnknown
	return r
}

// Enter the field names followed by comma
func (r RecordUnknownAPIRecordunknownReferencePutRequest) ReturnFields(returnFields string) RecordUnknownAPIRecordunknownReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordUnknownAPIRecordunknownReferencePutRequest) ReturnFields2(returnFields2 string) RecordUnknownAPIRecordunknownReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordUnknownAPIRecordunknownReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordUnknownAPIRecordunknownReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordUnknownAPIRecordunknownReferencePutRequest) Execute() (*UpdateRecordUnknownResponse, *http.Response, error) {
	return r.ApiService.RecordunknownReferencePutExecute(r)
}

/*
RecordunknownReferencePut Update a record:unknown object

Updates a specific record:unknown object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:unknown object
	@return RecordUnknownAPIRecordunknownReferencePutRequest
*/
func (a *RecordUnknownAPIService) RecordunknownReferencePut(ctx context.Context, reference string) RecordUnknownAPIRecordunknownReferencePutRequest {
	return RecordUnknownAPIRecordunknownReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordUnknownResponse
func (a *RecordUnknownAPIService) RecordunknownReferencePutExecute(r RecordUnknownAPIRecordunknownReferencePutRequest) (*UpdateRecordUnknownResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordUnknownResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordUnknownAPIService.RecordunknownReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:unknown/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordUnknown == nil {
		return localVarReturnValue, nil, internal.ReportError("recordUnknown is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordUnknown != nil {
		if r.recordUnknown.Extattrs == nil {
			r.recordUnknown.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordUnknown.Extattrs)[k]; !ok {
				(*r.recordUnknown.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordUnknown
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
