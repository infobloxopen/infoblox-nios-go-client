/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SharedrecordAAPI interface {
	/*
		SharedrecordaGet Retrieve sharedrecord:a objects

		Returns a list of sharedrecord:a objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordAAPISharedrecordaGetRequest
	*/
	SharedrecordaGet(ctx context.Context) SharedrecordAAPISharedrecordaGetRequest

	// SharedrecordaGetExecute executes the request
	//  @return ListSharedrecordAResponse
	SharedrecordaGetExecute(r SharedrecordAAPISharedrecordaGetRequest) (*ListSharedrecordAResponse, *http.Response, error)
	/*
		SharedrecordaPost Create a sharedrecord:a object

		Creates a new sharedrecord:a object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordAAPISharedrecordaPostRequest
	*/
	SharedrecordaPost(ctx context.Context) SharedrecordAAPISharedrecordaPostRequest

	// SharedrecordaPostExecute executes the request
	//  @return CreateSharedrecordAResponse
	SharedrecordaPostExecute(r SharedrecordAAPISharedrecordaPostRequest) (*CreateSharedrecordAResponse, *http.Response, error)
	/*
		SharedrecordaReferenceDelete Delete a sharedrecord:a object

		Deletes a specific sharedrecord:a object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:a object
		@return SharedrecordAAPISharedrecordaReferenceDeleteRequest
	*/
	SharedrecordaReferenceDelete(ctx context.Context, reference string) SharedrecordAAPISharedrecordaReferenceDeleteRequest

	// SharedrecordaReferenceDeleteExecute executes the request
	SharedrecordaReferenceDeleteExecute(r SharedrecordAAPISharedrecordaReferenceDeleteRequest) (*http.Response, error)
	/*
		SharedrecordaReferenceGet Get a specific sharedrecord:a object

		Returns a specific sharedrecord:a object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:a object
		@return SharedrecordAAPISharedrecordaReferenceGetRequest
	*/
	SharedrecordaReferenceGet(ctx context.Context, reference string) SharedrecordAAPISharedrecordaReferenceGetRequest

	// SharedrecordaReferenceGetExecute executes the request
	//  @return GetSharedrecordAResponse
	SharedrecordaReferenceGetExecute(r SharedrecordAAPISharedrecordaReferenceGetRequest) (*GetSharedrecordAResponse, *http.Response, error)
	/*
		SharedrecordaReferencePut Update a sharedrecord:a object

		Updates a specific sharedrecord:a object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:a object
		@return SharedrecordAAPISharedrecordaReferencePutRequest
	*/
	SharedrecordaReferencePut(ctx context.Context, reference string) SharedrecordAAPISharedrecordaReferencePutRequest

	// SharedrecordaReferencePutExecute executes the request
	//  @return UpdateSharedrecordAResponse
	SharedrecordaReferencePutExecute(r SharedrecordAAPISharedrecordaReferencePutRequest) (*UpdateSharedrecordAResponse, *http.Response, error)
}

// SharedrecordAAPIService SharedrecordAAPI service
type SharedrecordAAPIService internal.Service

type SharedrecordAAPISharedrecordaGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordAAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r SharedrecordAAPISharedrecordaGetRequest) ReturnFields(returnFields string) SharedrecordAAPISharedrecordaGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAAPISharedrecordaGetRequest) ReturnFields2(returnFields2 string) SharedrecordAAPISharedrecordaGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r SharedrecordAAPISharedrecordaGetRequest) MaxResults(maxResults int32) SharedrecordAAPISharedrecordaGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAAPISharedrecordaGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordAAPISharedrecordaGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SharedrecordAAPISharedrecordaGetRequest) Paging(paging int32) SharedrecordAAPISharedrecordaGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SharedrecordAAPISharedrecordaGetRequest) PageId(pageId string) SharedrecordAAPISharedrecordaGetRequest {
	r.pageId = &pageId
	return r
}

func (r SharedrecordAAPISharedrecordaGetRequest) Filters(filters map[string]interface{}) SharedrecordAAPISharedrecordaGetRequest {
	r.filters = &filters
	return r
}

func (r SharedrecordAAPISharedrecordaGetRequest) Extattrfilter(extattrfilter map[string]interface{}) SharedrecordAAPISharedrecordaGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SharedrecordAAPISharedrecordaGetRequest) Execute() (*ListSharedrecordAResponse, *http.Response, error) {
	return r.ApiService.SharedrecordaGetExecute(r)
}

/*
SharedrecordaGet Retrieve sharedrecord:a objects

Returns a list of sharedrecord:a objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordAAPISharedrecordaGetRequest
*/
func (a *SharedrecordAAPIService) SharedrecordaGet(ctx context.Context) SharedrecordAAPISharedrecordaGetRequest {
	return SharedrecordAAPISharedrecordaGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSharedrecordAResponse
func (a *SharedrecordAAPIService) SharedrecordaGetExecute(r SharedrecordAAPISharedrecordaGetRequest) (*ListSharedrecordAResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSharedrecordAResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.SharedrecordaGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordAAPISharedrecordaPostRequest struct {
	ctx            context.Context
	ApiService     SharedrecordAAPI
	sharedrecordA  *SharedrecordA
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r SharedrecordAAPISharedrecordaPostRequest) SharedrecordA(sharedrecordA SharedrecordA) SharedrecordAAPISharedrecordaPostRequest {
	r.sharedrecordA = &sharedrecordA
	return r
}

// Enter the field names followed by comma
func (r SharedrecordAAPISharedrecordaPostRequest) ReturnFields(returnFields string) SharedrecordAAPISharedrecordaPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAAPISharedrecordaPostRequest) ReturnFields2(returnFields2 string) SharedrecordAAPISharedrecordaPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAAPISharedrecordaPostRequest) ReturnAsObject(returnAsObject int32) SharedrecordAAPISharedrecordaPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordAAPISharedrecordaPostRequest) Execute() (*CreateSharedrecordAResponse, *http.Response, error) {
	return r.ApiService.SharedrecordaPostExecute(r)
}

/*
SharedrecordaPost Create a sharedrecord:a object

Creates a new sharedrecord:a object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordAAPISharedrecordaPostRequest
*/
func (a *SharedrecordAAPIService) SharedrecordaPost(ctx context.Context) SharedrecordAAPISharedrecordaPostRequest {
	return SharedrecordAAPISharedrecordaPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSharedrecordAResponse
func (a *SharedrecordAAPIService) SharedrecordaPostExecute(r SharedrecordAAPISharedrecordaPostRequest) (*CreateSharedrecordAResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSharedrecordAResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.SharedrecordaPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordA == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordA is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordA != nil {
		if r.sharedrecordA.Extattrs == nil {
			r.sharedrecordA.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordA.Extattrs)[k]; !ok {
				(*r.sharedrecordA.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordA
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordAAPISharedrecordaReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService SharedrecordAAPI
	reference  string
}

func (r SharedrecordAAPISharedrecordaReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SharedrecordaReferenceDeleteExecute(r)
}

/*
SharedrecordaReferenceDelete Delete a sharedrecord:a object

Deletes a specific sharedrecord:a object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:a object
	@return SharedrecordAAPISharedrecordaReferenceDeleteRequest
*/
func (a *SharedrecordAAPIService) SharedrecordaReferenceDelete(ctx context.Context, reference string) SharedrecordAAPISharedrecordaReferenceDeleteRequest {
	return SharedrecordAAPISharedrecordaReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SharedrecordAAPIService) SharedrecordaReferenceDeleteExecute(r SharedrecordAAPISharedrecordaReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.SharedrecordaReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SharedrecordAAPISharedrecordaReferenceGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordAAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r SharedrecordAAPISharedrecordaReferenceGetRequest) ReturnFields(returnFields string) SharedrecordAAPISharedrecordaReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAAPISharedrecordaReferenceGetRequest) ReturnFields2(returnFields2 string) SharedrecordAAPISharedrecordaReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAAPISharedrecordaReferenceGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordAAPISharedrecordaReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordAAPISharedrecordaReferenceGetRequest) Execute() (*GetSharedrecordAResponse, *http.Response, error) {
	return r.ApiService.SharedrecordaReferenceGetExecute(r)
}

/*
SharedrecordaReferenceGet Get a specific sharedrecord:a object

Returns a specific sharedrecord:a object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:a object
	@return SharedrecordAAPISharedrecordaReferenceGetRequest
*/
func (a *SharedrecordAAPIService) SharedrecordaReferenceGet(ctx context.Context, reference string) SharedrecordAAPISharedrecordaReferenceGetRequest {
	return SharedrecordAAPISharedrecordaReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSharedrecordAResponse
func (a *SharedrecordAAPIService) SharedrecordaReferenceGetExecute(r SharedrecordAAPISharedrecordaReferenceGetRequest) (*GetSharedrecordAResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSharedrecordAResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.SharedrecordaReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordAAPISharedrecordaReferencePutRequest struct {
	ctx            context.Context
	ApiService     SharedrecordAAPI
	reference      string
	sharedrecordA  *SharedrecordA
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r SharedrecordAAPISharedrecordaReferencePutRequest) SharedrecordA(sharedrecordA SharedrecordA) SharedrecordAAPISharedrecordaReferencePutRequest {
	r.sharedrecordA = &sharedrecordA
	return r
}

// Enter the field names followed by comma
func (r SharedrecordAAPISharedrecordaReferencePutRequest) ReturnFields(returnFields string) SharedrecordAAPISharedrecordaReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAAPISharedrecordaReferencePutRequest) ReturnFields2(returnFields2 string) SharedrecordAAPISharedrecordaReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAAPISharedrecordaReferencePutRequest) ReturnAsObject(returnAsObject int32) SharedrecordAAPISharedrecordaReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordAAPISharedrecordaReferencePutRequest) Execute() (*UpdateSharedrecordAResponse, *http.Response, error) {
	return r.ApiService.SharedrecordaReferencePutExecute(r)
}

/*
SharedrecordaReferencePut Update a sharedrecord:a object

Updates a specific sharedrecord:a object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:a object
	@return SharedrecordAAPISharedrecordaReferencePutRequest
*/
func (a *SharedrecordAAPIService) SharedrecordaReferencePut(ctx context.Context, reference string) SharedrecordAAPISharedrecordaReferencePutRequest {
	return SharedrecordAAPISharedrecordaReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSharedrecordAResponse
func (a *SharedrecordAAPIService) SharedrecordaReferencePutExecute(r SharedrecordAAPISharedrecordaReferencePutRequest) (*UpdateSharedrecordAResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSharedrecordAResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.SharedrecordaReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordA == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordA is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordA != nil {
		if r.sharedrecordA.Extattrs == nil {
			r.sharedrecordA.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordA.Extattrs)[k]; !ok {
				(*r.sharedrecordA.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordA
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
