/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SharedrecordAaaaAPI interface {
	/*
		SharedrecordaaaaGet Retrieve sharedrecord:aaaa objects

		Returns a list of sharedrecord:aaaa objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordAaaaAPISharedrecordaaaaGetRequest
	*/
	SharedrecordaaaaGet(ctx context.Context) SharedrecordAaaaAPISharedrecordaaaaGetRequest

	// SharedrecordaaaaGetExecute executes the request
	//  @return ListSharedrecordAaaaResponse
	SharedrecordaaaaGetExecute(r SharedrecordAaaaAPISharedrecordaaaaGetRequest) (*ListSharedrecordAaaaResponse, *http.Response, error)
	/*
		SharedrecordaaaaPost Create a sharedrecord:aaaa object

		Creates a new sharedrecord:aaaa object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordAaaaAPISharedrecordaaaaPostRequest
	*/
	SharedrecordaaaaPost(ctx context.Context) SharedrecordAaaaAPISharedrecordaaaaPostRequest

	// SharedrecordaaaaPostExecute executes the request
	//  @return CreateSharedrecordAaaaResponse
	SharedrecordaaaaPostExecute(r SharedrecordAaaaAPISharedrecordaaaaPostRequest) (*CreateSharedrecordAaaaResponse, *http.Response, error)
	/*
		SharedrecordaaaaReferenceDelete Delete a sharedrecord:aaaa object

		Deletes a specific sharedrecord:aaaa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:aaaa object
		@return SharedrecordAaaaAPISharedrecordaaaaReferenceDeleteRequest
	*/
	SharedrecordaaaaReferenceDelete(ctx context.Context, reference string) SharedrecordAaaaAPISharedrecordaaaaReferenceDeleteRequest

	// SharedrecordaaaaReferenceDeleteExecute executes the request
	SharedrecordaaaaReferenceDeleteExecute(r SharedrecordAaaaAPISharedrecordaaaaReferenceDeleteRequest) (*http.Response, error)
	/*
		SharedrecordaaaaReferenceGet Get a specific sharedrecord:aaaa object

		Returns a specific sharedrecord:aaaa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:aaaa object
		@return SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest
	*/
	SharedrecordaaaaReferenceGet(ctx context.Context, reference string) SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest

	// SharedrecordaaaaReferenceGetExecute executes the request
	//  @return GetSharedrecordAaaaResponse
	SharedrecordaaaaReferenceGetExecute(r SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest) (*GetSharedrecordAaaaResponse, *http.Response, error)
	/*
		SharedrecordaaaaReferencePut Update a sharedrecord:aaaa object

		Updates a specific sharedrecord:aaaa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:aaaa object
		@return SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest
	*/
	SharedrecordaaaaReferencePut(ctx context.Context, reference string) SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest

	// SharedrecordaaaaReferencePutExecute executes the request
	//  @return UpdateSharedrecordAaaaResponse
	SharedrecordaaaaReferencePutExecute(r SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest) (*UpdateSharedrecordAaaaResponse, *http.Response, error)
}

// SharedrecordAaaaAPIService SharedrecordAaaaAPI service
type SharedrecordAaaaAPIService internal.Service

type SharedrecordAaaaAPISharedrecordaaaaGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordAaaaAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r SharedrecordAaaaAPISharedrecordaaaaGetRequest) ReturnFields(returnFields string) SharedrecordAaaaAPISharedrecordaaaaGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAaaaAPISharedrecordaaaaGetRequest) ReturnFields2(returnFields2 string) SharedrecordAaaaAPISharedrecordaaaaGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r SharedrecordAaaaAPISharedrecordaaaaGetRequest) MaxResults(maxResults int32) SharedrecordAaaaAPISharedrecordaaaaGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAaaaAPISharedrecordaaaaGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordAaaaAPISharedrecordaaaaGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SharedrecordAaaaAPISharedrecordaaaaGetRequest) Paging(paging int32) SharedrecordAaaaAPISharedrecordaaaaGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SharedrecordAaaaAPISharedrecordaaaaGetRequest) PageId(pageId string) SharedrecordAaaaAPISharedrecordaaaaGetRequest {
	r.pageId = &pageId
	return r
}

func (r SharedrecordAaaaAPISharedrecordaaaaGetRequest) Filters(filters map[string]interface{}) SharedrecordAaaaAPISharedrecordaaaaGetRequest {
	r.filters = &filters
	return r
}

func (r SharedrecordAaaaAPISharedrecordaaaaGetRequest) Extattrfilter(extattrfilter map[string]interface{}) SharedrecordAaaaAPISharedrecordaaaaGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SharedrecordAaaaAPISharedrecordaaaaGetRequest) Execute() (*ListSharedrecordAaaaResponse, *http.Response, error) {
	return r.ApiService.SharedrecordaaaaGetExecute(r)
}

/*
SharedrecordaaaaGet Retrieve sharedrecord:aaaa objects

Returns a list of sharedrecord:aaaa objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordAaaaAPISharedrecordaaaaGetRequest
*/
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaGet(ctx context.Context) SharedrecordAaaaAPISharedrecordaaaaGetRequest {
	return SharedrecordAaaaAPISharedrecordaaaaGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSharedrecordAaaaResponse
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaGetExecute(r SharedrecordAaaaAPISharedrecordaaaaGetRequest) (*ListSharedrecordAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSharedrecordAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAaaaAPIService.SharedrecordaaaaGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:aaaa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordAaaaAPISharedrecordaaaaPostRequest struct {
	ctx              context.Context
	ApiService       SharedrecordAaaaAPI
	sharedrecordAaaa *SharedrecordAaaa
	returnFields     *string
	returnFields2    *string
	returnAsObject   *int32
}

// Object data to create
func (r SharedrecordAaaaAPISharedrecordaaaaPostRequest) SharedrecordAaaa(sharedrecordAaaa SharedrecordAaaa) SharedrecordAaaaAPISharedrecordaaaaPostRequest {
	r.sharedrecordAaaa = &sharedrecordAaaa
	return r
}

// Enter the field names followed by comma
func (r SharedrecordAaaaAPISharedrecordaaaaPostRequest) ReturnFields(returnFields string) SharedrecordAaaaAPISharedrecordaaaaPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAaaaAPISharedrecordaaaaPostRequest) ReturnFields2(returnFields2 string) SharedrecordAaaaAPISharedrecordaaaaPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAaaaAPISharedrecordaaaaPostRequest) ReturnAsObject(returnAsObject int32) SharedrecordAaaaAPISharedrecordaaaaPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordAaaaAPISharedrecordaaaaPostRequest) Execute() (*CreateSharedrecordAaaaResponse, *http.Response, error) {
	return r.ApiService.SharedrecordaaaaPostExecute(r)
}

/*
SharedrecordaaaaPost Create a sharedrecord:aaaa object

Creates a new sharedrecord:aaaa object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordAaaaAPISharedrecordaaaaPostRequest
*/
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaPost(ctx context.Context) SharedrecordAaaaAPISharedrecordaaaaPostRequest {
	return SharedrecordAaaaAPISharedrecordaaaaPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSharedrecordAaaaResponse
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaPostExecute(r SharedrecordAaaaAPISharedrecordaaaaPostRequest) (*CreateSharedrecordAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSharedrecordAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAaaaAPIService.SharedrecordaaaaPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:aaaa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordAaaa == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordAaaa is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordAaaa != nil {
		if r.sharedrecordAaaa.Extattrs == nil {
			r.sharedrecordAaaa.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordAaaa.Extattrs)[k]; !ok {
				(*r.sharedrecordAaaa.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordAaaa
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordAaaaAPISharedrecordaaaaReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService SharedrecordAaaaAPI
	reference  string
}

func (r SharedrecordAaaaAPISharedrecordaaaaReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SharedrecordaaaaReferenceDeleteExecute(r)
}

/*
SharedrecordaaaaReferenceDelete Delete a sharedrecord:aaaa object

Deletes a specific sharedrecord:aaaa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:aaaa object
	@return SharedrecordAaaaAPISharedrecordaaaaReferenceDeleteRequest
*/
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaReferenceDelete(ctx context.Context, reference string) SharedrecordAaaaAPISharedrecordaaaaReferenceDeleteRequest {
	return SharedrecordAaaaAPISharedrecordaaaaReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaReferenceDeleteExecute(r SharedrecordAaaaAPISharedrecordaaaaReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAaaaAPIService.SharedrecordaaaaReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:aaaa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordAaaaAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest) ReturnFields(returnFields string) SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest) ReturnFields2(returnFields2 string) SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest) Execute() (*GetSharedrecordAaaaResponse, *http.Response, error) {
	return r.ApiService.SharedrecordaaaaReferenceGetExecute(r)
}

/*
SharedrecordaaaaReferenceGet Get a specific sharedrecord:aaaa object

Returns a specific sharedrecord:aaaa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:aaaa object
	@return SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest
*/
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaReferenceGet(ctx context.Context, reference string) SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest {
	return SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSharedrecordAaaaResponse
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaReferenceGetExecute(r SharedrecordAaaaAPISharedrecordaaaaReferenceGetRequest) (*GetSharedrecordAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSharedrecordAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAaaaAPIService.SharedrecordaaaaReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:aaaa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest struct {
	ctx              context.Context
	ApiService       SharedrecordAaaaAPI
	reference        string
	sharedrecordAaaa *SharedrecordAaaa
	returnFields     *string
	returnFields2    *string
	returnAsObject   *int32
}

// Object data to update
func (r SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest) SharedrecordAaaa(sharedrecordAaaa SharedrecordAaaa) SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest {
	r.sharedrecordAaaa = &sharedrecordAaaa
	return r
}

// Enter the field names followed by comma
func (r SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest) ReturnFields(returnFields string) SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest) ReturnFields2(returnFields2 string) SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest) ReturnAsObject(returnAsObject int32) SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest) Execute() (*UpdateSharedrecordAaaaResponse, *http.Response, error) {
	return r.ApiService.SharedrecordaaaaReferencePutExecute(r)
}

/*
SharedrecordaaaaReferencePut Update a sharedrecord:aaaa object

Updates a specific sharedrecord:aaaa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:aaaa object
	@return SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest
*/
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaReferencePut(ctx context.Context, reference string) SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest {
	return SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSharedrecordAaaaResponse
func (a *SharedrecordAaaaAPIService) SharedrecordaaaaReferencePutExecute(r SharedrecordAaaaAPISharedrecordaaaaReferencePutRequest) (*UpdateSharedrecordAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSharedrecordAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAaaaAPIService.SharedrecordaaaaReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:aaaa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordAaaa == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordAaaa is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordAaaa != nil {
		if r.sharedrecordAaaa.Extattrs == nil {
			r.sharedrecordAaaa.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordAaaa.Extattrs)[k]; !ok {
				(*r.sharedrecordAaaa.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordAaaa
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
