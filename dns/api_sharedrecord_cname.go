/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SharedrecordCnameAPI interface {
	/*
		SharedrecordcnameGet Retrieve sharedrecord:cname objects

		Returns a list of sharedrecord:cname objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordCnameAPISharedrecordcnameGetRequest
	*/
	SharedrecordcnameGet(ctx context.Context) SharedrecordCnameAPISharedrecordcnameGetRequest

	// SharedrecordcnameGetExecute executes the request
	//  @return ListSharedrecordCnameResponse
	SharedrecordcnameGetExecute(r SharedrecordCnameAPISharedrecordcnameGetRequest) (*ListSharedrecordCnameResponse, *http.Response, error)
	/*
		SharedrecordcnamePost Create a sharedrecord:cname object

		Creates a new sharedrecord:cname object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordCnameAPISharedrecordcnamePostRequest
	*/
	SharedrecordcnamePost(ctx context.Context) SharedrecordCnameAPISharedrecordcnamePostRequest

	// SharedrecordcnamePostExecute executes the request
	//  @return CreateSharedrecordCnameResponse
	SharedrecordcnamePostExecute(r SharedrecordCnameAPISharedrecordcnamePostRequest) (*CreateSharedrecordCnameResponse, *http.Response, error)
	/*
		SharedrecordcnameReferenceDelete Delete a sharedrecord:cname object

		Deletes a specific sharedrecord:cname object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:cname object
		@return SharedrecordCnameAPISharedrecordcnameReferenceDeleteRequest
	*/
	SharedrecordcnameReferenceDelete(ctx context.Context, reference string) SharedrecordCnameAPISharedrecordcnameReferenceDeleteRequest

	// SharedrecordcnameReferenceDeleteExecute executes the request
	SharedrecordcnameReferenceDeleteExecute(r SharedrecordCnameAPISharedrecordcnameReferenceDeleteRequest) (*http.Response, error)
	/*
		SharedrecordcnameReferenceGet Get a specific sharedrecord:cname object

		Returns a specific sharedrecord:cname object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:cname object
		@return SharedrecordCnameAPISharedrecordcnameReferenceGetRequest
	*/
	SharedrecordcnameReferenceGet(ctx context.Context, reference string) SharedrecordCnameAPISharedrecordcnameReferenceGetRequest

	// SharedrecordcnameReferenceGetExecute executes the request
	//  @return GetSharedrecordCnameResponse
	SharedrecordcnameReferenceGetExecute(r SharedrecordCnameAPISharedrecordcnameReferenceGetRequest) (*GetSharedrecordCnameResponse, *http.Response, error)
	/*
		SharedrecordcnameReferencePut Update a sharedrecord:cname object

		Updates a specific sharedrecord:cname object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:cname object
		@return SharedrecordCnameAPISharedrecordcnameReferencePutRequest
	*/
	SharedrecordcnameReferencePut(ctx context.Context, reference string) SharedrecordCnameAPISharedrecordcnameReferencePutRequest

	// SharedrecordcnameReferencePutExecute executes the request
	//  @return UpdateSharedrecordCnameResponse
	SharedrecordcnameReferencePutExecute(r SharedrecordCnameAPISharedrecordcnameReferencePutRequest) (*UpdateSharedrecordCnameResponse, *http.Response, error)
}

// SharedrecordCnameAPIService SharedrecordCnameAPI service
type SharedrecordCnameAPIService internal.Service

type SharedrecordCnameAPISharedrecordcnameGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordCnameAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r SharedrecordCnameAPISharedrecordcnameGetRequest) ReturnFields(returnFields string) SharedrecordCnameAPISharedrecordcnameGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordCnameAPISharedrecordcnameGetRequest) ReturnFields2(returnFields2 string) SharedrecordCnameAPISharedrecordcnameGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r SharedrecordCnameAPISharedrecordcnameGetRequest) MaxResults(maxResults int32) SharedrecordCnameAPISharedrecordcnameGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordCnameAPISharedrecordcnameGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordCnameAPISharedrecordcnameGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SharedrecordCnameAPISharedrecordcnameGetRequest) Paging(paging int32) SharedrecordCnameAPISharedrecordcnameGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SharedrecordCnameAPISharedrecordcnameGetRequest) PageId(pageId string) SharedrecordCnameAPISharedrecordcnameGetRequest {
	r.pageId = &pageId
	return r
}

func (r SharedrecordCnameAPISharedrecordcnameGetRequest) Filters(filters map[string]interface{}) SharedrecordCnameAPISharedrecordcnameGetRequest {
	r.filters = &filters
	return r
}

func (r SharedrecordCnameAPISharedrecordcnameGetRequest) Extattrfilter(extattrfilter map[string]interface{}) SharedrecordCnameAPISharedrecordcnameGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SharedrecordCnameAPISharedrecordcnameGetRequest) Execute() (*ListSharedrecordCnameResponse, *http.Response, error) {
	return r.ApiService.SharedrecordcnameGetExecute(r)
}

/*
SharedrecordcnameGet Retrieve sharedrecord:cname objects

Returns a list of sharedrecord:cname objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordCnameAPISharedrecordcnameGetRequest
*/
func (a *SharedrecordCnameAPIService) SharedrecordcnameGet(ctx context.Context) SharedrecordCnameAPISharedrecordcnameGetRequest {
	return SharedrecordCnameAPISharedrecordcnameGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSharedrecordCnameResponse
func (a *SharedrecordCnameAPIService) SharedrecordcnameGetExecute(r SharedrecordCnameAPISharedrecordcnameGetRequest) (*ListSharedrecordCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSharedrecordCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordCnameAPIService.SharedrecordcnameGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:cname"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordCnameAPISharedrecordcnamePostRequest struct {
	ctx               context.Context
	ApiService        SharedrecordCnameAPI
	sharedrecordCname *SharedrecordCname
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to create
func (r SharedrecordCnameAPISharedrecordcnamePostRequest) SharedrecordCname(sharedrecordCname SharedrecordCname) SharedrecordCnameAPISharedrecordcnamePostRequest {
	r.sharedrecordCname = &sharedrecordCname
	return r
}

// Enter the field names followed by comma
func (r SharedrecordCnameAPISharedrecordcnamePostRequest) ReturnFields(returnFields string) SharedrecordCnameAPISharedrecordcnamePostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordCnameAPISharedrecordcnamePostRequest) ReturnFields2(returnFields2 string) SharedrecordCnameAPISharedrecordcnamePostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordCnameAPISharedrecordcnamePostRequest) ReturnAsObject(returnAsObject int32) SharedrecordCnameAPISharedrecordcnamePostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordCnameAPISharedrecordcnamePostRequest) Execute() (*CreateSharedrecordCnameResponse, *http.Response, error) {
	return r.ApiService.SharedrecordcnamePostExecute(r)
}

/*
SharedrecordcnamePost Create a sharedrecord:cname object

Creates a new sharedrecord:cname object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordCnameAPISharedrecordcnamePostRequest
*/
func (a *SharedrecordCnameAPIService) SharedrecordcnamePost(ctx context.Context) SharedrecordCnameAPISharedrecordcnamePostRequest {
	return SharedrecordCnameAPISharedrecordcnamePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSharedrecordCnameResponse
func (a *SharedrecordCnameAPIService) SharedrecordcnamePostExecute(r SharedrecordCnameAPISharedrecordcnamePostRequest) (*CreateSharedrecordCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSharedrecordCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordCnameAPIService.SharedrecordcnamePost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:cname"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordCname == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordCname is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordCname != nil {
		if r.sharedrecordCname.Extattrs == nil {
			r.sharedrecordCname.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordCname.Extattrs)[k]; !ok {
				(*r.sharedrecordCname.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordCname
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordCnameAPISharedrecordcnameReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService SharedrecordCnameAPI
	reference  string
}

func (r SharedrecordCnameAPISharedrecordcnameReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SharedrecordcnameReferenceDeleteExecute(r)
}

/*
SharedrecordcnameReferenceDelete Delete a sharedrecord:cname object

Deletes a specific sharedrecord:cname object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:cname object
	@return SharedrecordCnameAPISharedrecordcnameReferenceDeleteRequest
*/
func (a *SharedrecordCnameAPIService) SharedrecordcnameReferenceDelete(ctx context.Context, reference string) SharedrecordCnameAPISharedrecordcnameReferenceDeleteRequest {
	return SharedrecordCnameAPISharedrecordcnameReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SharedrecordCnameAPIService) SharedrecordcnameReferenceDeleteExecute(r SharedrecordCnameAPISharedrecordcnameReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordCnameAPIService.SharedrecordcnameReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:cname/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SharedrecordCnameAPISharedrecordcnameReferenceGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordCnameAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r SharedrecordCnameAPISharedrecordcnameReferenceGetRequest) ReturnFields(returnFields string) SharedrecordCnameAPISharedrecordcnameReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordCnameAPISharedrecordcnameReferenceGetRequest) ReturnFields2(returnFields2 string) SharedrecordCnameAPISharedrecordcnameReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordCnameAPISharedrecordcnameReferenceGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordCnameAPISharedrecordcnameReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordCnameAPISharedrecordcnameReferenceGetRequest) Execute() (*GetSharedrecordCnameResponse, *http.Response, error) {
	return r.ApiService.SharedrecordcnameReferenceGetExecute(r)
}

/*
SharedrecordcnameReferenceGet Get a specific sharedrecord:cname object

Returns a specific sharedrecord:cname object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:cname object
	@return SharedrecordCnameAPISharedrecordcnameReferenceGetRequest
*/
func (a *SharedrecordCnameAPIService) SharedrecordcnameReferenceGet(ctx context.Context, reference string) SharedrecordCnameAPISharedrecordcnameReferenceGetRequest {
	return SharedrecordCnameAPISharedrecordcnameReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSharedrecordCnameResponse
func (a *SharedrecordCnameAPIService) SharedrecordcnameReferenceGetExecute(r SharedrecordCnameAPISharedrecordcnameReferenceGetRequest) (*GetSharedrecordCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSharedrecordCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordCnameAPIService.SharedrecordcnameReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:cname/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordCnameAPISharedrecordcnameReferencePutRequest struct {
	ctx               context.Context
	ApiService        SharedrecordCnameAPI
	reference         string
	sharedrecordCname *SharedrecordCname
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to update
func (r SharedrecordCnameAPISharedrecordcnameReferencePutRequest) SharedrecordCname(sharedrecordCname SharedrecordCname) SharedrecordCnameAPISharedrecordcnameReferencePutRequest {
	r.sharedrecordCname = &sharedrecordCname
	return r
}

// Enter the field names followed by comma
func (r SharedrecordCnameAPISharedrecordcnameReferencePutRequest) ReturnFields(returnFields string) SharedrecordCnameAPISharedrecordcnameReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordCnameAPISharedrecordcnameReferencePutRequest) ReturnFields2(returnFields2 string) SharedrecordCnameAPISharedrecordcnameReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordCnameAPISharedrecordcnameReferencePutRequest) ReturnAsObject(returnAsObject int32) SharedrecordCnameAPISharedrecordcnameReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordCnameAPISharedrecordcnameReferencePutRequest) Execute() (*UpdateSharedrecordCnameResponse, *http.Response, error) {
	return r.ApiService.SharedrecordcnameReferencePutExecute(r)
}

/*
SharedrecordcnameReferencePut Update a sharedrecord:cname object

Updates a specific sharedrecord:cname object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:cname object
	@return SharedrecordCnameAPISharedrecordcnameReferencePutRequest
*/
func (a *SharedrecordCnameAPIService) SharedrecordcnameReferencePut(ctx context.Context, reference string) SharedrecordCnameAPISharedrecordcnameReferencePutRequest {
	return SharedrecordCnameAPISharedrecordcnameReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSharedrecordCnameResponse
func (a *SharedrecordCnameAPIService) SharedrecordcnameReferencePutExecute(r SharedrecordCnameAPISharedrecordcnameReferencePutRequest) (*UpdateSharedrecordCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSharedrecordCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordCnameAPIService.SharedrecordcnameReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:cname/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordCname == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordCname is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordCname != nil {
		if r.sharedrecordCname.Extattrs == nil {
			r.sharedrecordCname.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordCname.Extattrs)[k]; !ok {
				(*r.sharedrecordCname.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordCname
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
