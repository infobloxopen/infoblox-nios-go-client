/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SharedrecordMxAPI interface {
	/*
		SharedrecordmxGet Retrieve sharedrecord:mx objects

		Returns a list of sharedrecord:mx objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordMxAPISharedrecordmxGetRequest
	*/
	SharedrecordmxGet(ctx context.Context) SharedrecordMxAPISharedrecordmxGetRequest

	// SharedrecordmxGetExecute executes the request
	//  @return ListSharedrecordMxResponse
	SharedrecordmxGetExecute(r SharedrecordMxAPISharedrecordmxGetRequest) (*ListSharedrecordMxResponse, *http.Response, error)
	/*
		SharedrecordmxPost Create a sharedrecord:mx object

		Creates a new sharedrecord:mx object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordMxAPISharedrecordmxPostRequest
	*/
	SharedrecordmxPost(ctx context.Context) SharedrecordMxAPISharedrecordmxPostRequest

	// SharedrecordmxPostExecute executes the request
	//  @return CreateSharedrecordMxResponse
	SharedrecordmxPostExecute(r SharedrecordMxAPISharedrecordmxPostRequest) (*CreateSharedrecordMxResponse, *http.Response, error)
	/*
		SharedrecordmxReferenceDelete Delete a sharedrecord:mx object

		Deletes a specific sharedrecord:mx object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:mx object
		@return SharedrecordMxAPISharedrecordmxReferenceDeleteRequest
	*/
	SharedrecordmxReferenceDelete(ctx context.Context, reference string) SharedrecordMxAPISharedrecordmxReferenceDeleteRequest

	// SharedrecordmxReferenceDeleteExecute executes the request
	SharedrecordmxReferenceDeleteExecute(r SharedrecordMxAPISharedrecordmxReferenceDeleteRequest) (*http.Response, error)
	/*
		SharedrecordmxReferenceGet Get a specific sharedrecord:mx object

		Returns a specific sharedrecord:mx object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:mx object
		@return SharedrecordMxAPISharedrecordmxReferenceGetRequest
	*/
	SharedrecordmxReferenceGet(ctx context.Context, reference string) SharedrecordMxAPISharedrecordmxReferenceGetRequest

	// SharedrecordmxReferenceGetExecute executes the request
	//  @return GetSharedrecordMxResponse
	SharedrecordmxReferenceGetExecute(r SharedrecordMxAPISharedrecordmxReferenceGetRequest) (*GetSharedrecordMxResponse, *http.Response, error)
	/*
		SharedrecordmxReferencePut Update a sharedrecord:mx object

		Updates a specific sharedrecord:mx object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:mx object
		@return SharedrecordMxAPISharedrecordmxReferencePutRequest
	*/
	SharedrecordmxReferencePut(ctx context.Context, reference string) SharedrecordMxAPISharedrecordmxReferencePutRequest

	// SharedrecordmxReferencePutExecute executes the request
	//  @return UpdateSharedrecordMxResponse
	SharedrecordmxReferencePutExecute(r SharedrecordMxAPISharedrecordmxReferencePutRequest) (*UpdateSharedrecordMxResponse, *http.Response, error)
}

// SharedrecordMxAPIService SharedrecordMxAPI service
type SharedrecordMxAPIService internal.Service

type SharedrecordMxAPISharedrecordmxGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordMxAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r SharedrecordMxAPISharedrecordmxGetRequest) ReturnFields(returnFields string) SharedrecordMxAPISharedrecordmxGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordMxAPISharedrecordmxGetRequest) ReturnFields2(returnFields2 string) SharedrecordMxAPISharedrecordmxGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r SharedrecordMxAPISharedrecordmxGetRequest) MaxResults(maxResults int32) SharedrecordMxAPISharedrecordmxGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordMxAPISharedrecordmxGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordMxAPISharedrecordmxGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SharedrecordMxAPISharedrecordmxGetRequest) Paging(paging int32) SharedrecordMxAPISharedrecordmxGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SharedrecordMxAPISharedrecordmxGetRequest) PageId(pageId string) SharedrecordMxAPISharedrecordmxGetRequest {
	r.pageId = &pageId
	return r
}

func (r SharedrecordMxAPISharedrecordmxGetRequest) Filters(filters map[string]interface{}) SharedrecordMxAPISharedrecordmxGetRequest {
	r.filters = &filters
	return r
}

func (r SharedrecordMxAPISharedrecordmxGetRequest) Extattrfilter(extattrfilter map[string]interface{}) SharedrecordMxAPISharedrecordmxGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SharedrecordMxAPISharedrecordmxGetRequest) Execute() (*ListSharedrecordMxResponse, *http.Response, error) {
	return r.ApiService.SharedrecordmxGetExecute(r)
}

/*
SharedrecordmxGet Retrieve sharedrecord:mx objects

Returns a list of sharedrecord:mx objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordMxAPISharedrecordmxGetRequest
*/
func (a *SharedrecordMxAPIService) SharedrecordmxGet(ctx context.Context) SharedrecordMxAPISharedrecordmxGetRequest {
	return SharedrecordMxAPISharedrecordmxGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSharedrecordMxResponse
func (a *SharedrecordMxAPIService) SharedrecordmxGetExecute(r SharedrecordMxAPISharedrecordmxGetRequest) (*ListSharedrecordMxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSharedrecordMxResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordMxAPIService.SharedrecordmxGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:mx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordMxAPISharedrecordmxPostRequest struct {
	ctx            context.Context
	ApiService     SharedrecordMxAPI
	sharedrecordMx *SharedrecordMx
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r SharedrecordMxAPISharedrecordmxPostRequest) SharedrecordMx(sharedrecordMx SharedrecordMx) SharedrecordMxAPISharedrecordmxPostRequest {
	r.sharedrecordMx = &sharedrecordMx
	return r
}

// Enter the field names followed by comma
func (r SharedrecordMxAPISharedrecordmxPostRequest) ReturnFields(returnFields string) SharedrecordMxAPISharedrecordmxPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordMxAPISharedrecordmxPostRequest) ReturnFields2(returnFields2 string) SharedrecordMxAPISharedrecordmxPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordMxAPISharedrecordmxPostRequest) ReturnAsObject(returnAsObject int32) SharedrecordMxAPISharedrecordmxPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordMxAPISharedrecordmxPostRequest) Execute() (*CreateSharedrecordMxResponse, *http.Response, error) {
	return r.ApiService.SharedrecordmxPostExecute(r)
}

/*
SharedrecordmxPost Create a sharedrecord:mx object

Creates a new sharedrecord:mx object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordMxAPISharedrecordmxPostRequest
*/
func (a *SharedrecordMxAPIService) SharedrecordmxPost(ctx context.Context) SharedrecordMxAPISharedrecordmxPostRequest {
	return SharedrecordMxAPISharedrecordmxPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSharedrecordMxResponse
func (a *SharedrecordMxAPIService) SharedrecordmxPostExecute(r SharedrecordMxAPISharedrecordmxPostRequest) (*CreateSharedrecordMxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSharedrecordMxResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordMxAPIService.SharedrecordmxPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:mx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordMx == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordMx is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordMx != nil {
		if r.sharedrecordMx.Extattrs == nil {
			r.sharedrecordMx.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordMx.Extattrs)[k]; !ok {
				(*r.sharedrecordMx.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordMx
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordMxAPISharedrecordmxReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService SharedrecordMxAPI
	reference  string
}

func (r SharedrecordMxAPISharedrecordmxReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SharedrecordmxReferenceDeleteExecute(r)
}

/*
SharedrecordmxReferenceDelete Delete a sharedrecord:mx object

Deletes a specific sharedrecord:mx object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:mx object
	@return SharedrecordMxAPISharedrecordmxReferenceDeleteRequest
*/
func (a *SharedrecordMxAPIService) SharedrecordmxReferenceDelete(ctx context.Context, reference string) SharedrecordMxAPISharedrecordmxReferenceDeleteRequest {
	return SharedrecordMxAPISharedrecordmxReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SharedrecordMxAPIService) SharedrecordmxReferenceDeleteExecute(r SharedrecordMxAPISharedrecordmxReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordMxAPIService.SharedrecordmxReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:mx/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SharedrecordMxAPISharedrecordmxReferenceGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordMxAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r SharedrecordMxAPISharedrecordmxReferenceGetRequest) ReturnFields(returnFields string) SharedrecordMxAPISharedrecordmxReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordMxAPISharedrecordmxReferenceGetRequest) ReturnFields2(returnFields2 string) SharedrecordMxAPISharedrecordmxReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordMxAPISharedrecordmxReferenceGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordMxAPISharedrecordmxReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordMxAPISharedrecordmxReferenceGetRequest) Execute() (*GetSharedrecordMxResponse, *http.Response, error) {
	return r.ApiService.SharedrecordmxReferenceGetExecute(r)
}

/*
SharedrecordmxReferenceGet Get a specific sharedrecord:mx object

Returns a specific sharedrecord:mx object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:mx object
	@return SharedrecordMxAPISharedrecordmxReferenceGetRequest
*/
func (a *SharedrecordMxAPIService) SharedrecordmxReferenceGet(ctx context.Context, reference string) SharedrecordMxAPISharedrecordmxReferenceGetRequest {
	return SharedrecordMxAPISharedrecordmxReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSharedrecordMxResponse
func (a *SharedrecordMxAPIService) SharedrecordmxReferenceGetExecute(r SharedrecordMxAPISharedrecordmxReferenceGetRequest) (*GetSharedrecordMxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSharedrecordMxResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordMxAPIService.SharedrecordmxReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:mx/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordMxAPISharedrecordmxReferencePutRequest struct {
	ctx            context.Context
	ApiService     SharedrecordMxAPI
	reference      string
	sharedrecordMx *SharedrecordMx
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r SharedrecordMxAPISharedrecordmxReferencePutRequest) SharedrecordMx(sharedrecordMx SharedrecordMx) SharedrecordMxAPISharedrecordmxReferencePutRequest {
	r.sharedrecordMx = &sharedrecordMx
	return r
}

// Enter the field names followed by comma
func (r SharedrecordMxAPISharedrecordmxReferencePutRequest) ReturnFields(returnFields string) SharedrecordMxAPISharedrecordmxReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordMxAPISharedrecordmxReferencePutRequest) ReturnFields2(returnFields2 string) SharedrecordMxAPISharedrecordmxReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordMxAPISharedrecordmxReferencePutRequest) ReturnAsObject(returnAsObject int32) SharedrecordMxAPISharedrecordmxReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordMxAPISharedrecordmxReferencePutRequest) Execute() (*UpdateSharedrecordMxResponse, *http.Response, error) {
	return r.ApiService.SharedrecordmxReferencePutExecute(r)
}

/*
SharedrecordmxReferencePut Update a sharedrecord:mx object

Updates a specific sharedrecord:mx object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:mx object
	@return SharedrecordMxAPISharedrecordmxReferencePutRequest
*/
func (a *SharedrecordMxAPIService) SharedrecordmxReferencePut(ctx context.Context, reference string) SharedrecordMxAPISharedrecordmxReferencePutRequest {
	return SharedrecordMxAPISharedrecordmxReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSharedrecordMxResponse
func (a *SharedrecordMxAPIService) SharedrecordmxReferencePutExecute(r SharedrecordMxAPISharedrecordmxReferencePutRequest) (*UpdateSharedrecordMxResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSharedrecordMxResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordMxAPIService.SharedrecordmxReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:mx/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordMx == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordMx is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordMx != nil {
		if r.sharedrecordMx.Extattrs == nil {
			r.sharedrecordMx.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordMx.Extattrs)[k]; !ok {
				(*r.sharedrecordMx.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordMx
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
