/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SharedrecordSrvAPI interface {
	/*
		SharedrecordsrvGet Retrieve sharedrecord:srv objects

		Returns a list of sharedrecord:srv objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordSrvAPISharedrecordsrvGetRequest
	*/
	SharedrecordsrvGet(ctx context.Context) SharedrecordSrvAPISharedrecordsrvGetRequest

	// SharedrecordsrvGetExecute executes the request
	//  @return ListSharedrecordSrvResponse
	SharedrecordsrvGetExecute(r SharedrecordSrvAPISharedrecordsrvGetRequest) (*ListSharedrecordSrvResponse, *http.Response, error)
	/*
		SharedrecordsrvPost Create a sharedrecord:srv object

		Creates a new sharedrecord:srv object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordSrvAPISharedrecordsrvPostRequest
	*/
	SharedrecordsrvPost(ctx context.Context) SharedrecordSrvAPISharedrecordsrvPostRequest

	// SharedrecordsrvPostExecute executes the request
	//  @return CreateSharedrecordSrvResponse
	SharedrecordsrvPostExecute(r SharedrecordSrvAPISharedrecordsrvPostRequest) (*CreateSharedrecordSrvResponse, *http.Response, error)
	/*
		SharedrecordsrvReferenceDelete Delete a sharedrecord:srv object

		Deletes a specific sharedrecord:srv object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:srv object
		@return SharedrecordSrvAPISharedrecordsrvReferenceDeleteRequest
	*/
	SharedrecordsrvReferenceDelete(ctx context.Context, reference string) SharedrecordSrvAPISharedrecordsrvReferenceDeleteRequest

	// SharedrecordsrvReferenceDeleteExecute executes the request
	SharedrecordsrvReferenceDeleteExecute(r SharedrecordSrvAPISharedrecordsrvReferenceDeleteRequest) (*http.Response, error)
	/*
		SharedrecordsrvReferenceGet Get a specific sharedrecord:srv object

		Returns a specific sharedrecord:srv object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:srv object
		@return SharedrecordSrvAPISharedrecordsrvReferenceGetRequest
	*/
	SharedrecordsrvReferenceGet(ctx context.Context, reference string) SharedrecordSrvAPISharedrecordsrvReferenceGetRequest

	// SharedrecordsrvReferenceGetExecute executes the request
	//  @return GetSharedrecordSrvResponse
	SharedrecordsrvReferenceGetExecute(r SharedrecordSrvAPISharedrecordsrvReferenceGetRequest) (*GetSharedrecordSrvResponse, *http.Response, error)
	/*
		SharedrecordsrvReferencePut Update a sharedrecord:srv object

		Updates a specific sharedrecord:srv object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:srv object
		@return SharedrecordSrvAPISharedrecordsrvReferencePutRequest
	*/
	SharedrecordsrvReferencePut(ctx context.Context, reference string) SharedrecordSrvAPISharedrecordsrvReferencePutRequest

	// SharedrecordsrvReferencePutExecute executes the request
	//  @return UpdateSharedrecordSrvResponse
	SharedrecordsrvReferencePutExecute(r SharedrecordSrvAPISharedrecordsrvReferencePutRequest) (*UpdateSharedrecordSrvResponse, *http.Response, error)
}

// SharedrecordSrvAPIService SharedrecordSrvAPI service
type SharedrecordSrvAPIService internal.Service

type SharedrecordSrvAPISharedrecordsrvGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordSrvAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r SharedrecordSrvAPISharedrecordsrvGetRequest) ReturnFields(returnFields string) SharedrecordSrvAPISharedrecordsrvGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordSrvAPISharedrecordsrvGetRequest) ReturnFields2(returnFields2 string) SharedrecordSrvAPISharedrecordsrvGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r SharedrecordSrvAPISharedrecordsrvGetRequest) MaxResults(maxResults int32) SharedrecordSrvAPISharedrecordsrvGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordSrvAPISharedrecordsrvGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordSrvAPISharedrecordsrvGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SharedrecordSrvAPISharedrecordsrvGetRequest) Paging(paging int32) SharedrecordSrvAPISharedrecordsrvGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SharedrecordSrvAPISharedrecordsrvGetRequest) PageId(pageId string) SharedrecordSrvAPISharedrecordsrvGetRequest {
	r.pageId = &pageId
	return r
}

func (r SharedrecordSrvAPISharedrecordsrvGetRequest) Filters(filters map[string]interface{}) SharedrecordSrvAPISharedrecordsrvGetRequest {
	r.filters = &filters
	return r
}

func (r SharedrecordSrvAPISharedrecordsrvGetRequest) Extattrfilter(extattrfilter map[string]interface{}) SharedrecordSrvAPISharedrecordsrvGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SharedrecordSrvAPISharedrecordsrvGetRequest) Execute() (*ListSharedrecordSrvResponse, *http.Response, error) {
	return r.ApiService.SharedrecordsrvGetExecute(r)
}

/*
SharedrecordsrvGet Retrieve sharedrecord:srv objects

Returns a list of sharedrecord:srv objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordSrvAPISharedrecordsrvGetRequest
*/
func (a *SharedrecordSrvAPIService) SharedrecordsrvGet(ctx context.Context) SharedrecordSrvAPISharedrecordsrvGetRequest {
	return SharedrecordSrvAPISharedrecordsrvGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSharedrecordSrvResponse
func (a *SharedrecordSrvAPIService) SharedrecordsrvGetExecute(r SharedrecordSrvAPISharedrecordsrvGetRequest) (*ListSharedrecordSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSharedrecordSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordSrvAPIService.SharedrecordsrvGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:srv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordSrvAPISharedrecordsrvPostRequest struct {
	ctx             context.Context
	ApiService      SharedrecordSrvAPI
	sharedrecordSrv *SharedrecordSrv
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to create
func (r SharedrecordSrvAPISharedrecordsrvPostRequest) SharedrecordSrv(sharedrecordSrv SharedrecordSrv) SharedrecordSrvAPISharedrecordsrvPostRequest {
	r.sharedrecordSrv = &sharedrecordSrv
	return r
}

// Enter the field names followed by comma
func (r SharedrecordSrvAPISharedrecordsrvPostRequest) ReturnFields(returnFields string) SharedrecordSrvAPISharedrecordsrvPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordSrvAPISharedrecordsrvPostRequest) ReturnFields2(returnFields2 string) SharedrecordSrvAPISharedrecordsrvPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordSrvAPISharedrecordsrvPostRequest) ReturnAsObject(returnAsObject int32) SharedrecordSrvAPISharedrecordsrvPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordSrvAPISharedrecordsrvPostRequest) Execute() (*CreateSharedrecordSrvResponse, *http.Response, error) {
	return r.ApiService.SharedrecordsrvPostExecute(r)
}

/*
SharedrecordsrvPost Create a sharedrecord:srv object

Creates a new sharedrecord:srv object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordSrvAPISharedrecordsrvPostRequest
*/
func (a *SharedrecordSrvAPIService) SharedrecordsrvPost(ctx context.Context) SharedrecordSrvAPISharedrecordsrvPostRequest {
	return SharedrecordSrvAPISharedrecordsrvPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSharedrecordSrvResponse
func (a *SharedrecordSrvAPIService) SharedrecordsrvPostExecute(r SharedrecordSrvAPISharedrecordsrvPostRequest) (*CreateSharedrecordSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSharedrecordSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordSrvAPIService.SharedrecordsrvPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:srv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordSrv == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordSrv is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordSrv != nil {
		if r.sharedrecordSrv.Extattrs == nil {
			r.sharedrecordSrv.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordSrv.Extattrs)[k]; !ok {
				(*r.sharedrecordSrv.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordSrv
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordSrvAPISharedrecordsrvReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService SharedrecordSrvAPI
	reference  string
}

func (r SharedrecordSrvAPISharedrecordsrvReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SharedrecordsrvReferenceDeleteExecute(r)
}

/*
SharedrecordsrvReferenceDelete Delete a sharedrecord:srv object

Deletes a specific sharedrecord:srv object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:srv object
	@return SharedrecordSrvAPISharedrecordsrvReferenceDeleteRequest
*/
func (a *SharedrecordSrvAPIService) SharedrecordsrvReferenceDelete(ctx context.Context, reference string) SharedrecordSrvAPISharedrecordsrvReferenceDeleteRequest {
	return SharedrecordSrvAPISharedrecordsrvReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SharedrecordSrvAPIService) SharedrecordsrvReferenceDeleteExecute(r SharedrecordSrvAPISharedrecordsrvReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordSrvAPIService.SharedrecordsrvReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:srv/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SharedrecordSrvAPISharedrecordsrvReferenceGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordSrvAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r SharedrecordSrvAPISharedrecordsrvReferenceGetRequest) ReturnFields(returnFields string) SharedrecordSrvAPISharedrecordsrvReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordSrvAPISharedrecordsrvReferenceGetRequest) ReturnFields2(returnFields2 string) SharedrecordSrvAPISharedrecordsrvReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordSrvAPISharedrecordsrvReferenceGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordSrvAPISharedrecordsrvReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordSrvAPISharedrecordsrvReferenceGetRequest) Execute() (*GetSharedrecordSrvResponse, *http.Response, error) {
	return r.ApiService.SharedrecordsrvReferenceGetExecute(r)
}

/*
SharedrecordsrvReferenceGet Get a specific sharedrecord:srv object

Returns a specific sharedrecord:srv object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:srv object
	@return SharedrecordSrvAPISharedrecordsrvReferenceGetRequest
*/
func (a *SharedrecordSrvAPIService) SharedrecordsrvReferenceGet(ctx context.Context, reference string) SharedrecordSrvAPISharedrecordsrvReferenceGetRequest {
	return SharedrecordSrvAPISharedrecordsrvReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSharedrecordSrvResponse
func (a *SharedrecordSrvAPIService) SharedrecordsrvReferenceGetExecute(r SharedrecordSrvAPISharedrecordsrvReferenceGetRequest) (*GetSharedrecordSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSharedrecordSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordSrvAPIService.SharedrecordsrvReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:srv/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordSrvAPISharedrecordsrvReferencePutRequest struct {
	ctx             context.Context
	ApiService      SharedrecordSrvAPI
	reference       string
	sharedrecordSrv *SharedrecordSrv
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to update
func (r SharedrecordSrvAPISharedrecordsrvReferencePutRequest) SharedrecordSrv(sharedrecordSrv SharedrecordSrv) SharedrecordSrvAPISharedrecordsrvReferencePutRequest {
	r.sharedrecordSrv = &sharedrecordSrv
	return r
}

// Enter the field names followed by comma
func (r SharedrecordSrvAPISharedrecordsrvReferencePutRequest) ReturnFields(returnFields string) SharedrecordSrvAPISharedrecordsrvReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordSrvAPISharedrecordsrvReferencePutRequest) ReturnFields2(returnFields2 string) SharedrecordSrvAPISharedrecordsrvReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordSrvAPISharedrecordsrvReferencePutRequest) ReturnAsObject(returnAsObject int32) SharedrecordSrvAPISharedrecordsrvReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordSrvAPISharedrecordsrvReferencePutRequest) Execute() (*UpdateSharedrecordSrvResponse, *http.Response, error) {
	return r.ApiService.SharedrecordsrvReferencePutExecute(r)
}

/*
SharedrecordsrvReferencePut Update a sharedrecord:srv object

Updates a specific sharedrecord:srv object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:srv object
	@return SharedrecordSrvAPISharedrecordsrvReferencePutRequest
*/
func (a *SharedrecordSrvAPIService) SharedrecordsrvReferencePut(ctx context.Context, reference string) SharedrecordSrvAPISharedrecordsrvReferencePutRequest {
	return SharedrecordSrvAPISharedrecordsrvReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSharedrecordSrvResponse
func (a *SharedrecordSrvAPIService) SharedrecordsrvReferencePutExecute(r SharedrecordSrvAPISharedrecordsrvReferencePutRequest) (*UpdateSharedrecordSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSharedrecordSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordSrvAPIService.SharedrecordsrvReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:srv/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordSrv == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordSrv is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordSrv != nil {
		if r.sharedrecordSrv.Extattrs == nil {
			r.sharedrecordSrv.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordSrv.Extattrs)[k]; !ok {
				(*r.sharedrecordSrv.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordSrv
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
