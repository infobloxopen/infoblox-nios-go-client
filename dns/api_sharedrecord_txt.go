/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SharedrecordTxtAPI interface {
	/*
		SharedrecordtxtGet Retrieve sharedrecord:txt objects

		Returns a list of sharedrecord:txt objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordTxtAPISharedrecordtxtGetRequest
	*/
	SharedrecordtxtGet(ctx context.Context) SharedrecordTxtAPISharedrecordtxtGetRequest

	// SharedrecordtxtGetExecute executes the request
	//  @return ListSharedrecordTxtResponse
	SharedrecordtxtGetExecute(r SharedrecordTxtAPISharedrecordtxtGetRequest) (*ListSharedrecordTxtResponse, *http.Response, error)
	/*
		SharedrecordtxtPost Create a sharedrecord:txt object

		Creates a new sharedrecord:txt object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordTxtAPISharedrecordtxtPostRequest
	*/
	SharedrecordtxtPost(ctx context.Context) SharedrecordTxtAPISharedrecordtxtPostRequest

	// SharedrecordtxtPostExecute executes the request
	//  @return CreateSharedrecordTxtResponse
	SharedrecordtxtPostExecute(r SharedrecordTxtAPISharedrecordtxtPostRequest) (*CreateSharedrecordTxtResponse, *http.Response, error)
	/*
		SharedrecordtxtReferenceDelete Delete a sharedrecord:txt object

		Deletes a specific sharedrecord:txt object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:txt object
		@return SharedrecordTxtAPISharedrecordtxtReferenceDeleteRequest
	*/
	SharedrecordtxtReferenceDelete(ctx context.Context, reference string) SharedrecordTxtAPISharedrecordtxtReferenceDeleteRequest

	// SharedrecordtxtReferenceDeleteExecute executes the request
	SharedrecordtxtReferenceDeleteExecute(r SharedrecordTxtAPISharedrecordtxtReferenceDeleteRequest) (*http.Response, error)
	/*
		SharedrecordtxtReferenceGet Get a specific sharedrecord:txt object

		Returns a specific sharedrecord:txt object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:txt object
		@return SharedrecordTxtAPISharedrecordtxtReferenceGetRequest
	*/
	SharedrecordtxtReferenceGet(ctx context.Context, reference string) SharedrecordTxtAPISharedrecordtxtReferenceGetRequest

	// SharedrecordtxtReferenceGetExecute executes the request
	//  @return GetSharedrecordTxtResponse
	SharedrecordtxtReferenceGetExecute(r SharedrecordTxtAPISharedrecordtxtReferenceGetRequest) (*GetSharedrecordTxtResponse, *http.Response, error)
	/*
		SharedrecordtxtReferencePut Update a sharedrecord:txt object

		Updates a specific sharedrecord:txt object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:txt object
		@return SharedrecordTxtAPISharedrecordtxtReferencePutRequest
	*/
	SharedrecordtxtReferencePut(ctx context.Context, reference string) SharedrecordTxtAPISharedrecordtxtReferencePutRequest

	// SharedrecordtxtReferencePutExecute executes the request
	//  @return UpdateSharedrecordTxtResponse
	SharedrecordtxtReferencePutExecute(r SharedrecordTxtAPISharedrecordtxtReferencePutRequest) (*UpdateSharedrecordTxtResponse, *http.Response, error)
}

// SharedrecordTxtAPIService SharedrecordTxtAPI service
type SharedrecordTxtAPIService internal.Service

type SharedrecordTxtAPISharedrecordtxtGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordTxtAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r SharedrecordTxtAPISharedrecordtxtGetRequest) ReturnFields(returnFields string) SharedrecordTxtAPISharedrecordtxtGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordTxtAPISharedrecordtxtGetRequest) ReturnFields2(returnFields2 string) SharedrecordTxtAPISharedrecordtxtGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r SharedrecordTxtAPISharedrecordtxtGetRequest) MaxResults(maxResults int32) SharedrecordTxtAPISharedrecordtxtGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordTxtAPISharedrecordtxtGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordTxtAPISharedrecordtxtGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SharedrecordTxtAPISharedrecordtxtGetRequest) Paging(paging int32) SharedrecordTxtAPISharedrecordtxtGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SharedrecordTxtAPISharedrecordtxtGetRequest) PageId(pageId string) SharedrecordTxtAPISharedrecordtxtGetRequest {
	r.pageId = &pageId
	return r
}

func (r SharedrecordTxtAPISharedrecordtxtGetRequest) Filters(filters map[string]interface{}) SharedrecordTxtAPISharedrecordtxtGetRequest {
	r.filters = &filters
	return r
}

func (r SharedrecordTxtAPISharedrecordtxtGetRequest) Extattrfilter(extattrfilter map[string]interface{}) SharedrecordTxtAPISharedrecordtxtGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SharedrecordTxtAPISharedrecordtxtGetRequest) Execute() (*ListSharedrecordTxtResponse, *http.Response, error) {
	return r.ApiService.SharedrecordtxtGetExecute(r)
}

/*
SharedrecordtxtGet Retrieve sharedrecord:txt objects

Returns a list of sharedrecord:txt objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordTxtAPISharedrecordtxtGetRequest
*/
func (a *SharedrecordTxtAPIService) SharedrecordtxtGet(ctx context.Context) SharedrecordTxtAPISharedrecordtxtGetRequest {
	return SharedrecordTxtAPISharedrecordtxtGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSharedrecordTxtResponse
func (a *SharedrecordTxtAPIService) SharedrecordtxtGetExecute(r SharedrecordTxtAPISharedrecordtxtGetRequest) (*ListSharedrecordTxtResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSharedrecordTxtResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordTxtAPIService.SharedrecordtxtGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:txt"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordTxtAPISharedrecordtxtPostRequest struct {
	ctx             context.Context
	ApiService      SharedrecordTxtAPI
	sharedrecordTxt *SharedrecordTxt
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to create
func (r SharedrecordTxtAPISharedrecordtxtPostRequest) SharedrecordTxt(sharedrecordTxt SharedrecordTxt) SharedrecordTxtAPISharedrecordtxtPostRequest {
	r.sharedrecordTxt = &sharedrecordTxt
	return r
}

// Enter the field names followed by comma
func (r SharedrecordTxtAPISharedrecordtxtPostRequest) ReturnFields(returnFields string) SharedrecordTxtAPISharedrecordtxtPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordTxtAPISharedrecordtxtPostRequest) ReturnFields2(returnFields2 string) SharedrecordTxtAPISharedrecordtxtPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordTxtAPISharedrecordtxtPostRequest) ReturnAsObject(returnAsObject int32) SharedrecordTxtAPISharedrecordtxtPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordTxtAPISharedrecordtxtPostRequest) Execute() (*CreateSharedrecordTxtResponse, *http.Response, error) {
	return r.ApiService.SharedrecordtxtPostExecute(r)
}

/*
SharedrecordtxtPost Create a sharedrecord:txt object

Creates a new sharedrecord:txt object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordTxtAPISharedrecordtxtPostRequest
*/
func (a *SharedrecordTxtAPIService) SharedrecordtxtPost(ctx context.Context) SharedrecordTxtAPISharedrecordtxtPostRequest {
	return SharedrecordTxtAPISharedrecordtxtPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSharedrecordTxtResponse
func (a *SharedrecordTxtAPIService) SharedrecordtxtPostExecute(r SharedrecordTxtAPISharedrecordtxtPostRequest) (*CreateSharedrecordTxtResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSharedrecordTxtResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordTxtAPIService.SharedrecordtxtPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:txt"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordTxt == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordTxt is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordTxt != nil {
		if r.sharedrecordTxt.Extattrs == nil {
			r.sharedrecordTxt.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordTxt.Extattrs)[k]; !ok {
				(*r.sharedrecordTxt.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordTxt
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordTxtAPISharedrecordtxtReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService SharedrecordTxtAPI
	reference  string
}

func (r SharedrecordTxtAPISharedrecordtxtReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SharedrecordtxtReferenceDeleteExecute(r)
}

/*
SharedrecordtxtReferenceDelete Delete a sharedrecord:txt object

Deletes a specific sharedrecord:txt object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:txt object
	@return SharedrecordTxtAPISharedrecordtxtReferenceDeleteRequest
*/
func (a *SharedrecordTxtAPIService) SharedrecordtxtReferenceDelete(ctx context.Context, reference string) SharedrecordTxtAPISharedrecordtxtReferenceDeleteRequest {
	return SharedrecordTxtAPISharedrecordtxtReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SharedrecordTxtAPIService) SharedrecordtxtReferenceDeleteExecute(r SharedrecordTxtAPISharedrecordtxtReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordTxtAPIService.SharedrecordtxtReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:txt/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SharedrecordTxtAPISharedrecordtxtReferenceGetRequest struct {
	ctx            context.Context
	ApiService     SharedrecordTxtAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r SharedrecordTxtAPISharedrecordtxtReferenceGetRequest) ReturnFields(returnFields string) SharedrecordTxtAPISharedrecordtxtReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordTxtAPISharedrecordtxtReferenceGetRequest) ReturnFields2(returnFields2 string) SharedrecordTxtAPISharedrecordtxtReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordTxtAPISharedrecordtxtReferenceGetRequest) ReturnAsObject(returnAsObject int32) SharedrecordTxtAPISharedrecordtxtReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordTxtAPISharedrecordtxtReferenceGetRequest) Execute() (*GetSharedrecordTxtResponse, *http.Response, error) {
	return r.ApiService.SharedrecordtxtReferenceGetExecute(r)
}

/*
SharedrecordtxtReferenceGet Get a specific sharedrecord:txt object

Returns a specific sharedrecord:txt object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:txt object
	@return SharedrecordTxtAPISharedrecordtxtReferenceGetRequest
*/
func (a *SharedrecordTxtAPIService) SharedrecordtxtReferenceGet(ctx context.Context, reference string) SharedrecordTxtAPISharedrecordtxtReferenceGetRequest {
	return SharedrecordTxtAPISharedrecordtxtReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSharedrecordTxtResponse
func (a *SharedrecordTxtAPIService) SharedrecordtxtReferenceGetExecute(r SharedrecordTxtAPISharedrecordtxtReferenceGetRequest) (*GetSharedrecordTxtResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSharedrecordTxtResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordTxtAPIService.SharedrecordtxtReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:txt/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordTxtAPISharedrecordtxtReferencePutRequest struct {
	ctx             context.Context
	ApiService      SharedrecordTxtAPI
	reference       string
	sharedrecordTxt *SharedrecordTxt
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to update
func (r SharedrecordTxtAPISharedrecordtxtReferencePutRequest) SharedrecordTxt(sharedrecordTxt SharedrecordTxt) SharedrecordTxtAPISharedrecordtxtReferencePutRequest {
	r.sharedrecordTxt = &sharedrecordTxt
	return r
}

// Enter the field names followed by comma
func (r SharedrecordTxtAPISharedrecordtxtReferencePutRequest) ReturnFields(returnFields string) SharedrecordTxtAPISharedrecordtxtReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordTxtAPISharedrecordtxtReferencePutRequest) ReturnFields2(returnFields2 string) SharedrecordTxtAPISharedrecordtxtReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordTxtAPISharedrecordtxtReferencePutRequest) ReturnAsObject(returnAsObject int32) SharedrecordTxtAPISharedrecordtxtReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordTxtAPISharedrecordtxtReferencePutRequest) Execute() (*UpdateSharedrecordTxtResponse, *http.Response, error) {
	return r.ApiService.SharedrecordtxtReferencePutExecute(r)
}

/*
SharedrecordtxtReferencePut Update a sharedrecord:txt object

Updates a specific sharedrecord:txt object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:txt object
	@return SharedrecordTxtAPISharedrecordtxtReferencePutRequest
*/
func (a *SharedrecordTxtAPIService) SharedrecordtxtReferencePut(ctx context.Context, reference string) SharedrecordTxtAPISharedrecordtxtReferencePutRequest {
	return SharedrecordTxtAPISharedrecordtxtReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSharedrecordTxtResponse
func (a *SharedrecordTxtAPIService) SharedrecordtxtReferencePutExecute(r SharedrecordTxtAPISharedrecordtxtReferencePutRequest) (*UpdateSharedrecordTxtResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSharedrecordTxtResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordTxtAPIService.SharedrecordtxtReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:txt/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordTxt == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordTxt is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordTxt != nil {
		if r.sharedrecordTxt.Extattrs == nil {
			r.sharedrecordTxt.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordTxt.Extattrs)[k]; !ok {
				(*r.sharedrecordTxt.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordTxt
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
