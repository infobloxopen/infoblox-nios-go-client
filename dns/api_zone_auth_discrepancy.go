/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type ZoneAuthDiscrepancyAPI interface {
	/*
		Get Retrieve zone_auth_discrepancy objects

		Returns a list of zone_auth_discrepancy objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ZoneAuthDiscrepancyAPIGetRequest
	*/
	Get(ctx context.Context) ZoneAuthDiscrepancyAPIGetRequest

	// GetExecute executes the request
	//  @return ListZoneAuthDiscrepancyResponse
	GetExecute(r ZoneAuthDiscrepancyAPIGetRequest) (*ListZoneAuthDiscrepancyResponse, *http.Response, error)
	/*
		ReferenceGet Get a specific zone_auth_discrepancy object

		Returns a specific zone_auth_discrepancy object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the zone_auth_discrepancy object
		@return ZoneAuthDiscrepancyAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) ZoneAuthDiscrepancyAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetZoneAuthDiscrepancyResponse
	ReferenceGetExecute(r ZoneAuthDiscrepancyAPIReferenceGetRequest) (*GetZoneAuthDiscrepancyResponse, *http.Response, error)
}

// ZoneAuthDiscrepancyAPIService ZoneAuthDiscrepancyAPI service
type ZoneAuthDiscrepancyAPIService internal.Service

type ZoneAuthDiscrepancyAPIGetRequest struct {
	ctx            context.Context
	ApiService     ZoneAuthDiscrepancyAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r ZoneAuthDiscrepancyAPIGetRequest) ReturnFields(returnFields string) ZoneAuthDiscrepancyAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ZoneAuthDiscrepancyAPIGetRequest) ReturnFields2(returnFields2 string) ZoneAuthDiscrepancyAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r ZoneAuthDiscrepancyAPIGetRequest) MaxResults(maxResults int32) ZoneAuthDiscrepancyAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ZoneAuthDiscrepancyAPIGetRequest) ReturnAsObject(returnAsObject int32) ZoneAuthDiscrepancyAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ZoneAuthDiscrepancyAPIGetRequest) Paging(paging int32) ZoneAuthDiscrepancyAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ZoneAuthDiscrepancyAPIGetRequest) PageId(pageId string) ZoneAuthDiscrepancyAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r ZoneAuthDiscrepancyAPIGetRequest) Filters(filters map[string]interface{}) ZoneAuthDiscrepancyAPIGetRequest {
	r.filters = &filters
	return r
}

func (r ZoneAuthDiscrepancyAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) ZoneAuthDiscrepancyAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ZoneAuthDiscrepancyAPIGetRequest) Execute() (*ListZoneAuthDiscrepancyResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve zone_auth_discrepancy objects

Returns a list of zone_auth_discrepancy objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ZoneAuthDiscrepancyAPIGetRequest
*/
func (a *ZoneAuthDiscrepancyAPIService) Get(ctx context.Context) ZoneAuthDiscrepancyAPIGetRequest {
	return ZoneAuthDiscrepancyAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListZoneAuthDiscrepancyResponse
func (a *ZoneAuthDiscrepancyAPIService) GetExecute(r ZoneAuthDiscrepancyAPIGetRequest) (*ListZoneAuthDiscrepancyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListZoneAuthDiscrepancyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ZoneAuthDiscrepancyAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/zone_auth_discrepancy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZoneAuthDiscrepancyAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     ZoneAuthDiscrepancyAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r ZoneAuthDiscrepancyAPIReferenceGetRequest) ReturnFields(returnFields string) ZoneAuthDiscrepancyAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ZoneAuthDiscrepancyAPIReferenceGetRequest) ReturnFields2(returnFields2 string) ZoneAuthDiscrepancyAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ZoneAuthDiscrepancyAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) ZoneAuthDiscrepancyAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ZoneAuthDiscrepancyAPIReferenceGetRequest) Execute() (*GetZoneAuthDiscrepancyResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific zone_auth_discrepancy object

Returns a specific zone_auth_discrepancy object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the zone_auth_discrepancy object
	@return ZoneAuthDiscrepancyAPIReferenceGetRequest
*/
func (a *ZoneAuthDiscrepancyAPIService) ReferenceGet(ctx context.Context, reference string) ZoneAuthDiscrepancyAPIReferenceGetRequest {
	return ZoneAuthDiscrepancyAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetZoneAuthDiscrepancyResponse
func (a *ZoneAuthDiscrepancyAPIService) ReferenceGetExecute(r ZoneAuthDiscrepancyAPIReferenceGetRequest) (*GetZoneAuthDiscrepancyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetZoneAuthDiscrepancyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ZoneAuthDiscrepancyAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/zone_auth_discrepancy/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
