/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcLbdnAPI interface {
	/*
		DtclbdnGet Retrieve dtc:lbdn objects

		Returns a list of dtc:lbdn objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcLbdnAPIDtclbdnGetRequest
	*/
	DtclbdnGet(ctx context.Context) DtcLbdnAPIDtclbdnGetRequest

	// DtclbdnGetExecute executes the request
	//  @return ListDtcLbdnResponse
	DtclbdnGetExecute(r DtcLbdnAPIDtclbdnGetRequest) (*ListDtcLbdnResponse, *http.Response, error)
	/*
		DtclbdnPost Create a dtc:lbdn object

		Creates a new dtc:lbdn object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcLbdnAPIDtclbdnPostRequest
	*/
	DtclbdnPost(ctx context.Context) DtcLbdnAPIDtclbdnPostRequest

	// DtclbdnPostExecute executes the request
	//  @return CreateDtcLbdnResponse
	DtclbdnPostExecute(r DtcLbdnAPIDtclbdnPostRequest) (*CreateDtcLbdnResponse, *http.Response, error)
	/*
		DtclbdnReferenceDelete Delete a dtc:lbdn object

		Deletes a specific dtc:lbdn object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:lbdn object
		@return DtcLbdnAPIDtclbdnReferenceDeleteRequest
	*/
	DtclbdnReferenceDelete(ctx context.Context, reference string) DtcLbdnAPIDtclbdnReferenceDeleteRequest

	// DtclbdnReferenceDeleteExecute executes the request
	DtclbdnReferenceDeleteExecute(r DtcLbdnAPIDtclbdnReferenceDeleteRequest) (*http.Response, error)
	/*
		DtclbdnReferenceGet Get a specific dtc:lbdn object

		Returns a specific dtc:lbdn object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:lbdn object
		@return DtcLbdnAPIDtclbdnReferenceGetRequest
	*/
	DtclbdnReferenceGet(ctx context.Context, reference string) DtcLbdnAPIDtclbdnReferenceGetRequest

	// DtclbdnReferenceGetExecute executes the request
	//  @return GetDtcLbdnResponse
	DtclbdnReferenceGetExecute(r DtcLbdnAPIDtclbdnReferenceGetRequest) (*GetDtcLbdnResponse, *http.Response, error)
	/*
		DtclbdnReferencePut Update a dtc:lbdn object

		Updates a specific dtc:lbdn object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:lbdn object
		@return DtcLbdnAPIDtclbdnReferencePutRequest
	*/
	DtclbdnReferencePut(ctx context.Context, reference string) DtcLbdnAPIDtclbdnReferencePutRequest

	// DtclbdnReferencePutExecute executes the request
	//  @return UpdateDtcLbdnResponse
	DtclbdnReferencePutExecute(r DtcLbdnAPIDtclbdnReferencePutRequest) (*UpdateDtcLbdnResponse, *http.Response, error)
}

// DtcLbdnAPIService DtcLbdnAPI service
type DtcLbdnAPIService internal.Service

type DtcLbdnAPIDtclbdnGetRequest struct {
	ctx            context.Context
	ApiService     DtcLbdnAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcLbdnAPIDtclbdnGetRequest) ReturnFields(returnFields string) DtcLbdnAPIDtclbdnGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcLbdnAPIDtclbdnGetRequest) ReturnFields2(returnFields2 string) DtcLbdnAPIDtclbdnGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcLbdnAPIDtclbdnGetRequest) MaxResults(maxResults int32) DtcLbdnAPIDtclbdnGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcLbdnAPIDtclbdnGetRequest) ReturnAsObject(returnAsObject int32) DtcLbdnAPIDtclbdnGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcLbdnAPIDtclbdnGetRequest) Paging(paging int32) DtcLbdnAPIDtclbdnGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcLbdnAPIDtclbdnGetRequest) PageId(pageId string) DtcLbdnAPIDtclbdnGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcLbdnAPIDtclbdnGetRequest) Filters(filters map[string]interface{}) DtcLbdnAPIDtclbdnGetRequest {
	r.filters = &filters
	return r
}

func (r DtcLbdnAPIDtclbdnGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcLbdnAPIDtclbdnGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcLbdnAPIDtclbdnGetRequest) Execute() (*ListDtcLbdnResponse, *http.Response, error) {
	return r.ApiService.DtclbdnGetExecute(r)
}

/*
DtclbdnGet Retrieve dtc:lbdn objects

Returns a list of dtc:lbdn objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcLbdnAPIDtclbdnGetRequest
*/
func (a *DtcLbdnAPIService) DtclbdnGet(ctx context.Context) DtcLbdnAPIDtclbdnGetRequest {
	return DtcLbdnAPIDtclbdnGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcLbdnResponse
func (a *DtcLbdnAPIService) DtclbdnGetExecute(r DtcLbdnAPIDtclbdnGetRequest) (*ListDtcLbdnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcLbdnResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcLbdnAPIService.DtclbdnGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:lbdn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcLbdnAPIDtclbdnPostRequest struct {
	ctx            context.Context
	ApiService     DtcLbdnAPI
	dtcLbdn        *DtcLbdn
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcLbdnAPIDtclbdnPostRequest) DtcLbdn(dtcLbdn DtcLbdn) DtcLbdnAPIDtclbdnPostRequest {
	r.dtcLbdn = &dtcLbdn
	return r
}

// Enter the field names followed by comma
func (r DtcLbdnAPIDtclbdnPostRequest) ReturnFields(returnFields string) DtcLbdnAPIDtclbdnPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcLbdnAPIDtclbdnPostRequest) ReturnFields2(returnFields2 string) DtcLbdnAPIDtclbdnPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcLbdnAPIDtclbdnPostRequest) ReturnAsObject(returnAsObject int32) DtcLbdnAPIDtclbdnPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcLbdnAPIDtclbdnPostRequest) Execute() (*CreateDtcLbdnResponse, *http.Response, error) {
	return r.ApiService.DtclbdnPostExecute(r)
}

/*
DtclbdnPost Create a dtc:lbdn object

Creates a new dtc:lbdn object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcLbdnAPIDtclbdnPostRequest
*/
func (a *DtcLbdnAPIService) DtclbdnPost(ctx context.Context) DtcLbdnAPIDtclbdnPostRequest {
	return DtcLbdnAPIDtclbdnPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcLbdnResponse
func (a *DtcLbdnAPIService) DtclbdnPostExecute(r DtcLbdnAPIDtclbdnPostRequest) (*CreateDtcLbdnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcLbdnResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcLbdnAPIService.DtclbdnPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:lbdn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcLbdn == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcLbdn is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcLbdn != nil {
		if r.dtcLbdn.Extattrs == nil {
			r.dtcLbdn.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcLbdn.Extattrs)[k]; !ok {
				(*r.dtcLbdn.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcLbdn
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcLbdnAPIDtclbdnReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcLbdnAPI
	reference  string
}

func (r DtcLbdnAPIDtclbdnReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DtclbdnReferenceDeleteExecute(r)
}

/*
DtclbdnReferenceDelete Delete a dtc:lbdn object

Deletes a specific dtc:lbdn object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:lbdn object
	@return DtcLbdnAPIDtclbdnReferenceDeleteRequest
*/
func (a *DtcLbdnAPIService) DtclbdnReferenceDelete(ctx context.Context, reference string) DtcLbdnAPIDtclbdnReferenceDeleteRequest {
	return DtcLbdnAPIDtclbdnReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcLbdnAPIService) DtclbdnReferenceDeleteExecute(r DtcLbdnAPIDtclbdnReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcLbdnAPIService.DtclbdnReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:lbdn/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcLbdnAPIDtclbdnReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcLbdnAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcLbdnAPIDtclbdnReferenceGetRequest) ReturnFields(returnFields string) DtcLbdnAPIDtclbdnReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcLbdnAPIDtclbdnReferenceGetRequest) ReturnFields2(returnFields2 string) DtcLbdnAPIDtclbdnReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcLbdnAPIDtclbdnReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcLbdnAPIDtclbdnReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcLbdnAPIDtclbdnReferenceGetRequest) Execute() (*GetDtcLbdnResponse, *http.Response, error) {
	return r.ApiService.DtclbdnReferenceGetExecute(r)
}

/*
DtclbdnReferenceGet Get a specific dtc:lbdn object

Returns a specific dtc:lbdn object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:lbdn object
	@return DtcLbdnAPIDtclbdnReferenceGetRequest
*/
func (a *DtcLbdnAPIService) DtclbdnReferenceGet(ctx context.Context, reference string) DtcLbdnAPIDtclbdnReferenceGetRequest {
	return DtcLbdnAPIDtclbdnReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcLbdnResponse
func (a *DtcLbdnAPIService) DtclbdnReferenceGetExecute(r DtcLbdnAPIDtclbdnReferenceGetRequest) (*GetDtcLbdnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcLbdnResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcLbdnAPIService.DtclbdnReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:lbdn/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcLbdnAPIDtclbdnReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcLbdnAPI
	reference      string
	dtcLbdn        *DtcLbdn
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcLbdnAPIDtclbdnReferencePutRequest) DtcLbdn(dtcLbdn DtcLbdn) DtcLbdnAPIDtclbdnReferencePutRequest {
	r.dtcLbdn = &dtcLbdn
	return r
}

// Enter the field names followed by comma
func (r DtcLbdnAPIDtclbdnReferencePutRequest) ReturnFields(returnFields string) DtcLbdnAPIDtclbdnReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcLbdnAPIDtclbdnReferencePutRequest) ReturnFields2(returnFields2 string) DtcLbdnAPIDtclbdnReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcLbdnAPIDtclbdnReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcLbdnAPIDtclbdnReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcLbdnAPIDtclbdnReferencePutRequest) Execute() (*UpdateDtcLbdnResponse, *http.Response, error) {
	return r.ApiService.DtclbdnReferencePutExecute(r)
}

/*
DtclbdnReferencePut Update a dtc:lbdn object

Updates a specific dtc:lbdn object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:lbdn object
	@return DtcLbdnAPIDtclbdnReferencePutRequest
*/
func (a *DtcLbdnAPIService) DtclbdnReferencePut(ctx context.Context, reference string) DtcLbdnAPIDtclbdnReferencePutRequest {
	return DtcLbdnAPIDtclbdnReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcLbdnResponse
func (a *DtcLbdnAPIService) DtclbdnReferencePutExecute(r DtcLbdnAPIDtclbdnReferencePutRequest) (*UpdateDtcLbdnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcLbdnResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcLbdnAPIService.DtclbdnReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:lbdn/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcLbdn == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcLbdn is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcLbdn != nil {
		if r.dtcLbdn.Extattrs == nil {
			r.dtcLbdn.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcLbdn.Extattrs)[k]; !ok {
				(*r.dtcLbdn.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcLbdn
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
