/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcMonitorPdpAPI interface {
	/*
		DtcmonitorpdpGet Retrieve dtc:monitor:pdp objects

		Returns a list of dtc:monitor:pdp objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcMonitorPdpAPIDtcmonitorpdpGetRequest
	*/
	DtcmonitorpdpGet(ctx context.Context) DtcMonitorPdpAPIDtcmonitorpdpGetRequest

	// DtcmonitorpdpGetExecute executes the request
	//  @return ListDtcMonitorPdpResponse
	DtcmonitorpdpGetExecute(r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) (*ListDtcMonitorPdpResponse, *http.Response, error)
	/*
		DtcmonitorpdpPost Create a dtc:monitor:pdp object

		Creates a new dtc:monitor:pdp object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcMonitorPdpAPIDtcmonitorpdpPostRequest
	*/
	DtcmonitorpdpPost(ctx context.Context) DtcMonitorPdpAPIDtcmonitorpdpPostRequest

	// DtcmonitorpdpPostExecute executes the request
	//  @return CreateDtcMonitorPdpResponse
	DtcmonitorpdpPostExecute(r DtcMonitorPdpAPIDtcmonitorpdpPostRequest) (*CreateDtcMonitorPdpResponse, *http.Response, error)
	/*
		DtcmonitorpdpReferenceDelete Delete a dtc:monitor:pdp object

		Deletes a specific dtc:monitor:pdp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:pdp object
		@return DtcMonitorPdpAPIDtcmonitorpdpReferenceDeleteRequest
	*/
	DtcmonitorpdpReferenceDelete(ctx context.Context, reference string) DtcMonitorPdpAPIDtcmonitorpdpReferenceDeleteRequest

	// DtcmonitorpdpReferenceDeleteExecute executes the request
	DtcmonitorpdpReferenceDeleteExecute(r DtcMonitorPdpAPIDtcmonitorpdpReferenceDeleteRequest) (*http.Response, error)
	/*
		DtcmonitorpdpReferenceGet Get a specific dtc:monitor:pdp object

		Returns a specific dtc:monitor:pdp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:pdp object
		@return DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest
	*/
	DtcmonitorpdpReferenceGet(ctx context.Context, reference string) DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest

	// DtcmonitorpdpReferenceGetExecute executes the request
	//  @return GetDtcMonitorPdpResponse
	DtcmonitorpdpReferenceGetExecute(r DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest) (*GetDtcMonitorPdpResponse, *http.Response, error)
	/*
		DtcmonitorpdpReferencePut Update a dtc:monitor:pdp object

		Updates a specific dtc:monitor:pdp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:pdp object
		@return DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest
	*/
	DtcmonitorpdpReferencePut(ctx context.Context, reference string) DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest

	// DtcmonitorpdpReferencePutExecute executes the request
	//  @return UpdateDtcMonitorPdpResponse
	DtcmonitorpdpReferencePutExecute(r DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest) (*UpdateDtcMonitorPdpResponse, *http.Response, error)
}

// DtcMonitorPdpAPIService DtcMonitorPdpAPI service
type DtcMonitorPdpAPIService internal.Service

type DtcMonitorPdpAPIDtcmonitorpdpGetRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorPdpAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) ReturnFields(returnFields string) DtcMonitorPdpAPIDtcmonitorpdpGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) ReturnFields2(returnFields2 string) DtcMonitorPdpAPIDtcmonitorpdpGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) MaxResults(maxResults int32) DtcMonitorPdpAPIDtcmonitorpdpGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) ReturnAsObject(returnAsObject int32) DtcMonitorPdpAPIDtcmonitorpdpGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) Paging(paging int32) DtcMonitorPdpAPIDtcmonitorpdpGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) PageId(pageId string) DtcMonitorPdpAPIDtcmonitorpdpGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) Filters(filters map[string]interface{}) DtcMonitorPdpAPIDtcmonitorpdpGetRequest {
	r.filters = &filters
	return r
}

func (r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcMonitorPdpAPIDtcmonitorpdpGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) Execute() (*ListDtcMonitorPdpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitorpdpGetExecute(r)
}

/*
DtcmonitorpdpGet Retrieve dtc:monitor:pdp objects

Returns a list of dtc:monitor:pdp objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcMonitorPdpAPIDtcmonitorpdpGetRequest
*/
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpGet(ctx context.Context) DtcMonitorPdpAPIDtcmonitorpdpGetRequest {
	return DtcMonitorPdpAPIDtcmonitorpdpGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcMonitorPdpResponse
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpGetExecute(r DtcMonitorPdpAPIDtcmonitorpdpGetRequest) (*ListDtcMonitorPdpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcMonitorPdpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorPdpAPIService.DtcmonitorpdpGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:pdp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorPdpAPIDtcmonitorpdpPostRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorPdpAPI
	dtcMonitorPdp  *DtcMonitorPdp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcMonitorPdpAPIDtcmonitorpdpPostRequest) DtcMonitorPdp(dtcMonitorPdp DtcMonitorPdp) DtcMonitorPdpAPIDtcmonitorpdpPostRequest {
	r.dtcMonitorPdp = &dtcMonitorPdp
	return r
}

// Enter the field names followed by comma
func (r DtcMonitorPdpAPIDtcmonitorpdpPostRequest) ReturnFields(returnFields string) DtcMonitorPdpAPIDtcmonitorpdpPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorPdpAPIDtcmonitorpdpPostRequest) ReturnFields2(returnFields2 string) DtcMonitorPdpAPIDtcmonitorpdpPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorPdpAPIDtcmonitorpdpPostRequest) ReturnAsObject(returnAsObject int32) DtcMonitorPdpAPIDtcmonitorpdpPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorPdpAPIDtcmonitorpdpPostRequest) Execute() (*CreateDtcMonitorPdpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitorpdpPostExecute(r)
}

/*
DtcmonitorpdpPost Create a dtc:monitor:pdp object

Creates a new dtc:monitor:pdp object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcMonitorPdpAPIDtcmonitorpdpPostRequest
*/
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpPost(ctx context.Context) DtcMonitorPdpAPIDtcmonitorpdpPostRequest {
	return DtcMonitorPdpAPIDtcmonitorpdpPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcMonitorPdpResponse
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpPostExecute(r DtcMonitorPdpAPIDtcmonitorpdpPostRequest) (*CreateDtcMonitorPdpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcMonitorPdpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorPdpAPIService.DtcmonitorpdpPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:pdp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorPdp == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorPdp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorPdp != nil {
		if r.dtcMonitorPdp.Extattrs == nil {
			r.dtcMonitorPdp.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorPdp.Extattrs)[k]; !ok {
				(*r.dtcMonitorPdp.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorPdp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorPdpAPIDtcmonitorpdpReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcMonitorPdpAPI
	reference  string
}

func (r DtcMonitorPdpAPIDtcmonitorpdpReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DtcmonitorpdpReferenceDeleteExecute(r)
}

/*
DtcmonitorpdpReferenceDelete Delete a dtc:monitor:pdp object

Deletes a specific dtc:monitor:pdp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:pdp object
	@return DtcMonitorPdpAPIDtcmonitorpdpReferenceDeleteRequest
*/
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpReferenceDelete(ctx context.Context, reference string) DtcMonitorPdpAPIDtcmonitorpdpReferenceDeleteRequest {
	return DtcMonitorPdpAPIDtcmonitorpdpReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpReferenceDeleteExecute(r DtcMonitorPdpAPIDtcmonitorpdpReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorPdpAPIService.DtcmonitorpdpReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:pdp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorPdpAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest) ReturnFields(returnFields string) DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest) ReturnFields2(returnFields2 string) DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest) Execute() (*GetDtcMonitorPdpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitorpdpReferenceGetExecute(r)
}

/*
DtcmonitorpdpReferenceGet Get a specific dtc:monitor:pdp object

Returns a specific dtc:monitor:pdp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:pdp object
	@return DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest
*/
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpReferenceGet(ctx context.Context, reference string) DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest {
	return DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcMonitorPdpResponse
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpReferenceGetExecute(r DtcMonitorPdpAPIDtcmonitorpdpReferenceGetRequest) (*GetDtcMonitorPdpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcMonitorPdpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorPdpAPIService.DtcmonitorpdpReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:pdp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorPdpAPI
	reference      string
	dtcMonitorPdp  *DtcMonitorPdp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest) DtcMonitorPdp(dtcMonitorPdp DtcMonitorPdp) DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest {
	r.dtcMonitorPdp = &dtcMonitorPdp
	return r
}

// Enter the field names followed by comma
func (r DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest) ReturnFields(returnFields string) DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest) ReturnFields2(returnFields2 string) DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest) Execute() (*UpdateDtcMonitorPdpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitorpdpReferencePutExecute(r)
}

/*
DtcmonitorpdpReferencePut Update a dtc:monitor:pdp object

Updates a specific dtc:monitor:pdp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:pdp object
	@return DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest
*/
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpReferencePut(ctx context.Context, reference string) DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest {
	return DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcMonitorPdpResponse
func (a *DtcMonitorPdpAPIService) DtcmonitorpdpReferencePutExecute(r DtcMonitorPdpAPIDtcmonitorpdpReferencePutRequest) (*UpdateDtcMonitorPdpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcMonitorPdpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorPdpAPIService.DtcmonitorpdpReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:pdp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorPdp == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorPdp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorPdp != nil {
		if r.dtcMonitorPdp.Extattrs == nil {
			r.dtcMonitorPdp.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorPdp.Extattrs)[k]; !ok {
				(*r.dtcMonitorPdp.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorPdp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
