/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcMonitorSnmpAPI interface {
	/*
		DtcmonitorsnmpGet Retrieve dtc:monitor:snmp objects

		Returns a list of dtc:monitor:snmp objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest
	*/
	DtcmonitorsnmpGet(ctx context.Context) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest

	// DtcmonitorsnmpGetExecute executes the request
	//  @return ListDtcMonitorSnmpResponse
	DtcmonitorsnmpGetExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) (*ListDtcMonitorSnmpResponse, *http.Response, error)
	/*
		DtcmonitorsnmpPost Create a dtc:monitor:snmp object

		Creates a new dtc:monitor:snmp object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest
	*/
	DtcmonitorsnmpPost(ctx context.Context) DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest

	// DtcmonitorsnmpPostExecute executes the request
	//  @return CreateDtcMonitorSnmpResponse
	DtcmonitorsnmpPostExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest) (*CreateDtcMonitorSnmpResponse, *http.Response, error)
	/*
		DtcmonitorsnmpReferenceDelete Delete a dtc:monitor:snmp object

		Deletes a specific dtc:monitor:snmp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:snmp object
		@return DtcMonitorSnmpAPIDtcmonitorsnmpReferenceDeleteRequest
	*/
	DtcmonitorsnmpReferenceDelete(ctx context.Context, reference string) DtcMonitorSnmpAPIDtcmonitorsnmpReferenceDeleteRequest

	// DtcmonitorsnmpReferenceDeleteExecute executes the request
	DtcmonitorsnmpReferenceDeleteExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpReferenceDeleteRequest) (*http.Response, error)
	/*
		DtcmonitorsnmpReferenceGet Get a specific dtc:monitor:snmp object

		Returns a specific dtc:monitor:snmp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:snmp object
		@return DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest
	*/
	DtcmonitorsnmpReferenceGet(ctx context.Context, reference string) DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest

	// DtcmonitorsnmpReferenceGetExecute executes the request
	//  @return GetDtcMonitorSnmpResponse
	DtcmonitorsnmpReferenceGetExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest) (*GetDtcMonitorSnmpResponse, *http.Response, error)
	/*
		DtcmonitorsnmpReferencePut Update a dtc:monitor:snmp object

		Updates a specific dtc:monitor:snmp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:snmp object
		@return DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest
	*/
	DtcmonitorsnmpReferencePut(ctx context.Context, reference string) DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest

	// DtcmonitorsnmpReferencePutExecute executes the request
	//  @return UpdateDtcMonitorSnmpResponse
	DtcmonitorsnmpReferencePutExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest) (*UpdateDtcMonitorSnmpResponse, *http.Response, error)
}

// DtcMonitorSnmpAPIService DtcMonitorSnmpAPI service
type DtcMonitorSnmpAPIService internal.Service

type DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorSnmpAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) ReturnFields(returnFields string) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) ReturnFields2(returnFields2 string) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) MaxResults(maxResults int32) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) ReturnAsObject(returnAsObject int32) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) Paging(paging int32) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) PageId(pageId string) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) Filters(filters map[string]interface{}) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest {
	r.filters = &filters
	return r
}

func (r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) Execute() (*ListDtcMonitorSnmpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitorsnmpGetExecute(r)
}

/*
DtcmonitorsnmpGet Retrieve dtc:monitor:snmp objects

Returns a list of dtc:monitor:snmp objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest
*/
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpGet(ctx context.Context) DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest {
	return DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcMonitorSnmpResponse
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpGetExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpGetRequest) (*ListDtcMonitorSnmpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcMonitorSnmpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSnmpAPIService.DtcmonitorsnmpGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:snmp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorSnmpAPI
	dtcMonitorSnmp *DtcMonitorSnmp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest) DtcMonitorSnmp(dtcMonitorSnmp DtcMonitorSnmp) DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest {
	r.dtcMonitorSnmp = &dtcMonitorSnmp
	return r
}

// Enter the field names followed by comma
func (r DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest) ReturnFields(returnFields string) DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest) ReturnFields2(returnFields2 string) DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest) ReturnAsObject(returnAsObject int32) DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest) Execute() (*CreateDtcMonitorSnmpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitorsnmpPostExecute(r)
}

/*
DtcmonitorsnmpPost Create a dtc:monitor:snmp object

Creates a new dtc:monitor:snmp object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest
*/
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpPost(ctx context.Context) DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest {
	return DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcMonitorSnmpResponse
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpPostExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpPostRequest) (*CreateDtcMonitorSnmpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcMonitorSnmpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSnmpAPIService.DtcmonitorsnmpPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:snmp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorSnmp == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorSnmp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorSnmp != nil {
		if r.dtcMonitorSnmp.Extattrs == nil {
			r.dtcMonitorSnmp.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorSnmp.Extattrs)[k]; !ok {
				(*r.dtcMonitorSnmp.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorSnmp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorSnmpAPIDtcmonitorsnmpReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcMonitorSnmpAPI
	reference  string
}

func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DtcmonitorsnmpReferenceDeleteExecute(r)
}

/*
DtcmonitorsnmpReferenceDelete Delete a dtc:monitor:snmp object

Deletes a specific dtc:monitor:snmp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:snmp object
	@return DtcMonitorSnmpAPIDtcmonitorsnmpReferenceDeleteRequest
*/
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpReferenceDelete(ctx context.Context, reference string) DtcMonitorSnmpAPIDtcmonitorsnmpReferenceDeleteRequest {
	return DtcMonitorSnmpAPIDtcmonitorsnmpReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpReferenceDeleteExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSnmpAPIService.DtcmonitorsnmpReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:snmp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorSnmpAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest) ReturnFields(returnFields string) DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest) ReturnFields2(returnFields2 string) DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest) Execute() (*GetDtcMonitorSnmpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitorsnmpReferenceGetExecute(r)
}

/*
DtcmonitorsnmpReferenceGet Get a specific dtc:monitor:snmp object

Returns a specific dtc:monitor:snmp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:snmp object
	@return DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest
*/
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpReferenceGet(ctx context.Context, reference string) DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest {
	return DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcMonitorSnmpResponse
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpReferenceGetExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpReferenceGetRequest) (*GetDtcMonitorSnmpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcMonitorSnmpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSnmpAPIService.DtcmonitorsnmpReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:snmp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorSnmpAPI
	reference      string
	dtcMonitorSnmp *DtcMonitorSnmp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest) DtcMonitorSnmp(dtcMonitorSnmp DtcMonitorSnmp) DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest {
	r.dtcMonitorSnmp = &dtcMonitorSnmp
	return r
}

// Enter the field names followed by comma
func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest) ReturnFields(returnFields string) DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest) ReturnFields2(returnFields2 string) DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest) Execute() (*UpdateDtcMonitorSnmpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitorsnmpReferencePutExecute(r)
}

/*
DtcmonitorsnmpReferencePut Update a dtc:monitor:snmp object

Updates a specific dtc:monitor:snmp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:snmp object
	@return DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest
*/
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpReferencePut(ctx context.Context, reference string) DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest {
	return DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcMonitorSnmpResponse
func (a *DtcMonitorSnmpAPIService) DtcmonitorsnmpReferencePutExecute(r DtcMonitorSnmpAPIDtcmonitorsnmpReferencePutRequest) (*UpdateDtcMonitorSnmpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcMonitorSnmpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSnmpAPIService.DtcmonitorsnmpReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:snmp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorSnmp == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorSnmp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorSnmp != nil {
		if r.dtcMonitorSnmp.Extattrs == nil {
			r.dtcMonitorSnmp.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorSnmp.Extattrs)[k]; !ok {
				(*r.dtcMonitorSnmp.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorSnmp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
