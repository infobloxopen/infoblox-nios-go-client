/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcMonitorTcpAPI interface {
	/*
		DtcmonitortcpGet Retrieve dtc:monitor:tcp objects

		Returns a list of dtc:monitor:tcp objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcMonitorTcpAPIDtcmonitortcpGetRequest
	*/
	DtcmonitortcpGet(ctx context.Context) DtcMonitorTcpAPIDtcmonitortcpGetRequest

	// DtcmonitortcpGetExecute executes the request
	//  @return ListDtcMonitorTcpResponse
	DtcmonitortcpGetExecute(r DtcMonitorTcpAPIDtcmonitortcpGetRequest) (*ListDtcMonitorTcpResponse, *http.Response, error)
	/*
		DtcmonitortcpPost Create a dtc:monitor:tcp object

		Creates a new dtc:monitor:tcp object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcMonitorTcpAPIDtcmonitortcpPostRequest
	*/
	DtcmonitortcpPost(ctx context.Context) DtcMonitorTcpAPIDtcmonitortcpPostRequest

	// DtcmonitortcpPostExecute executes the request
	//  @return CreateDtcMonitorTcpResponse
	DtcmonitortcpPostExecute(r DtcMonitorTcpAPIDtcmonitortcpPostRequest) (*CreateDtcMonitorTcpResponse, *http.Response, error)
	/*
		DtcmonitortcpReferenceDelete Delete a dtc:monitor:tcp object

		Deletes a specific dtc:monitor:tcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:tcp object
		@return DtcMonitorTcpAPIDtcmonitortcpReferenceDeleteRequest
	*/
	DtcmonitortcpReferenceDelete(ctx context.Context, reference string) DtcMonitorTcpAPIDtcmonitortcpReferenceDeleteRequest

	// DtcmonitortcpReferenceDeleteExecute executes the request
	DtcmonitortcpReferenceDeleteExecute(r DtcMonitorTcpAPIDtcmonitortcpReferenceDeleteRequest) (*http.Response, error)
	/*
		DtcmonitortcpReferenceGet Get a specific dtc:monitor:tcp object

		Returns a specific dtc:monitor:tcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:tcp object
		@return DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest
	*/
	DtcmonitortcpReferenceGet(ctx context.Context, reference string) DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest

	// DtcmonitortcpReferenceGetExecute executes the request
	//  @return GetDtcMonitorTcpResponse
	DtcmonitortcpReferenceGetExecute(r DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest) (*GetDtcMonitorTcpResponse, *http.Response, error)
	/*
		DtcmonitortcpReferencePut Update a dtc:monitor:tcp object

		Updates a specific dtc:monitor:tcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:tcp object
		@return DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest
	*/
	DtcmonitortcpReferencePut(ctx context.Context, reference string) DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest

	// DtcmonitortcpReferencePutExecute executes the request
	//  @return UpdateDtcMonitorTcpResponse
	DtcmonitortcpReferencePutExecute(r DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest) (*UpdateDtcMonitorTcpResponse, *http.Response, error)
}

// DtcMonitorTcpAPIService DtcMonitorTcpAPI service
type DtcMonitorTcpAPIService internal.Service

type DtcMonitorTcpAPIDtcmonitortcpGetRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorTcpAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcMonitorTcpAPIDtcmonitortcpGetRequest) ReturnFields(returnFields string) DtcMonitorTcpAPIDtcmonitortcpGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorTcpAPIDtcmonitortcpGetRequest) ReturnFields2(returnFields2 string) DtcMonitorTcpAPIDtcmonitortcpGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcMonitorTcpAPIDtcmonitortcpGetRequest) MaxResults(maxResults int32) DtcMonitorTcpAPIDtcmonitortcpGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorTcpAPIDtcmonitortcpGetRequest) ReturnAsObject(returnAsObject int32) DtcMonitorTcpAPIDtcmonitortcpGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcMonitorTcpAPIDtcmonitortcpGetRequest) Paging(paging int32) DtcMonitorTcpAPIDtcmonitortcpGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcMonitorTcpAPIDtcmonitortcpGetRequest) PageId(pageId string) DtcMonitorTcpAPIDtcmonitortcpGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcMonitorTcpAPIDtcmonitortcpGetRequest) Filters(filters map[string]interface{}) DtcMonitorTcpAPIDtcmonitortcpGetRequest {
	r.filters = &filters
	return r
}

func (r DtcMonitorTcpAPIDtcmonitortcpGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcMonitorTcpAPIDtcmonitortcpGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcMonitorTcpAPIDtcmonitortcpGetRequest) Execute() (*ListDtcMonitorTcpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitortcpGetExecute(r)
}

/*
DtcmonitortcpGet Retrieve dtc:monitor:tcp objects

Returns a list of dtc:monitor:tcp objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcMonitorTcpAPIDtcmonitortcpGetRequest
*/
func (a *DtcMonitorTcpAPIService) DtcmonitortcpGet(ctx context.Context) DtcMonitorTcpAPIDtcmonitortcpGetRequest {
	return DtcMonitorTcpAPIDtcmonitortcpGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcMonitorTcpResponse
func (a *DtcMonitorTcpAPIService) DtcmonitortcpGetExecute(r DtcMonitorTcpAPIDtcmonitortcpGetRequest) (*ListDtcMonitorTcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcMonitorTcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorTcpAPIService.DtcmonitortcpGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorTcpAPIDtcmonitortcpPostRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorTcpAPI
	dtcMonitorTcp  *DtcMonitorTcp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcMonitorTcpAPIDtcmonitortcpPostRequest) DtcMonitorTcp(dtcMonitorTcp DtcMonitorTcp) DtcMonitorTcpAPIDtcmonitortcpPostRequest {
	r.dtcMonitorTcp = &dtcMonitorTcp
	return r
}

// Enter the field names followed by comma
func (r DtcMonitorTcpAPIDtcmonitortcpPostRequest) ReturnFields(returnFields string) DtcMonitorTcpAPIDtcmonitortcpPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorTcpAPIDtcmonitortcpPostRequest) ReturnFields2(returnFields2 string) DtcMonitorTcpAPIDtcmonitortcpPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorTcpAPIDtcmonitortcpPostRequest) ReturnAsObject(returnAsObject int32) DtcMonitorTcpAPIDtcmonitortcpPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorTcpAPIDtcmonitortcpPostRequest) Execute() (*CreateDtcMonitorTcpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitortcpPostExecute(r)
}

/*
DtcmonitortcpPost Create a dtc:monitor:tcp object

Creates a new dtc:monitor:tcp object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcMonitorTcpAPIDtcmonitortcpPostRequest
*/
func (a *DtcMonitorTcpAPIService) DtcmonitortcpPost(ctx context.Context) DtcMonitorTcpAPIDtcmonitortcpPostRequest {
	return DtcMonitorTcpAPIDtcmonitortcpPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcMonitorTcpResponse
func (a *DtcMonitorTcpAPIService) DtcmonitortcpPostExecute(r DtcMonitorTcpAPIDtcmonitortcpPostRequest) (*CreateDtcMonitorTcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcMonitorTcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorTcpAPIService.DtcmonitortcpPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorTcp == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorTcp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorTcp != nil {
		if r.dtcMonitorTcp.Extattrs == nil {
			r.dtcMonitorTcp.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorTcp.Extattrs)[k]; !ok {
				(*r.dtcMonitorTcp.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorTcp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorTcpAPIDtcmonitortcpReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcMonitorTcpAPI
	reference  string
}

func (r DtcMonitorTcpAPIDtcmonitortcpReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DtcmonitortcpReferenceDeleteExecute(r)
}

/*
DtcmonitortcpReferenceDelete Delete a dtc:monitor:tcp object

Deletes a specific dtc:monitor:tcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:tcp object
	@return DtcMonitorTcpAPIDtcmonitortcpReferenceDeleteRequest
*/
func (a *DtcMonitorTcpAPIService) DtcmonitortcpReferenceDelete(ctx context.Context, reference string) DtcMonitorTcpAPIDtcmonitortcpReferenceDeleteRequest {
	return DtcMonitorTcpAPIDtcmonitortcpReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcMonitorTcpAPIService) DtcmonitortcpReferenceDeleteExecute(r DtcMonitorTcpAPIDtcmonitortcpReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorTcpAPIService.DtcmonitortcpReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorTcpAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest) ReturnFields(returnFields string) DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest) ReturnFields2(returnFields2 string) DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest) Execute() (*GetDtcMonitorTcpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitortcpReferenceGetExecute(r)
}

/*
DtcmonitortcpReferenceGet Get a specific dtc:monitor:tcp object

Returns a specific dtc:monitor:tcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:tcp object
	@return DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest
*/
func (a *DtcMonitorTcpAPIService) DtcmonitortcpReferenceGet(ctx context.Context, reference string) DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest {
	return DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcMonitorTcpResponse
func (a *DtcMonitorTcpAPIService) DtcmonitortcpReferenceGetExecute(r DtcMonitorTcpAPIDtcmonitortcpReferenceGetRequest) (*GetDtcMonitorTcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcMonitorTcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorTcpAPIService.DtcmonitortcpReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcMonitorTcpAPI
	reference      string
	dtcMonitorTcp  *DtcMonitorTcp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest) DtcMonitorTcp(dtcMonitorTcp DtcMonitorTcp) DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest {
	r.dtcMonitorTcp = &dtcMonitorTcp
	return r
}

// Enter the field names followed by comma
func (r DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest) ReturnFields(returnFields string) DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest) ReturnFields2(returnFields2 string) DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest) Execute() (*UpdateDtcMonitorTcpResponse, *http.Response, error) {
	return r.ApiService.DtcmonitortcpReferencePutExecute(r)
}

/*
DtcmonitortcpReferencePut Update a dtc:monitor:tcp object

Updates a specific dtc:monitor:tcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:tcp object
	@return DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest
*/
func (a *DtcMonitorTcpAPIService) DtcmonitortcpReferencePut(ctx context.Context, reference string) DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest {
	return DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcMonitorTcpResponse
func (a *DtcMonitorTcpAPIService) DtcmonitortcpReferencePutExecute(r DtcMonitorTcpAPIDtcmonitortcpReferencePutRequest) (*UpdateDtcMonitorTcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcMonitorTcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorTcpAPIService.DtcmonitortcpReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorTcp == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorTcp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorTcp != nil {
		if r.dtcMonitorTcp.Extattrs == nil {
			r.dtcMonitorTcp.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorTcp.Extattrs)[k]; !ok {
				(*r.dtcMonitorTcp.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorTcp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
