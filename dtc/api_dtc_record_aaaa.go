/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcRecordAaaaAPI interface {
	/*
		DtcrecordaaaaGet Retrieve dtc:record:aaaa objects

		Returns a list of dtc:record:aaaa objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcRecordAaaaAPIDtcrecordaaaaGetRequest
	*/
	DtcrecordaaaaGet(ctx context.Context) DtcRecordAaaaAPIDtcrecordaaaaGetRequest

	// DtcrecordaaaaGetExecute executes the request
	//  @return ListDtcRecordAaaaResponse
	DtcrecordaaaaGetExecute(r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) (*ListDtcRecordAaaaResponse, *http.Response, error)
	/*
		DtcrecordaaaaPost Create a dtc:record:aaaa object

		Creates a new dtc:record:aaaa object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcRecordAaaaAPIDtcrecordaaaaPostRequest
	*/
	DtcrecordaaaaPost(ctx context.Context) DtcRecordAaaaAPIDtcrecordaaaaPostRequest

	// DtcrecordaaaaPostExecute executes the request
	//  @return CreateDtcRecordAaaaResponse
	DtcrecordaaaaPostExecute(r DtcRecordAaaaAPIDtcrecordaaaaPostRequest) (*CreateDtcRecordAaaaResponse, *http.Response, error)
	/*
		DtcrecordaaaaReferenceDelete Delete a dtc:record:aaaa object

		Deletes a specific dtc:record:aaaa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:record:aaaa object
		@return DtcRecordAaaaAPIDtcrecordaaaaReferenceDeleteRequest
	*/
	DtcrecordaaaaReferenceDelete(ctx context.Context, reference string) DtcRecordAaaaAPIDtcrecordaaaaReferenceDeleteRequest

	// DtcrecordaaaaReferenceDeleteExecute executes the request
	DtcrecordaaaaReferenceDeleteExecute(r DtcRecordAaaaAPIDtcrecordaaaaReferenceDeleteRequest) (*http.Response, error)
	/*
		DtcrecordaaaaReferenceGet Get a specific dtc:record:aaaa object

		Returns a specific dtc:record:aaaa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:record:aaaa object
		@return DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest
	*/
	DtcrecordaaaaReferenceGet(ctx context.Context, reference string) DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest

	// DtcrecordaaaaReferenceGetExecute executes the request
	//  @return GetDtcRecordAaaaResponse
	DtcrecordaaaaReferenceGetExecute(r DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest) (*GetDtcRecordAaaaResponse, *http.Response, error)
	/*
		DtcrecordaaaaReferencePut Update a dtc:record:aaaa object

		Updates a specific dtc:record:aaaa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:record:aaaa object
		@return DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest
	*/
	DtcrecordaaaaReferencePut(ctx context.Context, reference string) DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest

	// DtcrecordaaaaReferencePutExecute executes the request
	//  @return UpdateDtcRecordAaaaResponse
	DtcrecordaaaaReferencePutExecute(r DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest) (*UpdateDtcRecordAaaaResponse, *http.Response, error)
}

// DtcRecordAaaaAPIService DtcRecordAaaaAPI service
type DtcRecordAaaaAPIService internal.Service

type DtcRecordAaaaAPIDtcrecordaaaaGetRequest struct {
	ctx            context.Context
	ApiService     DtcRecordAaaaAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) ReturnFields(returnFields string) DtcRecordAaaaAPIDtcrecordaaaaGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) ReturnFields2(returnFields2 string) DtcRecordAaaaAPIDtcrecordaaaaGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) MaxResults(maxResults int32) DtcRecordAaaaAPIDtcrecordaaaaGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) ReturnAsObject(returnAsObject int32) DtcRecordAaaaAPIDtcrecordaaaaGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) Paging(paging int32) DtcRecordAaaaAPIDtcrecordaaaaGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) PageId(pageId string) DtcRecordAaaaAPIDtcrecordaaaaGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) Filters(filters map[string]interface{}) DtcRecordAaaaAPIDtcrecordaaaaGetRequest {
	r.filters = &filters
	return r
}

func (r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcRecordAaaaAPIDtcrecordaaaaGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) Execute() (*ListDtcRecordAaaaResponse, *http.Response, error) {
	return r.ApiService.DtcrecordaaaaGetExecute(r)
}

/*
DtcrecordaaaaGet Retrieve dtc:record:aaaa objects

Returns a list of dtc:record:aaaa objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcRecordAaaaAPIDtcrecordaaaaGetRequest
*/
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaGet(ctx context.Context) DtcRecordAaaaAPIDtcrecordaaaaGetRequest {
	return DtcRecordAaaaAPIDtcrecordaaaaGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcRecordAaaaResponse
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaGetExecute(r DtcRecordAaaaAPIDtcrecordaaaaGetRequest) (*ListDtcRecordAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcRecordAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordAaaaAPIService.DtcrecordaaaaGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:aaaa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcRecordAaaaAPIDtcrecordaaaaPostRequest struct {
	ctx            context.Context
	ApiService     DtcRecordAaaaAPI
	dtcRecordAaaa  *DtcRecordAaaa
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcRecordAaaaAPIDtcrecordaaaaPostRequest) DtcRecordAaaa(dtcRecordAaaa DtcRecordAaaa) DtcRecordAaaaAPIDtcrecordaaaaPostRequest {
	r.dtcRecordAaaa = &dtcRecordAaaa
	return r
}

// Enter the field names followed by comma
func (r DtcRecordAaaaAPIDtcrecordaaaaPostRequest) ReturnFields(returnFields string) DtcRecordAaaaAPIDtcrecordaaaaPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcRecordAaaaAPIDtcrecordaaaaPostRequest) ReturnFields2(returnFields2 string) DtcRecordAaaaAPIDtcrecordaaaaPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcRecordAaaaAPIDtcrecordaaaaPostRequest) ReturnAsObject(returnAsObject int32) DtcRecordAaaaAPIDtcrecordaaaaPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcRecordAaaaAPIDtcrecordaaaaPostRequest) Execute() (*CreateDtcRecordAaaaResponse, *http.Response, error) {
	return r.ApiService.DtcrecordaaaaPostExecute(r)
}

/*
DtcrecordaaaaPost Create a dtc:record:aaaa object

Creates a new dtc:record:aaaa object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcRecordAaaaAPIDtcrecordaaaaPostRequest
*/
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaPost(ctx context.Context) DtcRecordAaaaAPIDtcrecordaaaaPostRequest {
	return DtcRecordAaaaAPIDtcrecordaaaaPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcRecordAaaaResponse
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaPostExecute(r DtcRecordAaaaAPIDtcrecordaaaaPostRequest) (*CreateDtcRecordAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcRecordAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordAaaaAPIService.DtcrecordaaaaPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:aaaa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcRecordAaaa == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcRecordAaaa is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dtcRecordAaaa
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcRecordAaaaAPIDtcrecordaaaaReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcRecordAaaaAPI
	reference  string
}

func (r DtcRecordAaaaAPIDtcrecordaaaaReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DtcrecordaaaaReferenceDeleteExecute(r)
}

/*
DtcrecordaaaaReferenceDelete Delete a dtc:record:aaaa object

Deletes a specific dtc:record:aaaa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:record:aaaa object
	@return DtcRecordAaaaAPIDtcrecordaaaaReferenceDeleteRequest
*/
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaReferenceDelete(ctx context.Context, reference string) DtcRecordAaaaAPIDtcrecordaaaaReferenceDeleteRequest {
	return DtcRecordAaaaAPIDtcrecordaaaaReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaReferenceDeleteExecute(r DtcRecordAaaaAPIDtcrecordaaaaReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordAaaaAPIService.DtcrecordaaaaReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:aaaa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcRecordAaaaAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest) ReturnFields(returnFields string) DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest) ReturnFields2(returnFields2 string) DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest) Execute() (*GetDtcRecordAaaaResponse, *http.Response, error) {
	return r.ApiService.DtcrecordaaaaReferenceGetExecute(r)
}

/*
DtcrecordaaaaReferenceGet Get a specific dtc:record:aaaa object

Returns a specific dtc:record:aaaa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:record:aaaa object
	@return DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest
*/
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaReferenceGet(ctx context.Context, reference string) DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest {
	return DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcRecordAaaaResponse
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaReferenceGetExecute(r DtcRecordAaaaAPIDtcrecordaaaaReferenceGetRequest) (*GetDtcRecordAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcRecordAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordAaaaAPIService.DtcrecordaaaaReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:aaaa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcRecordAaaaAPI
	reference      string
	dtcRecordAaaa  *DtcRecordAaaa
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest) DtcRecordAaaa(dtcRecordAaaa DtcRecordAaaa) DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest {
	r.dtcRecordAaaa = &dtcRecordAaaa
	return r
}

// Enter the field names followed by comma
func (r DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest) ReturnFields(returnFields string) DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest) ReturnFields2(returnFields2 string) DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest) Execute() (*UpdateDtcRecordAaaaResponse, *http.Response, error) {
	return r.ApiService.DtcrecordaaaaReferencePutExecute(r)
}

/*
DtcrecordaaaaReferencePut Update a dtc:record:aaaa object

Updates a specific dtc:record:aaaa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:record:aaaa object
	@return DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest
*/
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaReferencePut(ctx context.Context, reference string) DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest {
	return DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcRecordAaaaResponse
func (a *DtcRecordAaaaAPIService) DtcrecordaaaaReferencePutExecute(r DtcRecordAaaaAPIDtcrecordaaaaReferencePutRequest) (*UpdateDtcRecordAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcRecordAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordAaaaAPIService.DtcrecordaaaaReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:aaaa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcRecordAaaa == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcRecordAaaa is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dtcRecordAaaa
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
