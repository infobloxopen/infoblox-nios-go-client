/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcRecordNaptrAPI interface {
	/*
		DtcrecordnaptrGet Retrieve dtc:record:naptr objects

		Returns a list of dtc:record:naptr objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcRecordNaptrAPIDtcrecordnaptrGetRequest
	*/
	DtcrecordnaptrGet(ctx context.Context) DtcRecordNaptrAPIDtcrecordnaptrGetRequest

	// DtcrecordnaptrGetExecute executes the request
	//  @return ListDtcRecordNaptrResponse
	DtcrecordnaptrGetExecute(r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) (*ListDtcRecordNaptrResponse, *http.Response, error)
	/*
		DtcrecordnaptrPost Create a dtc:record:naptr object

		Creates a new dtc:record:naptr object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcRecordNaptrAPIDtcrecordnaptrPostRequest
	*/
	DtcrecordnaptrPost(ctx context.Context) DtcRecordNaptrAPIDtcrecordnaptrPostRequest

	// DtcrecordnaptrPostExecute executes the request
	//  @return CreateDtcRecordNaptrResponse
	DtcrecordnaptrPostExecute(r DtcRecordNaptrAPIDtcrecordnaptrPostRequest) (*CreateDtcRecordNaptrResponse, *http.Response, error)
	/*
		DtcrecordnaptrReferenceDelete Delete a dtc:record:naptr object

		Deletes a specific dtc:record:naptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:record:naptr object
		@return DtcRecordNaptrAPIDtcrecordnaptrReferenceDeleteRequest
	*/
	DtcrecordnaptrReferenceDelete(ctx context.Context, reference string) DtcRecordNaptrAPIDtcrecordnaptrReferenceDeleteRequest

	// DtcrecordnaptrReferenceDeleteExecute executes the request
	DtcrecordnaptrReferenceDeleteExecute(r DtcRecordNaptrAPIDtcrecordnaptrReferenceDeleteRequest) (*http.Response, error)
	/*
		DtcrecordnaptrReferenceGet Get a specific dtc:record:naptr object

		Returns a specific dtc:record:naptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:record:naptr object
		@return DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest
	*/
	DtcrecordnaptrReferenceGet(ctx context.Context, reference string) DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest

	// DtcrecordnaptrReferenceGetExecute executes the request
	//  @return GetDtcRecordNaptrResponse
	DtcrecordnaptrReferenceGetExecute(r DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest) (*GetDtcRecordNaptrResponse, *http.Response, error)
	/*
		DtcrecordnaptrReferencePut Update a dtc:record:naptr object

		Updates a specific dtc:record:naptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:record:naptr object
		@return DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest
	*/
	DtcrecordnaptrReferencePut(ctx context.Context, reference string) DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest

	// DtcrecordnaptrReferencePutExecute executes the request
	//  @return UpdateDtcRecordNaptrResponse
	DtcrecordnaptrReferencePutExecute(r DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest) (*UpdateDtcRecordNaptrResponse, *http.Response, error)
}

// DtcRecordNaptrAPIService DtcRecordNaptrAPI service
type DtcRecordNaptrAPIService internal.Service

type DtcRecordNaptrAPIDtcrecordnaptrGetRequest struct {
	ctx            context.Context
	ApiService     DtcRecordNaptrAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) ReturnFields(returnFields string) DtcRecordNaptrAPIDtcrecordnaptrGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) ReturnFields2(returnFields2 string) DtcRecordNaptrAPIDtcrecordnaptrGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) MaxResults(maxResults int32) DtcRecordNaptrAPIDtcrecordnaptrGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) ReturnAsObject(returnAsObject int32) DtcRecordNaptrAPIDtcrecordnaptrGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) Paging(paging int32) DtcRecordNaptrAPIDtcrecordnaptrGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) PageId(pageId string) DtcRecordNaptrAPIDtcrecordnaptrGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) Filters(filters map[string]interface{}) DtcRecordNaptrAPIDtcrecordnaptrGetRequest {
	r.filters = &filters
	return r
}

func (r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcRecordNaptrAPIDtcrecordnaptrGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) Execute() (*ListDtcRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.DtcrecordnaptrGetExecute(r)
}

/*
DtcrecordnaptrGet Retrieve dtc:record:naptr objects

Returns a list of dtc:record:naptr objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcRecordNaptrAPIDtcrecordnaptrGetRequest
*/
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrGet(ctx context.Context) DtcRecordNaptrAPIDtcrecordnaptrGetRequest {
	return DtcRecordNaptrAPIDtcrecordnaptrGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcRecordNaptrResponse
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrGetExecute(r DtcRecordNaptrAPIDtcrecordnaptrGetRequest) (*ListDtcRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordNaptrAPIService.DtcrecordnaptrGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcRecordNaptrAPIDtcrecordnaptrPostRequest struct {
	ctx            context.Context
	ApiService     DtcRecordNaptrAPI
	dtcRecordNaptr *DtcRecordNaptr
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcRecordNaptrAPIDtcrecordnaptrPostRequest) DtcRecordNaptr(dtcRecordNaptr DtcRecordNaptr) DtcRecordNaptrAPIDtcrecordnaptrPostRequest {
	r.dtcRecordNaptr = &dtcRecordNaptr
	return r
}

// Enter the field names followed by comma
func (r DtcRecordNaptrAPIDtcrecordnaptrPostRequest) ReturnFields(returnFields string) DtcRecordNaptrAPIDtcrecordnaptrPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcRecordNaptrAPIDtcrecordnaptrPostRequest) ReturnFields2(returnFields2 string) DtcRecordNaptrAPIDtcrecordnaptrPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcRecordNaptrAPIDtcrecordnaptrPostRequest) ReturnAsObject(returnAsObject int32) DtcRecordNaptrAPIDtcrecordnaptrPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcRecordNaptrAPIDtcrecordnaptrPostRequest) Execute() (*CreateDtcRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.DtcrecordnaptrPostExecute(r)
}

/*
DtcrecordnaptrPost Create a dtc:record:naptr object

Creates a new dtc:record:naptr object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcRecordNaptrAPIDtcrecordnaptrPostRequest
*/
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrPost(ctx context.Context) DtcRecordNaptrAPIDtcrecordnaptrPostRequest {
	return DtcRecordNaptrAPIDtcrecordnaptrPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcRecordNaptrResponse
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrPostExecute(r DtcRecordNaptrAPIDtcrecordnaptrPostRequest) (*CreateDtcRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordNaptrAPIService.DtcrecordnaptrPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcRecordNaptr == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcRecordNaptr is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dtcRecordNaptr
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcRecordNaptrAPIDtcrecordnaptrReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcRecordNaptrAPI
	reference  string
}

func (r DtcRecordNaptrAPIDtcrecordnaptrReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DtcrecordnaptrReferenceDeleteExecute(r)
}

/*
DtcrecordnaptrReferenceDelete Delete a dtc:record:naptr object

Deletes a specific dtc:record:naptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:record:naptr object
	@return DtcRecordNaptrAPIDtcrecordnaptrReferenceDeleteRequest
*/
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrReferenceDelete(ctx context.Context, reference string) DtcRecordNaptrAPIDtcrecordnaptrReferenceDeleteRequest {
	return DtcRecordNaptrAPIDtcrecordnaptrReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrReferenceDeleteExecute(r DtcRecordNaptrAPIDtcrecordnaptrReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordNaptrAPIService.DtcrecordnaptrReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcRecordNaptrAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest) ReturnFields(returnFields string) DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest) ReturnFields2(returnFields2 string) DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest) Execute() (*GetDtcRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.DtcrecordnaptrReferenceGetExecute(r)
}

/*
DtcrecordnaptrReferenceGet Get a specific dtc:record:naptr object

Returns a specific dtc:record:naptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:record:naptr object
	@return DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest
*/
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrReferenceGet(ctx context.Context, reference string) DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest {
	return DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcRecordNaptrResponse
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrReferenceGetExecute(r DtcRecordNaptrAPIDtcrecordnaptrReferenceGetRequest) (*GetDtcRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordNaptrAPIService.DtcrecordnaptrReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcRecordNaptrAPI
	reference      string
	dtcRecordNaptr *DtcRecordNaptr
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest) DtcRecordNaptr(dtcRecordNaptr DtcRecordNaptr) DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest {
	r.dtcRecordNaptr = &dtcRecordNaptr
	return r
}

// Enter the field names followed by comma
func (r DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest) ReturnFields(returnFields string) DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest) ReturnFields2(returnFields2 string) DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest) Execute() (*UpdateDtcRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.DtcrecordnaptrReferencePutExecute(r)
}

/*
DtcrecordnaptrReferencePut Update a dtc:record:naptr object

Updates a specific dtc:record:naptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:record:naptr object
	@return DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest
*/
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrReferencePut(ctx context.Context, reference string) DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest {
	return DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcRecordNaptrResponse
func (a *DtcRecordNaptrAPIService) DtcrecordnaptrReferencePutExecute(r DtcRecordNaptrAPIDtcrecordnaptrReferencePutRequest) (*UpdateDtcRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcRecordNaptrAPIService.DtcrecordnaptrReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcRecordNaptr == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcRecordNaptr is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dtcRecordNaptr
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
