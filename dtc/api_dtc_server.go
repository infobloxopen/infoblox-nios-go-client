/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcServerAPI interface {
	/*
		DtcserverGet Retrieve dtc:server objects

		Returns a list of dtc:server objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcServerAPIDtcserverGetRequest
	*/
	DtcserverGet(ctx context.Context) DtcServerAPIDtcserverGetRequest

	// DtcserverGetExecute executes the request
	//  @return ListDtcServerResponse
	DtcserverGetExecute(r DtcServerAPIDtcserverGetRequest) (*ListDtcServerResponse, *http.Response, error)
	/*
		DtcserverPost Create a dtc:server object

		Creates a new dtc:server object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcServerAPIDtcserverPostRequest
	*/
	DtcserverPost(ctx context.Context) DtcServerAPIDtcserverPostRequest

	// DtcserverPostExecute executes the request
	//  @return CreateDtcServerResponse
	DtcserverPostExecute(r DtcServerAPIDtcserverPostRequest) (*CreateDtcServerResponse, *http.Response, error)
	/*
		DtcserverReferenceDelete Delete a dtc:server object

		Deletes a specific dtc:server object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:server object
		@return DtcServerAPIDtcserverReferenceDeleteRequest
	*/
	DtcserverReferenceDelete(ctx context.Context, reference string) DtcServerAPIDtcserverReferenceDeleteRequest

	// DtcserverReferenceDeleteExecute executes the request
	DtcserverReferenceDeleteExecute(r DtcServerAPIDtcserverReferenceDeleteRequest) (*http.Response, error)
	/*
		DtcserverReferenceGet Get a specific dtc:server object

		Returns a specific dtc:server object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:server object
		@return DtcServerAPIDtcserverReferenceGetRequest
	*/
	DtcserverReferenceGet(ctx context.Context, reference string) DtcServerAPIDtcserverReferenceGetRequest

	// DtcserverReferenceGetExecute executes the request
	//  @return GetDtcServerResponse
	DtcserverReferenceGetExecute(r DtcServerAPIDtcserverReferenceGetRequest) (*GetDtcServerResponse, *http.Response, error)
	/*
		DtcserverReferencePut Update a dtc:server object

		Updates a specific dtc:server object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:server object
		@return DtcServerAPIDtcserverReferencePutRequest
	*/
	DtcserverReferencePut(ctx context.Context, reference string) DtcServerAPIDtcserverReferencePutRequest

	// DtcserverReferencePutExecute executes the request
	//  @return UpdateDtcServerResponse
	DtcserverReferencePutExecute(r DtcServerAPIDtcserverReferencePutRequest) (*UpdateDtcServerResponse, *http.Response, error)
}

// DtcServerAPIService DtcServerAPI service
type DtcServerAPIService internal.Service

type DtcServerAPIDtcserverGetRequest struct {
	ctx            context.Context
	ApiService     DtcServerAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcServerAPIDtcserverGetRequest) ReturnFields(returnFields string) DtcServerAPIDtcserverGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcServerAPIDtcserverGetRequest) ReturnFields2(returnFields2 string) DtcServerAPIDtcserverGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcServerAPIDtcserverGetRequest) MaxResults(maxResults int32) DtcServerAPIDtcserverGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcServerAPIDtcserverGetRequest) ReturnAsObject(returnAsObject int32) DtcServerAPIDtcserverGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcServerAPIDtcserverGetRequest) Paging(paging int32) DtcServerAPIDtcserverGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcServerAPIDtcserverGetRequest) PageId(pageId string) DtcServerAPIDtcserverGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcServerAPIDtcserverGetRequest) Filters(filters map[string]interface{}) DtcServerAPIDtcserverGetRequest {
	r.filters = &filters
	return r
}

func (r DtcServerAPIDtcserverGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcServerAPIDtcserverGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcServerAPIDtcserverGetRequest) Execute() (*ListDtcServerResponse, *http.Response, error) {
	return r.ApiService.DtcserverGetExecute(r)
}

/*
DtcserverGet Retrieve dtc:server objects

Returns a list of dtc:server objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcServerAPIDtcserverGetRequest
*/
func (a *DtcServerAPIService) DtcserverGet(ctx context.Context) DtcServerAPIDtcserverGetRequest {
	return DtcServerAPIDtcserverGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcServerResponse
func (a *DtcServerAPIService) DtcserverGetExecute(r DtcServerAPIDtcserverGetRequest) (*ListDtcServerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcServerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcServerAPIService.DtcserverGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:server"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcServerAPIDtcserverPostRequest struct {
	ctx            context.Context
	ApiService     DtcServerAPI
	dtcServer      *DtcServer
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcServerAPIDtcserverPostRequest) DtcServer(dtcServer DtcServer) DtcServerAPIDtcserverPostRequest {
	r.dtcServer = &dtcServer
	return r
}

// Enter the field names followed by comma
func (r DtcServerAPIDtcserverPostRequest) ReturnFields(returnFields string) DtcServerAPIDtcserverPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcServerAPIDtcserverPostRequest) ReturnFields2(returnFields2 string) DtcServerAPIDtcserverPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcServerAPIDtcserverPostRequest) ReturnAsObject(returnAsObject int32) DtcServerAPIDtcserverPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcServerAPIDtcserverPostRequest) Execute() (*CreateDtcServerResponse, *http.Response, error) {
	return r.ApiService.DtcserverPostExecute(r)
}

/*
DtcserverPost Create a dtc:server object

Creates a new dtc:server object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcServerAPIDtcserverPostRequest
*/
func (a *DtcServerAPIService) DtcserverPost(ctx context.Context) DtcServerAPIDtcserverPostRequest {
	return DtcServerAPIDtcserverPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcServerResponse
func (a *DtcServerAPIService) DtcserverPostExecute(r DtcServerAPIDtcserverPostRequest) (*CreateDtcServerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcServerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcServerAPIService.DtcserverPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:server"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcServer == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcServer is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcServer != nil {
		if r.dtcServer.Extattrs == nil {
			r.dtcServer.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcServer.Extattrs)[k]; !ok {
				(*r.dtcServer.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcServer
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcServerAPIDtcserverReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcServerAPI
	reference  string
}

func (r DtcServerAPIDtcserverReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DtcserverReferenceDeleteExecute(r)
}

/*
DtcserverReferenceDelete Delete a dtc:server object

Deletes a specific dtc:server object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:server object
	@return DtcServerAPIDtcserverReferenceDeleteRequest
*/
func (a *DtcServerAPIService) DtcserverReferenceDelete(ctx context.Context, reference string) DtcServerAPIDtcserverReferenceDeleteRequest {
	return DtcServerAPIDtcserverReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcServerAPIService) DtcserverReferenceDeleteExecute(r DtcServerAPIDtcserverReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcServerAPIService.DtcserverReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:server/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcServerAPIDtcserverReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcServerAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcServerAPIDtcserverReferenceGetRequest) ReturnFields(returnFields string) DtcServerAPIDtcserverReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcServerAPIDtcserverReferenceGetRequest) ReturnFields2(returnFields2 string) DtcServerAPIDtcserverReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcServerAPIDtcserverReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcServerAPIDtcserverReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcServerAPIDtcserverReferenceGetRequest) Execute() (*GetDtcServerResponse, *http.Response, error) {
	return r.ApiService.DtcserverReferenceGetExecute(r)
}

/*
DtcserverReferenceGet Get a specific dtc:server object

Returns a specific dtc:server object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:server object
	@return DtcServerAPIDtcserverReferenceGetRequest
*/
func (a *DtcServerAPIService) DtcserverReferenceGet(ctx context.Context, reference string) DtcServerAPIDtcserverReferenceGetRequest {
	return DtcServerAPIDtcserverReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcServerResponse
func (a *DtcServerAPIService) DtcserverReferenceGetExecute(r DtcServerAPIDtcserverReferenceGetRequest) (*GetDtcServerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcServerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcServerAPIService.DtcserverReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:server/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcServerAPIDtcserverReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcServerAPI
	reference      string
	dtcServer      *DtcServer
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcServerAPIDtcserverReferencePutRequest) DtcServer(dtcServer DtcServer) DtcServerAPIDtcserverReferencePutRequest {
	r.dtcServer = &dtcServer
	return r
}

// Enter the field names followed by comma
func (r DtcServerAPIDtcserverReferencePutRequest) ReturnFields(returnFields string) DtcServerAPIDtcserverReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcServerAPIDtcserverReferencePutRequest) ReturnFields2(returnFields2 string) DtcServerAPIDtcserverReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcServerAPIDtcserverReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcServerAPIDtcserverReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcServerAPIDtcserverReferencePutRequest) Execute() (*UpdateDtcServerResponse, *http.Response, error) {
	return r.ApiService.DtcserverReferencePutExecute(r)
}

/*
DtcserverReferencePut Update a dtc:server object

Updates a specific dtc:server object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:server object
	@return DtcServerAPIDtcserverReferencePutRequest
*/
func (a *DtcServerAPIService) DtcserverReferencePut(ctx context.Context, reference string) DtcServerAPIDtcserverReferencePutRequest {
	return DtcServerAPIDtcserverReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcServerResponse
func (a *DtcServerAPIService) DtcserverReferencePutExecute(r DtcServerAPIDtcserverReferencePutRequest) (*UpdateDtcServerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcServerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcServerAPIService.DtcserverReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:server/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcServer == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcServer is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcServer != nil {
		if r.dtcServer.Extattrs == nil {
			r.dtcServer.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcServer.Extattrs)[k]; !ok {
				(*r.dtcServer.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcServer
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
