/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcTopologyAPI interface {
	/*
		DtctopologyGet Retrieve dtc:topology objects

		Returns a list of dtc:topology objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcTopologyAPIDtctopologyGetRequest
	*/
	DtctopologyGet(ctx context.Context) DtcTopologyAPIDtctopologyGetRequest

	// DtctopologyGetExecute executes the request
	//  @return ListDtcTopologyResponse
	DtctopologyGetExecute(r DtcTopologyAPIDtctopologyGetRequest) (*ListDtcTopologyResponse, *http.Response, error)
	/*
		DtctopologyPost Create a dtc:topology object

		Creates a new dtc:topology object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcTopologyAPIDtctopologyPostRequest
	*/
	DtctopologyPost(ctx context.Context) DtcTopologyAPIDtctopologyPostRequest

	// DtctopologyPostExecute executes the request
	//  @return CreateDtcTopologyResponse
	DtctopologyPostExecute(r DtcTopologyAPIDtctopologyPostRequest) (*CreateDtcTopologyResponse, *http.Response, error)
	/*
		DtctopologyReferenceDelete Delete a dtc:topology object

		Deletes a specific dtc:topology object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:topology object
		@return DtcTopologyAPIDtctopologyReferenceDeleteRequest
	*/
	DtctopologyReferenceDelete(ctx context.Context, reference string) DtcTopologyAPIDtctopologyReferenceDeleteRequest

	// DtctopologyReferenceDeleteExecute executes the request
	DtctopologyReferenceDeleteExecute(r DtcTopologyAPIDtctopologyReferenceDeleteRequest) (*http.Response, error)
	/*
		DtctopologyReferenceGet Get a specific dtc:topology object

		Returns a specific dtc:topology object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:topology object
		@return DtcTopologyAPIDtctopologyReferenceGetRequest
	*/
	DtctopologyReferenceGet(ctx context.Context, reference string) DtcTopologyAPIDtctopologyReferenceGetRequest

	// DtctopologyReferenceGetExecute executes the request
	//  @return GetDtcTopologyResponse
	DtctopologyReferenceGetExecute(r DtcTopologyAPIDtctopologyReferenceGetRequest) (*GetDtcTopologyResponse, *http.Response, error)
	/*
		DtctopologyReferencePut Update a dtc:topology object

		Updates a specific dtc:topology object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:topology object
		@return DtcTopologyAPIDtctopologyReferencePutRequest
	*/
	DtctopologyReferencePut(ctx context.Context, reference string) DtcTopologyAPIDtctopologyReferencePutRequest

	// DtctopologyReferencePutExecute executes the request
	//  @return UpdateDtcTopologyResponse
	DtctopologyReferencePutExecute(r DtcTopologyAPIDtctopologyReferencePutRequest) (*UpdateDtcTopologyResponse, *http.Response, error)
}

// DtcTopologyAPIService DtcTopologyAPI service
type DtcTopologyAPIService internal.Service

type DtcTopologyAPIDtctopologyGetRequest struct {
	ctx            context.Context
	ApiService     DtcTopologyAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcTopologyAPIDtctopologyGetRequest) ReturnFields(returnFields string) DtcTopologyAPIDtctopologyGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcTopologyAPIDtctopologyGetRequest) ReturnFields2(returnFields2 string) DtcTopologyAPIDtctopologyGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcTopologyAPIDtctopologyGetRequest) MaxResults(maxResults int32) DtcTopologyAPIDtctopologyGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcTopologyAPIDtctopologyGetRequest) ReturnAsObject(returnAsObject int32) DtcTopologyAPIDtctopologyGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcTopologyAPIDtctopologyGetRequest) Paging(paging int32) DtcTopologyAPIDtctopologyGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcTopologyAPIDtctopologyGetRequest) PageId(pageId string) DtcTopologyAPIDtctopologyGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcTopologyAPIDtctopologyGetRequest) Filters(filters map[string]interface{}) DtcTopologyAPIDtctopologyGetRequest {
	r.filters = &filters
	return r
}

func (r DtcTopologyAPIDtctopologyGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcTopologyAPIDtctopologyGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcTopologyAPIDtctopologyGetRequest) Execute() (*ListDtcTopologyResponse, *http.Response, error) {
	return r.ApiService.DtctopologyGetExecute(r)
}

/*
DtctopologyGet Retrieve dtc:topology objects

Returns a list of dtc:topology objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcTopologyAPIDtctopologyGetRequest
*/
func (a *DtcTopologyAPIService) DtctopologyGet(ctx context.Context) DtcTopologyAPIDtctopologyGetRequest {
	return DtcTopologyAPIDtctopologyGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcTopologyResponse
func (a *DtcTopologyAPIService) DtctopologyGetExecute(r DtcTopologyAPIDtctopologyGetRequest) (*ListDtcTopologyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcTopologyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcTopologyAPIService.DtctopologyGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:topology"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcTopologyAPIDtctopologyPostRequest struct {
	ctx            context.Context
	ApiService     DtcTopologyAPI
	dtcTopology    *DtcTopology
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcTopologyAPIDtctopologyPostRequest) DtcTopology(dtcTopology DtcTopology) DtcTopologyAPIDtctopologyPostRequest {
	r.dtcTopology = &dtcTopology
	return r
}

// Enter the field names followed by comma
func (r DtcTopologyAPIDtctopologyPostRequest) ReturnFields(returnFields string) DtcTopologyAPIDtctopologyPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcTopologyAPIDtctopologyPostRequest) ReturnFields2(returnFields2 string) DtcTopologyAPIDtctopologyPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcTopologyAPIDtctopologyPostRequest) ReturnAsObject(returnAsObject int32) DtcTopologyAPIDtctopologyPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcTopologyAPIDtctopologyPostRequest) Execute() (*CreateDtcTopologyResponse, *http.Response, error) {
	return r.ApiService.DtctopologyPostExecute(r)
}

/*
DtctopologyPost Create a dtc:topology object

Creates a new dtc:topology object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcTopologyAPIDtctopologyPostRequest
*/
func (a *DtcTopologyAPIService) DtctopologyPost(ctx context.Context) DtcTopologyAPIDtctopologyPostRequest {
	return DtcTopologyAPIDtctopologyPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcTopologyResponse
func (a *DtcTopologyAPIService) DtctopologyPostExecute(r DtcTopologyAPIDtctopologyPostRequest) (*CreateDtcTopologyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcTopologyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcTopologyAPIService.DtctopologyPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:topology"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcTopology == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcTopology is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcTopology != nil {
		if r.dtcTopology.Extattrs == nil {
			r.dtcTopology.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcTopology.Extattrs)[k]; !ok {
				(*r.dtcTopology.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcTopology
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcTopologyAPIDtctopologyReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcTopologyAPI
	reference  string
}

func (r DtcTopologyAPIDtctopologyReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DtctopologyReferenceDeleteExecute(r)
}

/*
DtctopologyReferenceDelete Delete a dtc:topology object

Deletes a specific dtc:topology object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:topology object
	@return DtcTopologyAPIDtctopologyReferenceDeleteRequest
*/
func (a *DtcTopologyAPIService) DtctopologyReferenceDelete(ctx context.Context, reference string) DtcTopologyAPIDtctopologyReferenceDeleteRequest {
	return DtcTopologyAPIDtctopologyReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcTopologyAPIService) DtctopologyReferenceDeleteExecute(r DtcTopologyAPIDtctopologyReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcTopologyAPIService.DtctopologyReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:topology/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcTopologyAPIDtctopologyReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcTopologyAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcTopologyAPIDtctopologyReferenceGetRequest) ReturnFields(returnFields string) DtcTopologyAPIDtctopologyReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcTopologyAPIDtctopologyReferenceGetRequest) ReturnFields2(returnFields2 string) DtcTopologyAPIDtctopologyReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcTopologyAPIDtctopologyReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcTopologyAPIDtctopologyReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcTopologyAPIDtctopologyReferenceGetRequest) Execute() (*GetDtcTopologyResponse, *http.Response, error) {
	return r.ApiService.DtctopologyReferenceGetExecute(r)
}

/*
DtctopologyReferenceGet Get a specific dtc:topology object

Returns a specific dtc:topology object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:topology object
	@return DtcTopologyAPIDtctopologyReferenceGetRequest
*/
func (a *DtcTopologyAPIService) DtctopologyReferenceGet(ctx context.Context, reference string) DtcTopologyAPIDtctopologyReferenceGetRequest {
	return DtcTopologyAPIDtctopologyReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcTopologyResponse
func (a *DtcTopologyAPIService) DtctopologyReferenceGetExecute(r DtcTopologyAPIDtctopologyReferenceGetRequest) (*GetDtcTopologyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcTopologyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcTopologyAPIService.DtctopologyReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:topology/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcTopologyAPIDtctopologyReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcTopologyAPI
	reference      string
	dtcTopology    *DtcTopology
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcTopologyAPIDtctopologyReferencePutRequest) DtcTopology(dtcTopology DtcTopology) DtcTopologyAPIDtctopologyReferencePutRequest {
	r.dtcTopology = &dtcTopology
	return r
}

// Enter the field names followed by comma
func (r DtcTopologyAPIDtctopologyReferencePutRequest) ReturnFields(returnFields string) DtcTopologyAPIDtctopologyReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcTopologyAPIDtctopologyReferencePutRequest) ReturnFields2(returnFields2 string) DtcTopologyAPIDtctopologyReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcTopologyAPIDtctopologyReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcTopologyAPIDtctopologyReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcTopologyAPIDtctopologyReferencePutRequest) Execute() (*UpdateDtcTopologyResponse, *http.Response, error) {
	return r.ApiService.DtctopologyReferencePutExecute(r)
}

/*
DtctopologyReferencePut Update a dtc:topology object

Updates a specific dtc:topology object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:topology object
	@return DtcTopologyAPIDtctopologyReferencePutRequest
*/
func (a *DtcTopologyAPIService) DtctopologyReferencePut(ctx context.Context, reference string) DtcTopologyAPIDtctopologyReferencePutRequest {
	return DtcTopologyAPIDtctopologyReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcTopologyResponse
func (a *DtcTopologyAPIService) DtctopologyReferencePutExecute(r DtcTopologyAPIDtctopologyReferencePutRequest) (*UpdateDtcTopologyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcTopologyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcTopologyAPIService.DtctopologyReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:topology/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcTopology == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcTopology is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcTopology != nil {
		if r.dtcTopology.Extattrs == nil {
			r.dtcTopology.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcTopology.Extattrs)[k]; !ok {
				(*r.dtcTopology.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcTopology
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
