/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type ExtensibleattributedefAPI interface {
	/*
		Get Retrieve extensibleattributedef objects

		Returns a list of extensibleattributedef objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ExtensibleattributedefAPIGetRequest
	*/
	Get(ctx context.Context) ExtensibleattributedefAPIGetRequest

	// GetExecute executes the request
	//  @return ListExtensibleattributedefResponse
	GetExecute(r ExtensibleattributedefAPIGetRequest) (*ListExtensibleattributedefResponse, *http.Response, error)
	/*
		Post Create a extensibleattributedef object

		Creates a new extensibleattributedef object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ExtensibleattributedefAPIPostRequest
	*/
	Post(ctx context.Context) ExtensibleattributedefAPIPostRequest

	// PostExecute executes the request
	//  @return CreateExtensibleattributedefResponse
	PostExecute(r ExtensibleattributedefAPIPostRequest) (*CreateExtensibleattributedefResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a extensibleattributedef object

		Deletes a specific extensibleattributedef object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the extensibleattributedef object
		@return ExtensibleattributedefAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) ExtensibleattributedefAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r ExtensibleattributedefAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific extensibleattributedef object

		Returns a specific extensibleattributedef object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the extensibleattributedef object
		@return ExtensibleattributedefAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) ExtensibleattributedefAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetExtensibleattributedefResponse
	ReferenceGetExecute(r ExtensibleattributedefAPIReferenceGetRequest) (*GetExtensibleattributedefResponse, *http.Response, error)
	/*
		ReferencePut Update a extensibleattributedef object

		Updates a specific extensibleattributedef object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the extensibleattributedef object
		@return ExtensibleattributedefAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) ExtensibleattributedefAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateExtensibleattributedefResponse
	ReferencePutExecute(r ExtensibleattributedefAPIReferencePutRequest) (*UpdateExtensibleattributedefResponse, *http.Response, error)
}

// ExtensibleattributedefAPIService ExtensibleattributedefAPI service
type ExtensibleattributedefAPIService internal.Service

type ExtensibleattributedefAPIGetRequest struct {
	ctx            context.Context
	ApiService     ExtensibleattributedefAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r ExtensibleattributedefAPIGetRequest) ReturnFields(returnFields string) ExtensibleattributedefAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ExtensibleattributedefAPIGetRequest) ReturnFields2(returnFields2 string) ExtensibleattributedefAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r ExtensibleattributedefAPIGetRequest) MaxResults(maxResults int32) ExtensibleattributedefAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ExtensibleattributedefAPIGetRequest) ReturnAsObject(returnAsObject int32) ExtensibleattributedefAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ExtensibleattributedefAPIGetRequest) Paging(paging int32) ExtensibleattributedefAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ExtensibleattributedefAPIGetRequest) PageId(pageId string) ExtensibleattributedefAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r ExtensibleattributedefAPIGetRequest) Filters(filters map[string]interface{}) ExtensibleattributedefAPIGetRequest {
	r.filters = &filters
	return r
}

func (r ExtensibleattributedefAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) ExtensibleattributedefAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ExtensibleattributedefAPIGetRequest) Execute() (*ListExtensibleattributedefResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve extensibleattributedef objects

Returns a list of extensibleattributedef objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ExtensibleattributedefAPIGetRequest
*/
func (a *ExtensibleattributedefAPIService) Get(ctx context.Context) ExtensibleattributedefAPIGetRequest {
	return ExtensibleattributedefAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListExtensibleattributedefResponse
func (a *ExtensibleattributedefAPIService) GetExecute(r ExtensibleattributedefAPIGetRequest) (*ListExtensibleattributedefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListExtensibleattributedefResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ExtensibleattributedefAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/extensibleattributedef"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExtensibleattributedefAPIPostRequest struct {
	ctx                    context.Context
	ApiService             ExtensibleattributedefAPI
	extensibleattributedef *Extensibleattributedef
	returnFields           *string
	returnFields2          *string
	returnAsObject         *int32
}

// Object data to create
func (r ExtensibleattributedefAPIPostRequest) Extensibleattributedef(extensibleattributedef Extensibleattributedef) ExtensibleattributedefAPIPostRequest {
	r.extensibleattributedef = &extensibleattributedef
	return r
}

// Enter the field names followed by comma
func (r ExtensibleattributedefAPIPostRequest) ReturnFields(returnFields string) ExtensibleattributedefAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ExtensibleattributedefAPIPostRequest) ReturnFields2(returnFields2 string) ExtensibleattributedefAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ExtensibleattributedefAPIPostRequest) ReturnAsObject(returnAsObject int32) ExtensibleattributedefAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ExtensibleattributedefAPIPostRequest) Execute() (*CreateExtensibleattributedefResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a extensibleattributedef object

Creates a new extensibleattributedef object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ExtensibleattributedefAPIPostRequest
*/
func (a *ExtensibleattributedefAPIService) Post(ctx context.Context) ExtensibleattributedefAPIPostRequest {
	return ExtensibleattributedefAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateExtensibleattributedefResponse
func (a *ExtensibleattributedefAPIService) PostExecute(r ExtensibleattributedefAPIPostRequest) (*CreateExtensibleattributedefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateExtensibleattributedefResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ExtensibleattributedefAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/extensibleattributedef"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.extensibleattributedef == nil {
		return localVarReturnValue, nil, internal.ReportError("extensibleattributedef is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.extensibleattributedef
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExtensibleattributedefAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService ExtensibleattributedefAPI
	reference  string
}

func (r ExtensibleattributedefAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a extensibleattributedef object

Deletes a specific extensibleattributedef object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the extensibleattributedef object
	@return ExtensibleattributedefAPIReferenceDeleteRequest
*/
func (a *ExtensibleattributedefAPIService) ReferenceDelete(ctx context.Context, reference string) ExtensibleattributedefAPIReferenceDeleteRequest {
	return ExtensibleattributedefAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *ExtensibleattributedefAPIService) ReferenceDeleteExecute(r ExtensibleattributedefAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ExtensibleattributedefAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/extensibleattributedef/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ExtensibleattributedefAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     ExtensibleattributedefAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r ExtensibleattributedefAPIReferenceGetRequest) ReturnFields(returnFields string) ExtensibleattributedefAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ExtensibleattributedefAPIReferenceGetRequest) ReturnFields2(returnFields2 string) ExtensibleattributedefAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ExtensibleattributedefAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) ExtensibleattributedefAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ExtensibleattributedefAPIReferenceGetRequest) Execute() (*GetExtensibleattributedefResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific extensibleattributedef object

Returns a specific extensibleattributedef object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the extensibleattributedef object
	@return ExtensibleattributedefAPIReferenceGetRequest
*/
func (a *ExtensibleattributedefAPIService) ReferenceGet(ctx context.Context, reference string) ExtensibleattributedefAPIReferenceGetRequest {
	return ExtensibleattributedefAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetExtensibleattributedefResponse
func (a *ExtensibleattributedefAPIService) ReferenceGetExecute(r ExtensibleattributedefAPIReferenceGetRequest) (*GetExtensibleattributedefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetExtensibleattributedefResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ExtensibleattributedefAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/extensibleattributedef/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExtensibleattributedefAPIReferencePutRequest struct {
	ctx                    context.Context
	ApiService             ExtensibleattributedefAPI
	reference              string
	extensibleattributedef *Extensibleattributedef
	returnFields           *string
	returnFields2          *string
	returnAsObject         *int32
}

// Object data to update
func (r ExtensibleattributedefAPIReferencePutRequest) Extensibleattributedef(extensibleattributedef Extensibleattributedef) ExtensibleattributedefAPIReferencePutRequest {
	r.extensibleattributedef = &extensibleattributedef
	return r
}

// Enter the field names followed by comma
func (r ExtensibleattributedefAPIReferencePutRequest) ReturnFields(returnFields string) ExtensibleattributedefAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ExtensibleattributedefAPIReferencePutRequest) ReturnFields2(returnFields2 string) ExtensibleattributedefAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ExtensibleattributedefAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) ExtensibleattributedefAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ExtensibleattributedefAPIReferencePutRequest) Execute() (*UpdateExtensibleattributedefResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a extensibleattributedef object

Updates a specific extensibleattributedef object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the extensibleattributedef object
	@return ExtensibleattributedefAPIReferencePutRequest
*/
func (a *ExtensibleattributedefAPIService) ReferencePut(ctx context.Context, reference string) ExtensibleattributedefAPIReferencePutRequest {
	return ExtensibleattributedefAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateExtensibleattributedefResponse
func (a *ExtensibleattributedefAPIService) ReferencePutExecute(r ExtensibleattributedefAPIReferencePutRequest) (*UpdateExtensibleattributedefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateExtensibleattributedefResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ExtensibleattributedefAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/extensibleattributedef/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.extensibleattributedef == nil {
		return localVarReturnValue, nil, internal.ReportError("extensibleattributedef is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.extensibleattributedef
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
