/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type GridCloudapiAPI interface {
	/*
		GridcloudapiGet Retrieve grid:cloudapi objects

		Returns a list of grid:cloudapi objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridCloudapiAPIGridcloudapiGetRequest
	*/
	GridcloudapiGet(ctx context.Context) GridCloudapiAPIGridcloudapiGetRequest

	// GridcloudapiGetExecute executes the request
	//  @return ListGridCloudapiResponse
	GridcloudapiGetExecute(r GridCloudapiAPIGridcloudapiGetRequest) (*ListGridCloudapiResponse, *http.Response, error)
	/*
		GridcloudapiReferenceGet Get a specific grid:cloudapi object

		Returns a specific grid:cloudapi object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:cloudapi object
		@return GridCloudapiAPIGridcloudapiReferenceGetRequest
	*/
	GridcloudapiReferenceGet(ctx context.Context, reference string) GridCloudapiAPIGridcloudapiReferenceGetRequest

	// GridcloudapiReferenceGetExecute executes the request
	//  @return GetGridCloudapiResponse
	GridcloudapiReferenceGetExecute(r GridCloudapiAPIGridcloudapiReferenceGetRequest) (*GetGridCloudapiResponse, *http.Response, error)
	/*
		GridcloudapiReferencePut Update a grid:cloudapi object

		Updates a specific grid:cloudapi object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:cloudapi object
		@return GridCloudapiAPIGridcloudapiReferencePutRequest
	*/
	GridcloudapiReferencePut(ctx context.Context, reference string) GridCloudapiAPIGridcloudapiReferencePutRequest

	// GridcloudapiReferencePutExecute executes the request
	//  @return UpdateGridCloudapiResponse
	GridcloudapiReferencePutExecute(r GridCloudapiAPIGridcloudapiReferencePutRequest) (*UpdateGridCloudapiResponse, *http.Response, error)
}

// GridCloudapiAPIService GridCloudapiAPI service
type GridCloudapiAPIService internal.Service

type GridCloudapiAPIGridcloudapiGetRequest struct {
	ctx            context.Context
	ApiService     GridCloudapiAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r GridCloudapiAPIGridcloudapiGetRequest) ReturnFields(returnFields string) GridCloudapiAPIGridcloudapiGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridCloudapiAPIGridcloudapiGetRequest) ReturnFields2(returnFields2 string) GridCloudapiAPIGridcloudapiGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r GridCloudapiAPIGridcloudapiGetRequest) MaxResults(maxResults int32) GridCloudapiAPIGridcloudapiGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GridCloudapiAPIGridcloudapiGetRequest) ReturnAsObject(returnAsObject int32) GridCloudapiAPIGridcloudapiGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GridCloudapiAPIGridcloudapiGetRequest) Paging(paging int32) GridCloudapiAPIGridcloudapiGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GridCloudapiAPIGridcloudapiGetRequest) PageId(pageId string) GridCloudapiAPIGridcloudapiGetRequest {
	r.pageId = &pageId
	return r
}

func (r GridCloudapiAPIGridcloudapiGetRequest) Filters(filters map[string]interface{}) GridCloudapiAPIGridcloudapiGetRequest {
	r.filters = &filters
	return r
}

func (r GridCloudapiAPIGridcloudapiGetRequest) Extattrfilter(extattrfilter map[string]interface{}) GridCloudapiAPIGridcloudapiGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GridCloudapiAPIGridcloudapiGetRequest) Execute() (*ListGridCloudapiResponse, *http.Response, error) {
	return r.ApiService.GridcloudapiGetExecute(r)
}

/*
GridcloudapiGet Retrieve grid:cloudapi objects

Returns a list of grid:cloudapi objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridCloudapiAPIGridcloudapiGetRequest
*/
func (a *GridCloudapiAPIService) GridcloudapiGet(ctx context.Context) GridCloudapiAPIGridcloudapiGetRequest {
	return GridCloudapiAPIGridcloudapiGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGridCloudapiResponse
func (a *GridCloudapiAPIService) GridcloudapiGetExecute(r GridCloudapiAPIGridcloudapiGetRequest) (*ListGridCloudapiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGridCloudapiResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridCloudapiAPIService.GridcloudapiGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:cloudapi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridCloudapiAPIGridcloudapiReferenceGetRequest struct {
	ctx            context.Context
	ApiService     GridCloudapiAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r GridCloudapiAPIGridcloudapiReferenceGetRequest) ReturnFields(returnFields string) GridCloudapiAPIGridcloudapiReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridCloudapiAPIGridcloudapiReferenceGetRequest) ReturnFields2(returnFields2 string) GridCloudapiAPIGridcloudapiReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridCloudapiAPIGridcloudapiReferenceGetRequest) ReturnAsObject(returnAsObject int32) GridCloudapiAPIGridcloudapiReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridCloudapiAPIGridcloudapiReferenceGetRequest) Execute() (*GetGridCloudapiResponse, *http.Response, error) {
	return r.ApiService.GridcloudapiReferenceGetExecute(r)
}

/*
GridcloudapiReferenceGet Get a specific grid:cloudapi object

Returns a specific grid:cloudapi object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:cloudapi object
	@return GridCloudapiAPIGridcloudapiReferenceGetRequest
*/
func (a *GridCloudapiAPIService) GridcloudapiReferenceGet(ctx context.Context, reference string) GridCloudapiAPIGridcloudapiReferenceGetRequest {
	return GridCloudapiAPIGridcloudapiReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGridCloudapiResponse
func (a *GridCloudapiAPIService) GridcloudapiReferenceGetExecute(r GridCloudapiAPIGridcloudapiReferenceGetRequest) (*GetGridCloudapiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGridCloudapiResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridCloudapiAPIService.GridcloudapiReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:cloudapi/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridCloudapiAPIGridcloudapiReferencePutRequest struct {
	ctx            context.Context
	ApiService     GridCloudapiAPI
	reference      string
	gridCloudapi   *GridCloudapi
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r GridCloudapiAPIGridcloudapiReferencePutRequest) GridCloudapi(gridCloudapi GridCloudapi) GridCloudapiAPIGridcloudapiReferencePutRequest {
	r.gridCloudapi = &gridCloudapi
	return r
}

// Enter the field names followed by comma
func (r GridCloudapiAPIGridcloudapiReferencePutRequest) ReturnFields(returnFields string) GridCloudapiAPIGridcloudapiReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridCloudapiAPIGridcloudapiReferencePutRequest) ReturnFields2(returnFields2 string) GridCloudapiAPIGridcloudapiReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridCloudapiAPIGridcloudapiReferencePutRequest) ReturnAsObject(returnAsObject int32) GridCloudapiAPIGridcloudapiReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridCloudapiAPIGridcloudapiReferencePutRequest) Execute() (*UpdateGridCloudapiResponse, *http.Response, error) {
	return r.ApiService.GridcloudapiReferencePutExecute(r)
}

/*
GridcloudapiReferencePut Update a grid:cloudapi object

Updates a specific grid:cloudapi object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:cloudapi object
	@return GridCloudapiAPIGridcloudapiReferencePutRequest
*/
func (a *GridCloudapiAPIService) GridcloudapiReferencePut(ctx context.Context, reference string) GridCloudapiAPIGridcloudapiReferencePutRequest {
	return GridCloudapiAPIGridcloudapiReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateGridCloudapiResponse
func (a *GridCloudapiAPIService) GridcloudapiReferencePutExecute(r GridCloudapiAPIGridcloudapiReferencePutRequest) (*UpdateGridCloudapiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateGridCloudapiResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridCloudapiAPIService.GridcloudapiReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:cloudapi/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gridCloudapi == nil {
		return localVarReturnValue, nil, internal.ReportError("gridCloudapi is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gridCloudapi
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
