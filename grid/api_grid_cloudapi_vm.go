/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type GridCloudapiVmAPI interface {
	/*
		GridcloudapivmGet Retrieve grid:cloudapi:vm objects

		Returns a list of grid:cloudapi:vm objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridCloudapiVmAPIGridcloudapivmGetRequest
	*/
	GridcloudapivmGet(ctx context.Context) GridCloudapiVmAPIGridcloudapivmGetRequest

	// GridcloudapivmGetExecute executes the request
	//  @return ListGridCloudapiVmResponse
	GridcloudapivmGetExecute(r GridCloudapiVmAPIGridcloudapivmGetRequest) (*ListGridCloudapiVmResponse, *http.Response, error)
	/*
		GridcloudapivmReferenceGet Get a specific grid:cloudapi:vm object

		Returns a specific grid:cloudapi:vm object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:cloudapi:vm object
		@return GridCloudapiVmAPIGridcloudapivmReferenceGetRequest
	*/
	GridcloudapivmReferenceGet(ctx context.Context, reference string) GridCloudapiVmAPIGridcloudapivmReferenceGetRequest

	// GridcloudapivmReferenceGetExecute executes the request
	//  @return GetGridCloudapiVmResponse
	GridcloudapivmReferenceGetExecute(r GridCloudapiVmAPIGridcloudapivmReferenceGetRequest) (*GetGridCloudapiVmResponse, *http.Response, error)
	/*
		GridcloudapivmReferencePut Update a grid:cloudapi:vm object

		Updates a specific grid:cloudapi:vm object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:cloudapi:vm object
		@return GridCloudapiVmAPIGridcloudapivmReferencePutRequest
	*/
	GridcloudapivmReferencePut(ctx context.Context, reference string) GridCloudapiVmAPIGridcloudapivmReferencePutRequest

	// GridcloudapivmReferencePutExecute executes the request
	//  @return UpdateGridCloudapiVmResponse
	GridcloudapivmReferencePutExecute(r GridCloudapiVmAPIGridcloudapivmReferencePutRequest) (*UpdateGridCloudapiVmResponse, *http.Response, error)
}

// GridCloudapiVmAPIService GridCloudapiVmAPI service
type GridCloudapiVmAPIService internal.Service

type GridCloudapiVmAPIGridcloudapivmGetRequest struct {
	ctx            context.Context
	ApiService     GridCloudapiVmAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r GridCloudapiVmAPIGridcloudapivmGetRequest) ReturnFields(returnFields string) GridCloudapiVmAPIGridcloudapivmGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridCloudapiVmAPIGridcloudapivmGetRequest) ReturnFields2(returnFields2 string) GridCloudapiVmAPIGridcloudapivmGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r GridCloudapiVmAPIGridcloudapivmGetRequest) MaxResults(maxResults int32) GridCloudapiVmAPIGridcloudapivmGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GridCloudapiVmAPIGridcloudapivmGetRequest) ReturnAsObject(returnAsObject int32) GridCloudapiVmAPIGridcloudapivmGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GridCloudapiVmAPIGridcloudapivmGetRequest) Paging(paging int32) GridCloudapiVmAPIGridcloudapivmGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GridCloudapiVmAPIGridcloudapivmGetRequest) PageId(pageId string) GridCloudapiVmAPIGridcloudapivmGetRequest {
	r.pageId = &pageId
	return r
}

func (r GridCloudapiVmAPIGridcloudapivmGetRequest) Filters(filters map[string]interface{}) GridCloudapiVmAPIGridcloudapivmGetRequest {
	r.filters = &filters
	return r
}

func (r GridCloudapiVmAPIGridcloudapivmGetRequest) Extattrfilter(extattrfilter map[string]interface{}) GridCloudapiVmAPIGridcloudapivmGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GridCloudapiVmAPIGridcloudapivmGetRequest) Execute() (*ListGridCloudapiVmResponse, *http.Response, error) {
	return r.ApiService.GridcloudapivmGetExecute(r)
}

/*
GridcloudapivmGet Retrieve grid:cloudapi:vm objects

Returns a list of grid:cloudapi:vm objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridCloudapiVmAPIGridcloudapivmGetRequest
*/
func (a *GridCloudapiVmAPIService) GridcloudapivmGet(ctx context.Context) GridCloudapiVmAPIGridcloudapivmGetRequest {
	return GridCloudapiVmAPIGridcloudapivmGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGridCloudapiVmResponse
func (a *GridCloudapiVmAPIService) GridcloudapivmGetExecute(r GridCloudapiVmAPIGridcloudapivmGetRequest) (*ListGridCloudapiVmResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGridCloudapiVmResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridCloudapiVmAPIService.GridcloudapivmGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:cloudapi:vm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridCloudapiVmAPIGridcloudapivmReferenceGetRequest struct {
	ctx            context.Context
	ApiService     GridCloudapiVmAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r GridCloudapiVmAPIGridcloudapivmReferenceGetRequest) ReturnFields(returnFields string) GridCloudapiVmAPIGridcloudapivmReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridCloudapiVmAPIGridcloudapivmReferenceGetRequest) ReturnFields2(returnFields2 string) GridCloudapiVmAPIGridcloudapivmReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridCloudapiVmAPIGridcloudapivmReferenceGetRequest) ReturnAsObject(returnAsObject int32) GridCloudapiVmAPIGridcloudapivmReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridCloudapiVmAPIGridcloudapivmReferenceGetRequest) Execute() (*GetGridCloudapiVmResponse, *http.Response, error) {
	return r.ApiService.GridcloudapivmReferenceGetExecute(r)
}

/*
GridcloudapivmReferenceGet Get a specific grid:cloudapi:vm object

Returns a specific grid:cloudapi:vm object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:cloudapi:vm object
	@return GridCloudapiVmAPIGridcloudapivmReferenceGetRequest
*/
func (a *GridCloudapiVmAPIService) GridcloudapivmReferenceGet(ctx context.Context, reference string) GridCloudapiVmAPIGridcloudapivmReferenceGetRequest {
	return GridCloudapiVmAPIGridcloudapivmReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGridCloudapiVmResponse
func (a *GridCloudapiVmAPIService) GridcloudapivmReferenceGetExecute(r GridCloudapiVmAPIGridcloudapivmReferenceGetRequest) (*GetGridCloudapiVmResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGridCloudapiVmResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridCloudapiVmAPIService.GridcloudapivmReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:cloudapi:vm/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridCloudapiVmAPIGridcloudapivmReferencePutRequest struct {
	ctx            context.Context
	ApiService     GridCloudapiVmAPI
	reference      string
	gridCloudapiVm *GridCloudapiVm
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r GridCloudapiVmAPIGridcloudapivmReferencePutRequest) GridCloudapiVm(gridCloudapiVm GridCloudapiVm) GridCloudapiVmAPIGridcloudapivmReferencePutRequest {
	r.gridCloudapiVm = &gridCloudapiVm
	return r
}

// Enter the field names followed by comma
func (r GridCloudapiVmAPIGridcloudapivmReferencePutRequest) ReturnFields(returnFields string) GridCloudapiVmAPIGridcloudapivmReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridCloudapiVmAPIGridcloudapivmReferencePutRequest) ReturnFields2(returnFields2 string) GridCloudapiVmAPIGridcloudapivmReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridCloudapiVmAPIGridcloudapivmReferencePutRequest) ReturnAsObject(returnAsObject int32) GridCloudapiVmAPIGridcloudapivmReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridCloudapiVmAPIGridcloudapivmReferencePutRequest) Execute() (*UpdateGridCloudapiVmResponse, *http.Response, error) {
	return r.ApiService.GridcloudapivmReferencePutExecute(r)
}

/*
GridcloudapivmReferencePut Update a grid:cloudapi:vm object

Updates a specific grid:cloudapi:vm object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:cloudapi:vm object
	@return GridCloudapiVmAPIGridcloudapivmReferencePutRequest
*/
func (a *GridCloudapiVmAPIService) GridcloudapivmReferencePut(ctx context.Context, reference string) GridCloudapiVmAPIGridcloudapivmReferencePutRequest {
	return GridCloudapiVmAPIGridcloudapivmReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateGridCloudapiVmResponse
func (a *GridCloudapiVmAPIService) GridcloudapivmReferencePutExecute(r GridCloudapiVmAPIGridcloudapivmReferencePutRequest) (*UpdateGridCloudapiVmResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateGridCloudapiVmResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridCloudapiVmAPIService.GridcloudapivmReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:cloudapi:vm/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gridCloudapiVm == nil {
		return localVarReturnValue, nil, internal.ReportError("gridCloudapiVm is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.gridCloudapiVm != nil {
		if r.gridCloudapiVm.Extattrs == nil {
			r.gridCloudapiVm.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.gridCloudapiVm.Extattrs)[k]; !ok {
				(*r.gridCloudapiVm.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.gridCloudapiVm
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
