/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type GridCloudapiVmaddressAPI interface {
	/*
		GridcloudapivmaddressGet Retrieve grid:cloudapi:vmaddress objects

		Returns a list of grid:cloudapi:vmaddress objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest
	*/
	GridcloudapivmaddressGet(ctx context.Context) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest

	// GridcloudapivmaddressGetExecute executes the request
	//  @return ListGridCloudapiVmaddressResponse
	GridcloudapivmaddressGetExecute(r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) (*ListGridCloudapiVmaddressResponse, *http.Response, error)
	/*
		GridcloudapivmaddressReferenceGet Get a specific grid:cloudapi:vmaddress object

		Returns a specific grid:cloudapi:vmaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:cloudapi:vmaddress object
		@return GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest
	*/
	GridcloudapivmaddressReferenceGet(ctx context.Context, reference string) GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest

	// GridcloudapivmaddressReferenceGetExecute executes the request
	//  @return GetGridCloudapiVmaddressResponse
	GridcloudapivmaddressReferenceGetExecute(r GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest) (*GetGridCloudapiVmaddressResponse, *http.Response, error)
}

// GridCloudapiVmaddressAPIService GridCloudapiVmaddressAPI service
type GridCloudapiVmaddressAPIService internal.Service

type GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest struct {
	ctx            context.Context
	ApiService     GridCloudapiVmaddressAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) ReturnFields(returnFields string) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) ReturnFields2(returnFields2 string) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) MaxResults(maxResults int32) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) ReturnAsObject(returnAsObject int32) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) Paging(paging int32) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) PageId(pageId string) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest {
	r.pageId = &pageId
	return r
}

func (r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) Filters(filters map[string]interface{}) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest {
	r.filters = &filters
	return r
}

func (r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) Extattrfilter(extattrfilter map[string]interface{}) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) Execute() (*ListGridCloudapiVmaddressResponse, *http.Response, error) {
	return r.ApiService.GridcloudapivmaddressGetExecute(r)
}

/*
GridcloudapivmaddressGet Retrieve grid:cloudapi:vmaddress objects

Returns a list of grid:cloudapi:vmaddress objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest
*/
func (a *GridCloudapiVmaddressAPIService) GridcloudapivmaddressGet(ctx context.Context) GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest {
	return GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGridCloudapiVmaddressResponse
func (a *GridCloudapiVmaddressAPIService) GridcloudapivmaddressGetExecute(r GridCloudapiVmaddressAPIGridcloudapivmaddressGetRequest) (*ListGridCloudapiVmaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGridCloudapiVmaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridCloudapiVmaddressAPIService.GridcloudapivmaddressGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:cloudapi:vmaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest struct {
	ctx            context.Context
	ApiService     GridCloudapiVmaddressAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest) ReturnFields(returnFields string) GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest) ReturnFields2(returnFields2 string) GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest) ReturnAsObject(returnAsObject int32) GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest) Execute() (*GetGridCloudapiVmaddressResponse, *http.Response, error) {
	return r.ApiService.GridcloudapivmaddressReferenceGetExecute(r)
}

/*
GridcloudapivmaddressReferenceGet Get a specific grid:cloudapi:vmaddress object

Returns a specific grid:cloudapi:vmaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:cloudapi:vmaddress object
	@return GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest
*/
func (a *GridCloudapiVmaddressAPIService) GridcloudapivmaddressReferenceGet(ctx context.Context, reference string) GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest {
	return GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGridCloudapiVmaddressResponse
func (a *GridCloudapiVmaddressAPIService) GridcloudapivmaddressReferenceGetExecute(r GridCloudapiVmaddressAPIGridcloudapivmaddressReferenceGetRequest) (*GetGridCloudapiVmaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGridCloudapiVmaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridCloudapiVmaddressAPIService.GridcloudapivmaddressReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:cloudapi:vmaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
