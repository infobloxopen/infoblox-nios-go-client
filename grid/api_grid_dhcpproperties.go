/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type GridDhcppropertiesAPI interface {
	/*
		GriddhcppropertiesGet Retrieve grid:dhcpproperties objects

		Returns a list of grid:dhcpproperties objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridDhcppropertiesAPIGriddhcppropertiesGetRequest
	*/
	GriddhcppropertiesGet(ctx context.Context) GridDhcppropertiesAPIGriddhcppropertiesGetRequest

	// GriddhcppropertiesGetExecute executes the request
	//  @return ListGridDhcppropertiesResponse
	GriddhcppropertiesGetExecute(r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) (*ListGridDhcppropertiesResponse, *http.Response, error)
	/*
		GriddhcppropertiesReferenceGet Get a specific grid:dhcpproperties object

		Returns a specific grid:dhcpproperties object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:dhcpproperties object
		@return GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest
	*/
	GriddhcppropertiesReferenceGet(ctx context.Context, reference string) GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest

	// GriddhcppropertiesReferenceGetExecute executes the request
	//  @return GetGridDhcppropertiesResponse
	GriddhcppropertiesReferenceGetExecute(r GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest) (*GetGridDhcppropertiesResponse, *http.Response, error)
	/*
		GriddhcppropertiesReferencePut Update a grid:dhcpproperties object

		Updates a specific grid:dhcpproperties object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:dhcpproperties object
		@return GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest
	*/
	GriddhcppropertiesReferencePut(ctx context.Context, reference string) GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest

	// GriddhcppropertiesReferencePutExecute executes the request
	//  @return UpdateGridDhcppropertiesResponse
	GriddhcppropertiesReferencePutExecute(r GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest) (*UpdateGridDhcppropertiesResponse, *http.Response, error)
}

// GridDhcppropertiesAPIService GridDhcppropertiesAPI service
type GridDhcppropertiesAPIService internal.Service

type GridDhcppropertiesAPIGriddhcppropertiesGetRequest struct {
	ctx            context.Context
	ApiService     GridDhcppropertiesAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) ReturnFields(returnFields string) GridDhcppropertiesAPIGriddhcppropertiesGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) ReturnFields2(returnFields2 string) GridDhcppropertiesAPIGriddhcppropertiesGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) MaxResults(maxResults int32) GridDhcppropertiesAPIGriddhcppropertiesGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) ReturnAsObject(returnAsObject int32) GridDhcppropertiesAPIGriddhcppropertiesGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) Paging(paging int32) GridDhcppropertiesAPIGriddhcppropertiesGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) PageId(pageId string) GridDhcppropertiesAPIGriddhcppropertiesGetRequest {
	r.pageId = &pageId
	return r
}

func (r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) Filters(filters map[string]interface{}) GridDhcppropertiesAPIGriddhcppropertiesGetRequest {
	r.filters = &filters
	return r
}

func (r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) Extattrfilter(extattrfilter map[string]interface{}) GridDhcppropertiesAPIGriddhcppropertiesGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) Execute() (*ListGridDhcppropertiesResponse, *http.Response, error) {
	return r.ApiService.GriddhcppropertiesGetExecute(r)
}

/*
GriddhcppropertiesGet Retrieve grid:dhcpproperties objects

Returns a list of grid:dhcpproperties objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridDhcppropertiesAPIGriddhcppropertiesGetRequest
*/
func (a *GridDhcppropertiesAPIService) GriddhcppropertiesGet(ctx context.Context) GridDhcppropertiesAPIGriddhcppropertiesGetRequest {
	return GridDhcppropertiesAPIGriddhcppropertiesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGridDhcppropertiesResponse
func (a *GridDhcppropertiesAPIService) GriddhcppropertiesGetExecute(r GridDhcppropertiesAPIGriddhcppropertiesGetRequest) (*ListGridDhcppropertiesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGridDhcppropertiesResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridDhcppropertiesAPIService.GriddhcppropertiesGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:dhcpproperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest struct {
	ctx            context.Context
	ApiService     GridDhcppropertiesAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest) ReturnFields(returnFields string) GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest) ReturnFields2(returnFields2 string) GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest) ReturnAsObject(returnAsObject int32) GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest) Execute() (*GetGridDhcppropertiesResponse, *http.Response, error) {
	return r.ApiService.GriddhcppropertiesReferenceGetExecute(r)
}

/*
GriddhcppropertiesReferenceGet Get a specific grid:dhcpproperties object

Returns a specific grid:dhcpproperties object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:dhcpproperties object
	@return GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest
*/
func (a *GridDhcppropertiesAPIService) GriddhcppropertiesReferenceGet(ctx context.Context, reference string) GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest {
	return GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGridDhcppropertiesResponse
func (a *GridDhcppropertiesAPIService) GriddhcppropertiesReferenceGetExecute(r GridDhcppropertiesAPIGriddhcppropertiesReferenceGetRequest) (*GetGridDhcppropertiesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGridDhcppropertiesResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridDhcppropertiesAPIService.GriddhcppropertiesReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:dhcpproperties/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest struct {
	ctx                context.Context
	ApiService         GridDhcppropertiesAPI
	reference          string
	gridDhcpproperties *GridDhcpproperties
	returnFields       *string
	returnFields2      *string
	returnAsObject     *int32
}

// Object data to update
func (r GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest) GridDhcpproperties(gridDhcpproperties GridDhcpproperties) GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest {
	r.gridDhcpproperties = &gridDhcpproperties
	return r
}

// Enter the field names followed by comma
func (r GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest) ReturnFields(returnFields string) GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest) ReturnFields2(returnFields2 string) GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest) ReturnAsObject(returnAsObject int32) GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest) Execute() (*UpdateGridDhcppropertiesResponse, *http.Response, error) {
	return r.ApiService.GriddhcppropertiesReferencePutExecute(r)
}

/*
GriddhcppropertiesReferencePut Update a grid:dhcpproperties object

Updates a specific grid:dhcpproperties object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:dhcpproperties object
	@return GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest
*/
func (a *GridDhcppropertiesAPIService) GriddhcppropertiesReferencePut(ctx context.Context, reference string) GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest {
	return GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateGridDhcppropertiesResponse
func (a *GridDhcppropertiesAPIService) GriddhcppropertiesReferencePutExecute(r GridDhcppropertiesAPIGriddhcppropertiesReferencePutRequest) (*UpdateGridDhcppropertiesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateGridDhcppropertiesResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridDhcppropertiesAPIService.GriddhcppropertiesReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:dhcpproperties/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gridDhcpproperties == nil {
		return localVarReturnValue, nil, internal.ReportError("gridDhcpproperties is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gridDhcpproperties
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
