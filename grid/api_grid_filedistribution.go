/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type GridFiledistributionAPI interface {
	/*
		GridfiledistributionGet Retrieve grid:filedistribution objects

		Returns a list of grid:filedistribution objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridFiledistributionAPIGridfiledistributionGetRequest
	*/
	GridfiledistributionGet(ctx context.Context) GridFiledistributionAPIGridfiledistributionGetRequest

	// GridfiledistributionGetExecute executes the request
	//  @return ListGridFiledistributionResponse
	GridfiledistributionGetExecute(r GridFiledistributionAPIGridfiledistributionGetRequest) (*ListGridFiledistributionResponse, *http.Response, error)
	/*
		GridfiledistributionReferenceGet Get a specific grid:filedistribution object

		Returns a specific grid:filedistribution object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:filedistribution object
		@return GridFiledistributionAPIGridfiledistributionReferenceGetRequest
	*/
	GridfiledistributionReferenceGet(ctx context.Context, reference string) GridFiledistributionAPIGridfiledistributionReferenceGetRequest

	// GridfiledistributionReferenceGetExecute executes the request
	//  @return GetGridFiledistributionResponse
	GridfiledistributionReferenceGetExecute(r GridFiledistributionAPIGridfiledistributionReferenceGetRequest) (*GetGridFiledistributionResponse, *http.Response, error)
	/*
		GridfiledistributionReferencePut Update a grid:filedistribution object

		Updates a specific grid:filedistribution object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:filedistribution object
		@return GridFiledistributionAPIGridfiledistributionReferencePutRequest
	*/
	GridfiledistributionReferencePut(ctx context.Context, reference string) GridFiledistributionAPIGridfiledistributionReferencePutRequest

	// GridfiledistributionReferencePutExecute executes the request
	//  @return UpdateGridFiledistributionResponse
	GridfiledistributionReferencePutExecute(r GridFiledistributionAPIGridfiledistributionReferencePutRequest) (*UpdateGridFiledistributionResponse, *http.Response, error)
}

// GridFiledistributionAPIService GridFiledistributionAPI service
type GridFiledistributionAPIService internal.Service

type GridFiledistributionAPIGridfiledistributionGetRequest struct {
	ctx            context.Context
	ApiService     GridFiledistributionAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r GridFiledistributionAPIGridfiledistributionGetRequest) ReturnFields(returnFields string) GridFiledistributionAPIGridfiledistributionGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridFiledistributionAPIGridfiledistributionGetRequest) ReturnFields2(returnFields2 string) GridFiledistributionAPIGridfiledistributionGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r GridFiledistributionAPIGridfiledistributionGetRequest) MaxResults(maxResults int32) GridFiledistributionAPIGridfiledistributionGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GridFiledistributionAPIGridfiledistributionGetRequest) ReturnAsObject(returnAsObject int32) GridFiledistributionAPIGridfiledistributionGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GridFiledistributionAPIGridfiledistributionGetRequest) Paging(paging int32) GridFiledistributionAPIGridfiledistributionGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GridFiledistributionAPIGridfiledistributionGetRequest) PageId(pageId string) GridFiledistributionAPIGridfiledistributionGetRequest {
	r.pageId = &pageId
	return r
}

func (r GridFiledistributionAPIGridfiledistributionGetRequest) Filters(filters map[string]interface{}) GridFiledistributionAPIGridfiledistributionGetRequest {
	r.filters = &filters
	return r
}

func (r GridFiledistributionAPIGridfiledistributionGetRequest) Extattrfilter(extattrfilter map[string]interface{}) GridFiledistributionAPIGridfiledistributionGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GridFiledistributionAPIGridfiledistributionGetRequest) Execute() (*ListGridFiledistributionResponse, *http.Response, error) {
	return r.ApiService.GridfiledistributionGetExecute(r)
}

/*
GridfiledistributionGet Retrieve grid:filedistribution objects

Returns a list of grid:filedistribution objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridFiledistributionAPIGridfiledistributionGetRequest
*/
func (a *GridFiledistributionAPIService) GridfiledistributionGet(ctx context.Context) GridFiledistributionAPIGridfiledistributionGetRequest {
	return GridFiledistributionAPIGridfiledistributionGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGridFiledistributionResponse
func (a *GridFiledistributionAPIService) GridfiledistributionGetExecute(r GridFiledistributionAPIGridfiledistributionGetRequest) (*ListGridFiledistributionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGridFiledistributionResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridFiledistributionAPIService.GridfiledistributionGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:filedistribution"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridFiledistributionAPIGridfiledistributionReferenceGetRequest struct {
	ctx            context.Context
	ApiService     GridFiledistributionAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r GridFiledistributionAPIGridfiledistributionReferenceGetRequest) ReturnFields(returnFields string) GridFiledistributionAPIGridfiledistributionReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridFiledistributionAPIGridfiledistributionReferenceGetRequest) ReturnFields2(returnFields2 string) GridFiledistributionAPIGridfiledistributionReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridFiledistributionAPIGridfiledistributionReferenceGetRequest) ReturnAsObject(returnAsObject int32) GridFiledistributionAPIGridfiledistributionReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridFiledistributionAPIGridfiledistributionReferenceGetRequest) Execute() (*GetGridFiledistributionResponse, *http.Response, error) {
	return r.ApiService.GridfiledistributionReferenceGetExecute(r)
}

/*
GridfiledistributionReferenceGet Get a specific grid:filedistribution object

Returns a specific grid:filedistribution object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:filedistribution object
	@return GridFiledistributionAPIGridfiledistributionReferenceGetRequest
*/
func (a *GridFiledistributionAPIService) GridfiledistributionReferenceGet(ctx context.Context, reference string) GridFiledistributionAPIGridfiledistributionReferenceGetRequest {
	return GridFiledistributionAPIGridfiledistributionReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGridFiledistributionResponse
func (a *GridFiledistributionAPIService) GridfiledistributionReferenceGetExecute(r GridFiledistributionAPIGridfiledistributionReferenceGetRequest) (*GetGridFiledistributionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGridFiledistributionResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridFiledistributionAPIService.GridfiledistributionReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:filedistribution/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridFiledistributionAPIGridfiledistributionReferencePutRequest struct {
	ctx                  context.Context
	ApiService           GridFiledistributionAPI
	reference            string
	gridFiledistribution *GridFiledistribution
	returnFields         *string
	returnFields2        *string
	returnAsObject       *int32
}

// Object data to update
func (r GridFiledistributionAPIGridfiledistributionReferencePutRequest) GridFiledistribution(gridFiledistribution GridFiledistribution) GridFiledistributionAPIGridfiledistributionReferencePutRequest {
	r.gridFiledistribution = &gridFiledistribution
	return r
}

// Enter the field names followed by comma
func (r GridFiledistributionAPIGridfiledistributionReferencePutRequest) ReturnFields(returnFields string) GridFiledistributionAPIGridfiledistributionReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridFiledistributionAPIGridfiledistributionReferencePutRequest) ReturnFields2(returnFields2 string) GridFiledistributionAPIGridfiledistributionReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridFiledistributionAPIGridfiledistributionReferencePutRequest) ReturnAsObject(returnAsObject int32) GridFiledistributionAPIGridfiledistributionReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridFiledistributionAPIGridfiledistributionReferencePutRequest) Execute() (*UpdateGridFiledistributionResponse, *http.Response, error) {
	return r.ApiService.GridfiledistributionReferencePutExecute(r)
}

/*
GridfiledistributionReferencePut Update a grid:filedistribution object

Updates a specific grid:filedistribution object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:filedistribution object
	@return GridFiledistributionAPIGridfiledistributionReferencePutRequest
*/
func (a *GridFiledistributionAPIService) GridfiledistributionReferencePut(ctx context.Context, reference string) GridFiledistributionAPIGridfiledistributionReferencePutRequest {
	return GridFiledistributionAPIGridfiledistributionReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateGridFiledistributionResponse
func (a *GridFiledistributionAPIService) GridfiledistributionReferencePutExecute(r GridFiledistributionAPIGridfiledistributionReferencePutRequest) (*UpdateGridFiledistributionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateGridFiledistributionResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridFiledistributionAPIService.GridfiledistributionReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:filedistribution/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gridFiledistribution == nil {
		return localVarReturnValue, nil, internal.ReportError("gridFiledistribution is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gridFiledistribution
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
