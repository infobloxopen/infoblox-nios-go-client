/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type GridThreatinsightAPI interface {
	/*
		GridthreatinsightGet Retrieve grid:threatinsight objects

		Returns a list of grid:threatinsight objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridThreatinsightAPIGridthreatinsightGetRequest
	*/
	GridthreatinsightGet(ctx context.Context) GridThreatinsightAPIGridthreatinsightGetRequest

	// GridthreatinsightGetExecute executes the request
	//  @return ListGridThreatinsightResponse
	GridthreatinsightGetExecute(r GridThreatinsightAPIGridthreatinsightGetRequest) (*ListGridThreatinsightResponse, *http.Response, error)
	/*
		GridthreatinsightReferenceGet Get a specific grid:threatinsight object

		Returns a specific grid:threatinsight object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:threatinsight object
		@return GridThreatinsightAPIGridthreatinsightReferenceGetRequest
	*/
	GridthreatinsightReferenceGet(ctx context.Context, reference string) GridThreatinsightAPIGridthreatinsightReferenceGetRequest

	// GridthreatinsightReferenceGetExecute executes the request
	//  @return GetGridThreatinsightResponse
	GridthreatinsightReferenceGetExecute(r GridThreatinsightAPIGridthreatinsightReferenceGetRequest) (*GetGridThreatinsightResponse, *http.Response, error)
	/*
		GridthreatinsightReferencePut Update a grid:threatinsight object

		Updates a specific grid:threatinsight object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:threatinsight object
		@return GridThreatinsightAPIGridthreatinsightReferencePutRequest
	*/
	GridthreatinsightReferencePut(ctx context.Context, reference string) GridThreatinsightAPIGridthreatinsightReferencePutRequest

	// GridthreatinsightReferencePutExecute executes the request
	//  @return UpdateGridThreatinsightResponse
	GridthreatinsightReferencePutExecute(r GridThreatinsightAPIGridthreatinsightReferencePutRequest) (*UpdateGridThreatinsightResponse, *http.Response, error)
}

// GridThreatinsightAPIService GridThreatinsightAPI service
type GridThreatinsightAPIService internal.Service

type GridThreatinsightAPIGridthreatinsightGetRequest struct {
	ctx            context.Context
	ApiService     GridThreatinsightAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r GridThreatinsightAPIGridthreatinsightGetRequest) ReturnFields(returnFields string) GridThreatinsightAPIGridthreatinsightGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridThreatinsightAPIGridthreatinsightGetRequest) ReturnFields2(returnFields2 string) GridThreatinsightAPIGridthreatinsightGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r GridThreatinsightAPIGridthreatinsightGetRequest) MaxResults(maxResults int32) GridThreatinsightAPIGridthreatinsightGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GridThreatinsightAPIGridthreatinsightGetRequest) ReturnAsObject(returnAsObject int32) GridThreatinsightAPIGridthreatinsightGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GridThreatinsightAPIGridthreatinsightGetRequest) Paging(paging int32) GridThreatinsightAPIGridthreatinsightGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GridThreatinsightAPIGridthreatinsightGetRequest) PageId(pageId string) GridThreatinsightAPIGridthreatinsightGetRequest {
	r.pageId = &pageId
	return r
}

func (r GridThreatinsightAPIGridthreatinsightGetRequest) Filters(filters map[string]interface{}) GridThreatinsightAPIGridthreatinsightGetRequest {
	r.filters = &filters
	return r
}

func (r GridThreatinsightAPIGridthreatinsightGetRequest) Extattrfilter(extattrfilter map[string]interface{}) GridThreatinsightAPIGridthreatinsightGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GridThreatinsightAPIGridthreatinsightGetRequest) Execute() (*ListGridThreatinsightResponse, *http.Response, error) {
	return r.ApiService.GridthreatinsightGetExecute(r)
}

/*
GridthreatinsightGet Retrieve grid:threatinsight objects

Returns a list of grid:threatinsight objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridThreatinsightAPIGridthreatinsightGetRequest
*/
func (a *GridThreatinsightAPIService) GridthreatinsightGet(ctx context.Context) GridThreatinsightAPIGridthreatinsightGetRequest {
	return GridThreatinsightAPIGridthreatinsightGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGridThreatinsightResponse
func (a *GridThreatinsightAPIService) GridthreatinsightGetExecute(r GridThreatinsightAPIGridthreatinsightGetRequest) (*ListGridThreatinsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGridThreatinsightResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridThreatinsightAPIService.GridthreatinsightGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:threatinsight"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridThreatinsightAPIGridthreatinsightReferenceGetRequest struct {
	ctx            context.Context
	ApiService     GridThreatinsightAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r GridThreatinsightAPIGridthreatinsightReferenceGetRequest) ReturnFields(returnFields string) GridThreatinsightAPIGridthreatinsightReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridThreatinsightAPIGridthreatinsightReferenceGetRequest) ReturnFields2(returnFields2 string) GridThreatinsightAPIGridthreatinsightReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridThreatinsightAPIGridthreatinsightReferenceGetRequest) ReturnAsObject(returnAsObject int32) GridThreatinsightAPIGridthreatinsightReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridThreatinsightAPIGridthreatinsightReferenceGetRequest) Execute() (*GetGridThreatinsightResponse, *http.Response, error) {
	return r.ApiService.GridthreatinsightReferenceGetExecute(r)
}

/*
GridthreatinsightReferenceGet Get a specific grid:threatinsight object

Returns a specific grid:threatinsight object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:threatinsight object
	@return GridThreatinsightAPIGridthreatinsightReferenceGetRequest
*/
func (a *GridThreatinsightAPIService) GridthreatinsightReferenceGet(ctx context.Context, reference string) GridThreatinsightAPIGridthreatinsightReferenceGetRequest {
	return GridThreatinsightAPIGridthreatinsightReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGridThreatinsightResponse
func (a *GridThreatinsightAPIService) GridthreatinsightReferenceGetExecute(r GridThreatinsightAPIGridthreatinsightReferenceGetRequest) (*GetGridThreatinsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGridThreatinsightResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridThreatinsightAPIService.GridthreatinsightReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:threatinsight/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridThreatinsightAPIGridthreatinsightReferencePutRequest struct {
	ctx               context.Context
	ApiService        GridThreatinsightAPI
	reference         string
	gridThreatinsight *GridThreatinsight
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to update
func (r GridThreatinsightAPIGridthreatinsightReferencePutRequest) GridThreatinsight(gridThreatinsight GridThreatinsight) GridThreatinsightAPIGridthreatinsightReferencePutRequest {
	r.gridThreatinsight = &gridThreatinsight
	return r
}

// Enter the field names followed by comma
func (r GridThreatinsightAPIGridthreatinsightReferencePutRequest) ReturnFields(returnFields string) GridThreatinsightAPIGridthreatinsightReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridThreatinsightAPIGridthreatinsightReferencePutRequest) ReturnFields2(returnFields2 string) GridThreatinsightAPIGridthreatinsightReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridThreatinsightAPIGridthreatinsightReferencePutRequest) ReturnAsObject(returnAsObject int32) GridThreatinsightAPIGridthreatinsightReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridThreatinsightAPIGridthreatinsightReferencePutRequest) Execute() (*UpdateGridThreatinsightResponse, *http.Response, error) {
	return r.ApiService.GridthreatinsightReferencePutExecute(r)
}

/*
GridthreatinsightReferencePut Update a grid:threatinsight object

Updates a specific grid:threatinsight object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:threatinsight object
	@return GridThreatinsightAPIGridthreatinsightReferencePutRequest
*/
func (a *GridThreatinsightAPIService) GridthreatinsightReferencePut(ctx context.Context, reference string) GridThreatinsightAPIGridthreatinsightReferencePutRequest {
	return GridThreatinsightAPIGridthreatinsightReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateGridThreatinsightResponse
func (a *GridThreatinsightAPIService) GridthreatinsightReferencePutExecute(r GridThreatinsightAPIGridthreatinsightReferencePutRequest) (*UpdateGridThreatinsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateGridThreatinsightResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridThreatinsightAPIService.GridthreatinsightReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:threatinsight/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gridThreatinsight == nil {
		return localVarReturnValue, nil, internal.ReportError("gridThreatinsight is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gridThreatinsight
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
