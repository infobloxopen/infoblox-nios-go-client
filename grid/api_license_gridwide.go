/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type LicenseGridwideAPI interface {
	/*
		LicensegridwideGet Retrieve license:gridwide objects

		Returns a list of license:gridwide objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return LicenseGridwideAPILicensegridwideGetRequest
	*/
	LicensegridwideGet(ctx context.Context) LicenseGridwideAPILicensegridwideGetRequest

	// LicensegridwideGetExecute executes the request
	//  @return ListLicenseGridwideResponse
	LicensegridwideGetExecute(r LicenseGridwideAPILicensegridwideGetRequest) (*ListLicenseGridwideResponse, *http.Response, error)
	/*
		LicensegridwideReferenceDelete Delete a license:gridwide object

		Deletes a specific license:gridwide object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the license:gridwide object
		@return LicenseGridwideAPILicensegridwideReferenceDeleteRequest
	*/
	LicensegridwideReferenceDelete(ctx context.Context, reference string) LicenseGridwideAPILicensegridwideReferenceDeleteRequest

	// LicensegridwideReferenceDeleteExecute executes the request
	LicensegridwideReferenceDeleteExecute(r LicenseGridwideAPILicensegridwideReferenceDeleteRequest) (*http.Response, error)
	/*
		LicensegridwideReferenceGet Get a specific license:gridwide object

		Returns a specific license:gridwide object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the license:gridwide object
		@return LicenseGridwideAPILicensegridwideReferenceGetRequest
	*/
	LicensegridwideReferenceGet(ctx context.Context, reference string) LicenseGridwideAPILicensegridwideReferenceGetRequest

	// LicensegridwideReferenceGetExecute executes the request
	//  @return GetLicenseGridwideResponse
	LicensegridwideReferenceGetExecute(r LicenseGridwideAPILicensegridwideReferenceGetRequest) (*GetLicenseGridwideResponse, *http.Response, error)
}

// LicenseGridwideAPIService LicenseGridwideAPI service
type LicenseGridwideAPIService internal.Service

type LicenseGridwideAPILicensegridwideGetRequest struct {
	ctx            context.Context
	ApiService     LicenseGridwideAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r LicenseGridwideAPILicensegridwideGetRequest) ReturnFields(returnFields string) LicenseGridwideAPILicensegridwideGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r LicenseGridwideAPILicensegridwideGetRequest) ReturnFields2(returnFields2 string) LicenseGridwideAPILicensegridwideGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r LicenseGridwideAPILicensegridwideGetRequest) MaxResults(maxResults int32) LicenseGridwideAPILicensegridwideGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r LicenseGridwideAPILicensegridwideGetRequest) ReturnAsObject(returnAsObject int32) LicenseGridwideAPILicensegridwideGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r LicenseGridwideAPILicensegridwideGetRequest) Paging(paging int32) LicenseGridwideAPILicensegridwideGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r LicenseGridwideAPILicensegridwideGetRequest) PageId(pageId string) LicenseGridwideAPILicensegridwideGetRequest {
	r.pageId = &pageId
	return r
}

func (r LicenseGridwideAPILicensegridwideGetRequest) Filters(filters map[string]interface{}) LicenseGridwideAPILicensegridwideGetRequest {
	r.filters = &filters
	return r
}

func (r LicenseGridwideAPILicensegridwideGetRequest) Extattrfilter(extattrfilter map[string]interface{}) LicenseGridwideAPILicensegridwideGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r LicenseGridwideAPILicensegridwideGetRequest) Execute() (*ListLicenseGridwideResponse, *http.Response, error) {
	return r.ApiService.LicensegridwideGetExecute(r)
}

/*
LicensegridwideGet Retrieve license:gridwide objects

Returns a list of license:gridwide objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LicenseGridwideAPILicensegridwideGetRequest
*/
func (a *LicenseGridwideAPIService) LicensegridwideGet(ctx context.Context) LicenseGridwideAPILicensegridwideGetRequest {
	return LicenseGridwideAPILicensegridwideGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListLicenseGridwideResponse
func (a *LicenseGridwideAPIService) LicensegridwideGetExecute(r LicenseGridwideAPILicensegridwideGetRequest) (*ListLicenseGridwideResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListLicenseGridwideResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "LicenseGridwideAPIService.LicensegridwideGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/license:gridwide"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type LicenseGridwideAPILicensegridwideReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService LicenseGridwideAPI
	reference  string
}

func (r LicenseGridwideAPILicensegridwideReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.LicensegridwideReferenceDeleteExecute(r)
}

/*
LicensegridwideReferenceDelete Delete a license:gridwide object

Deletes a specific license:gridwide object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the license:gridwide object
	@return LicenseGridwideAPILicensegridwideReferenceDeleteRequest
*/
func (a *LicenseGridwideAPIService) LicensegridwideReferenceDelete(ctx context.Context, reference string) LicenseGridwideAPILicensegridwideReferenceDeleteRequest {
	return LicenseGridwideAPILicensegridwideReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *LicenseGridwideAPIService) LicensegridwideReferenceDeleteExecute(r LicenseGridwideAPILicensegridwideReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "LicenseGridwideAPIService.LicensegridwideReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/license:gridwide/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LicenseGridwideAPILicensegridwideReferenceGetRequest struct {
	ctx            context.Context
	ApiService     LicenseGridwideAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r LicenseGridwideAPILicensegridwideReferenceGetRequest) ReturnFields(returnFields string) LicenseGridwideAPILicensegridwideReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r LicenseGridwideAPILicensegridwideReferenceGetRequest) ReturnFields2(returnFields2 string) LicenseGridwideAPILicensegridwideReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r LicenseGridwideAPILicensegridwideReferenceGetRequest) ReturnAsObject(returnAsObject int32) LicenseGridwideAPILicensegridwideReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r LicenseGridwideAPILicensegridwideReferenceGetRequest) Execute() (*GetLicenseGridwideResponse, *http.Response, error) {
	return r.ApiService.LicensegridwideReferenceGetExecute(r)
}

/*
LicensegridwideReferenceGet Get a specific license:gridwide object

Returns a specific license:gridwide object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the license:gridwide object
	@return LicenseGridwideAPILicensegridwideReferenceGetRequest
*/
func (a *LicenseGridwideAPIService) LicensegridwideReferenceGet(ctx context.Context, reference string) LicenseGridwideAPILicensegridwideReferenceGetRequest {
	return LicenseGridwideAPILicensegridwideReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetLicenseGridwideResponse
func (a *LicenseGridwideAPIService) LicensegridwideReferenceGetExecute(r LicenseGridwideAPILicensegridwideReferenceGetRequest) (*GetLicenseGridwideResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetLicenseGridwideResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "LicenseGridwideAPIService.LicensegridwideReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/license:gridwide/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
