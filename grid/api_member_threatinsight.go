/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type MemberThreatinsightAPI interface {
	/*
		MemberthreatinsightGet Retrieve member:threatinsight objects

		Returns a list of member:threatinsight objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MemberThreatinsightAPIMemberthreatinsightGetRequest
	*/
	MemberthreatinsightGet(ctx context.Context) MemberThreatinsightAPIMemberthreatinsightGetRequest

	// MemberthreatinsightGetExecute executes the request
	//  @return ListMemberThreatinsightResponse
	MemberthreatinsightGetExecute(r MemberThreatinsightAPIMemberthreatinsightGetRequest) (*ListMemberThreatinsightResponse, *http.Response, error)
	/*
		MemberthreatinsightReferenceGet Get a specific member:threatinsight object

		Returns a specific member:threatinsight object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the member:threatinsight object
		@return MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest
	*/
	MemberthreatinsightReferenceGet(ctx context.Context, reference string) MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest

	// MemberthreatinsightReferenceGetExecute executes the request
	//  @return GetMemberThreatinsightResponse
	MemberthreatinsightReferenceGetExecute(r MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest) (*GetMemberThreatinsightResponse, *http.Response, error)
	/*
		MemberthreatinsightReferencePut Update a member:threatinsight object

		Updates a specific member:threatinsight object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the member:threatinsight object
		@return MemberThreatinsightAPIMemberthreatinsightReferencePutRequest
	*/
	MemberthreatinsightReferencePut(ctx context.Context, reference string) MemberThreatinsightAPIMemberthreatinsightReferencePutRequest

	// MemberthreatinsightReferencePutExecute executes the request
	//  @return UpdateMemberThreatinsightResponse
	MemberthreatinsightReferencePutExecute(r MemberThreatinsightAPIMemberthreatinsightReferencePutRequest) (*UpdateMemberThreatinsightResponse, *http.Response, error)
}

// MemberThreatinsightAPIService MemberThreatinsightAPI service
type MemberThreatinsightAPIService internal.Service

type MemberThreatinsightAPIMemberthreatinsightGetRequest struct {
	ctx            context.Context
	ApiService     MemberThreatinsightAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r MemberThreatinsightAPIMemberthreatinsightGetRequest) ReturnFields(returnFields string) MemberThreatinsightAPIMemberthreatinsightGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MemberThreatinsightAPIMemberthreatinsightGetRequest) ReturnFields2(returnFields2 string) MemberThreatinsightAPIMemberthreatinsightGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r MemberThreatinsightAPIMemberthreatinsightGetRequest) MaxResults(maxResults int32) MemberThreatinsightAPIMemberthreatinsightGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r MemberThreatinsightAPIMemberthreatinsightGetRequest) ReturnAsObject(returnAsObject int32) MemberThreatinsightAPIMemberthreatinsightGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r MemberThreatinsightAPIMemberthreatinsightGetRequest) Paging(paging int32) MemberThreatinsightAPIMemberthreatinsightGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r MemberThreatinsightAPIMemberthreatinsightGetRequest) PageId(pageId string) MemberThreatinsightAPIMemberthreatinsightGetRequest {
	r.pageId = &pageId
	return r
}

func (r MemberThreatinsightAPIMemberthreatinsightGetRequest) Filters(filters map[string]interface{}) MemberThreatinsightAPIMemberthreatinsightGetRequest {
	r.filters = &filters
	return r
}

func (r MemberThreatinsightAPIMemberthreatinsightGetRequest) Extattrfilter(extattrfilter map[string]interface{}) MemberThreatinsightAPIMemberthreatinsightGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r MemberThreatinsightAPIMemberthreatinsightGetRequest) Execute() (*ListMemberThreatinsightResponse, *http.Response, error) {
	return r.ApiService.MemberthreatinsightGetExecute(r)
}

/*
MemberthreatinsightGet Retrieve member:threatinsight objects

Returns a list of member:threatinsight objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MemberThreatinsightAPIMemberthreatinsightGetRequest
*/
func (a *MemberThreatinsightAPIService) MemberthreatinsightGet(ctx context.Context) MemberThreatinsightAPIMemberthreatinsightGetRequest {
	return MemberThreatinsightAPIMemberthreatinsightGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListMemberThreatinsightResponse
func (a *MemberThreatinsightAPIService) MemberthreatinsightGetExecute(r MemberThreatinsightAPIMemberthreatinsightGetRequest) (*ListMemberThreatinsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListMemberThreatinsightResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MemberThreatinsightAPIService.MemberthreatinsightGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/member:threatinsight"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest struct {
	ctx            context.Context
	ApiService     MemberThreatinsightAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest) ReturnFields(returnFields string) MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest) ReturnFields2(returnFields2 string) MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest) ReturnAsObject(returnAsObject int32) MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest) Execute() (*GetMemberThreatinsightResponse, *http.Response, error) {
	return r.ApiService.MemberthreatinsightReferenceGetExecute(r)
}

/*
MemberthreatinsightReferenceGet Get a specific member:threatinsight object

Returns a specific member:threatinsight object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the member:threatinsight object
	@return MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest
*/
func (a *MemberThreatinsightAPIService) MemberthreatinsightReferenceGet(ctx context.Context, reference string) MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest {
	return MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetMemberThreatinsightResponse
func (a *MemberThreatinsightAPIService) MemberthreatinsightReferenceGetExecute(r MemberThreatinsightAPIMemberthreatinsightReferenceGetRequest) (*GetMemberThreatinsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetMemberThreatinsightResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MemberThreatinsightAPIService.MemberthreatinsightReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/member:threatinsight/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberThreatinsightAPIMemberthreatinsightReferencePutRequest struct {
	ctx                 context.Context
	ApiService          MemberThreatinsightAPI
	reference           string
	memberThreatinsight *MemberThreatinsight
	returnFields        *string
	returnFields2       *string
	returnAsObject      *int32
}

// Object data to update
func (r MemberThreatinsightAPIMemberthreatinsightReferencePutRequest) MemberThreatinsight(memberThreatinsight MemberThreatinsight) MemberThreatinsightAPIMemberthreatinsightReferencePutRequest {
	r.memberThreatinsight = &memberThreatinsight
	return r
}

// Enter the field names followed by comma
func (r MemberThreatinsightAPIMemberthreatinsightReferencePutRequest) ReturnFields(returnFields string) MemberThreatinsightAPIMemberthreatinsightReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MemberThreatinsightAPIMemberthreatinsightReferencePutRequest) ReturnFields2(returnFields2 string) MemberThreatinsightAPIMemberthreatinsightReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MemberThreatinsightAPIMemberthreatinsightReferencePutRequest) ReturnAsObject(returnAsObject int32) MemberThreatinsightAPIMemberthreatinsightReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MemberThreatinsightAPIMemberthreatinsightReferencePutRequest) Execute() (*UpdateMemberThreatinsightResponse, *http.Response, error) {
	return r.ApiService.MemberthreatinsightReferencePutExecute(r)
}

/*
MemberthreatinsightReferencePut Update a member:threatinsight object

Updates a specific member:threatinsight object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the member:threatinsight object
	@return MemberThreatinsightAPIMemberthreatinsightReferencePutRequest
*/
func (a *MemberThreatinsightAPIService) MemberthreatinsightReferencePut(ctx context.Context, reference string) MemberThreatinsightAPIMemberthreatinsightReferencePutRequest {
	return MemberThreatinsightAPIMemberthreatinsightReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateMemberThreatinsightResponse
func (a *MemberThreatinsightAPIService) MemberthreatinsightReferencePutExecute(r MemberThreatinsightAPIMemberthreatinsightReferencePutRequest) (*UpdateMemberThreatinsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateMemberThreatinsightResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MemberThreatinsightAPIService.MemberthreatinsightReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/member:threatinsight/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberThreatinsight == nil {
		return localVarReturnValue, nil, internal.ReportError("memberThreatinsight is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.memberThreatinsight
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
