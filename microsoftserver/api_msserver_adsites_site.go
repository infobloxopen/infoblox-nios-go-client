/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type MsserverAdsitesSiteAPI interface {
	/*
		MsserveradsitessiteGet Retrieve msserver:adsites:site objects

		Returns a list of msserver:adsites:site objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest
	*/
	MsserveradsitessiteGet(ctx context.Context) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest

	// MsserveradsitessiteGetExecute executes the request
	//  @return ListMsserverAdsitesSiteResponse
	MsserveradsitessiteGetExecute(r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) (*ListMsserverAdsitesSiteResponse, *http.Response, error)
	/*
		MsserveradsitessitePost Create a msserver:adsites:site object

		Creates a new msserver:adsites:site object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverAdsitesSiteAPIMsserveradsitessitePostRequest
	*/
	MsserveradsitessitePost(ctx context.Context) MsserverAdsitesSiteAPIMsserveradsitessitePostRequest

	// MsserveradsitessitePostExecute executes the request
	//  @return CreateMsserverAdsitesSiteResponse
	MsserveradsitessitePostExecute(r MsserverAdsitesSiteAPIMsserveradsitessitePostRequest) (*CreateMsserverAdsitesSiteResponse, *http.Response, error)
	/*
		MsserveradsitessiteReferenceDelete Delete a msserver:adsites:site object

		Deletes a specific msserver:adsites:site object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:adsites:site object
		@return MsserverAdsitesSiteAPIMsserveradsitessiteReferenceDeleteRequest
	*/
	MsserveradsitessiteReferenceDelete(ctx context.Context, reference string) MsserverAdsitesSiteAPIMsserveradsitessiteReferenceDeleteRequest

	// MsserveradsitessiteReferenceDeleteExecute executes the request
	MsserveradsitessiteReferenceDeleteExecute(r MsserverAdsitesSiteAPIMsserveradsitessiteReferenceDeleteRequest) (*http.Response, error)
	/*
		MsserveradsitessiteReferenceGet Get a specific msserver:adsites:site object

		Returns a specific msserver:adsites:site object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:adsites:site object
		@return MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest
	*/
	MsserveradsitessiteReferenceGet(ctx context.Context, reference string) MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest

	// MsserveradsitessiteReferenceGetExecute executes the request
	//  @return GetMsserverAdsitesSiteResponse
	MsserveradsitessiteReferenceGetExecute(r MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest) (*GetMsserverAdsitesSiteResponse, *http.Response, error)
	/*
		MsserveradsitessiteReferencePut Update a msserver:adsites:site object

		Updates a specific msserver:adsites:site object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:adsites:site object
		@return MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest
	*/
	MsserveradsitessiteReferencePut(ctx context.Context, reference string) MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest

	// MsserveradsitessiteReferencePutExecute executes the request
	//  @return UpdateMsserverAdsitesSiteResponse
	MsserveradsitessiteReferencePutExecute(r MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest) (*UpdateMsserverAdsitesSiteResponse, *http.Response, error)
}

// MsserverAdsitesSiteAPIService MsserverAdsitesSiteAPI service
type MsserverAdsitesSiteAPIService internal.Service

type MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest struct {
	ctx            context.Context
	ApiService     MsserverAdsitesSiteAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) ReturnFields(returnFields string) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) ReturnFields2(returnFields2 string) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) MaxResults(maxResults int32) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) ReturnAsObject(returnAsObject int32) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) Paging(paging int32) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) PageId(pageId string) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest {
	r.pageId = &pageId
	return r
}

func (r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) Filters(filters map[string]interface{}) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest {
	r.filters = &filters
	return r
}

func (r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) Extattrfilter(extattrfilter map[string]interface{}) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) Execute() (*ListMsserverAdsitesSiteResponse, *http.Response, error) {
	return r.ApiService.MsserveradsitessiteGetExecute(r)
}

/*
MsserveradsitessiteGet Retrieve msserver:adsites:site objects

Returns a list of msserver:adsites:site objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest
*/
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessiteGet(ctx context.Context) MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest {
	return MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListMsserverAdsitesSiteResponse
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessiteGetExecute(r MsserverAdsitesSiteAPIMsserveradsitessiteGetRequest) (*ListMsserverAdsitesSiteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListMsserverAdsitesSiteResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.MsserveradsitessiteGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverAdsitesSiteAPIMsserveradsitessitePostRequest struct {
	ctx                 context.Context
	ApiService          MsserverAdsitesSiteAPI
	msserverAdsitesSite *MsserverAdsitesSite
	returnFields        *string
	returnFields2       *string
	returnAsObject      *int32
}

// Object data to create
func (r MsserverAdsitesSiteAPIMsserveradsitessitePostRequest) MsserverAdsitesSite(msserverAdsitesSite MsserverAdsitesSite) MsserverAdsitesSiteAPIMsserveradsitessitePostRequest {
	r.msserverAdsitesSite = &msserverAdsitesSite
	return r
}

// Enter the field names followed by comma
func (r MsserverAdsitesSiteAPIMsserveradsitessitePostRequest) ReturnFields(returnFields string) MsserverAdsitesSiteAPIMsserveradsitessitePostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverAdsitesSiteAPIMsserveradsitessitePostRequest) ReturnFields2(returnFields2 string) MsserverAdsitesSiteAPIMsserveradsitessitePostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverAdsitesSiteAPIMsserveradsitessitePostRequest) ReturnAsObject(returnAsObject int32) MsserverAdsitesSiteAPIMsserveradsitessitePostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverAdsitesSiteAPIMsserveradsitessitePostRequest) Execute() (*CreateMsserverAdsitesSiteResponse, *http.Response, error) {
	return r.ApiService.MsserveradsitessitePostExecute(r)
}

/*
MsserveradsitessitePost Create a msserver:adsites:site object

Creates a new msserver:adsites:site object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverAdsitesSiteAPIMsserveradsitessitePostRequest
*/
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessitePost(ctx context.Context) MsserverAdsitesSiteAPIMsserveradsitessitePostRequest {
	return MsserverAdsitesSiteAPIMsserveradsitessitePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateMsserverAdsitesSiteResponse
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessitePostExecute(r MsserverAdsitesSiteAPIMsserveradsitessitePostRequest) (*CreateMsserverAdsitesSiteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateMsserverAdsitesSiteResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.MsserveradsitessitePost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverAdsitesSite == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverAdsitesSite is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverAdsitesSite
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverAdsitesSiteAPIMsserveradsitessiteReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService MsserverAdsitesSiteAPI
	reference  string
}

func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.MsserveradsitessiteReferenceDeleteExecute(r)
}

/*
MsserveradsitessiteReferenceDelete Delete a msserver:adsites:site object

Deletes a specific msserver:adsites:site object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:adsites:site object
	@return MsserverAdsitesSiteAPIMsserveradsitessiteReferenceDeleteRequest
*/
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessiteReferenceDelete(ctx context.Context, reference string) MsserverAdsitesSiteAPIMsserveradsitessiteReferenceDeleteRequest {
	return MsserverAdsitesSiteAPIMsserveradsitessiteReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessiteReferenceDeleteExecute(r MsserverAdsitesSiteAPIMsserveradsitessiteReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.MsserveradsitessiteReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest struct {
	ctx            context.Context
	ApiService     MsserverAdsitesSiteAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest) ReturnFields(returnFields string) MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest) ReturnFields2(returnFields2 string) MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest) ReturnAsObject(returnAsObject int32) MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest) Execute() (*GetMsserverAdsitesSiteResponse, *http.Response, error) {
	return r.ApiService.MsserveradsitessiteReferenceGetExecute(r)
}

/*
MsserveradsitessiteReferenceGet Get a specific msserver:adsites:site object

Returns a specific msserver:adsites:site object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:adsites:site object
	@return MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest
*/
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessiteReferenceGet(ctx context.Context, reference string) MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest {
	return MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetMsserverAdsitesSiteResponse
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessiteReferenceGetExecute(r MsserverAdsitesSiteAPIMsserveradsitessiteReferenceGetRequest) (*GetMsserverAdsitesSiteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetMsserverAdsitesSiteResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.MsserveradsitessiteReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest struct {
	ctx                 context.Context
	ApiService          MsserverAdsitesSiteAPI
	reference           string
	msserverAdsitesSite *MsserverAdsitesSite
	returnFields        *string
	returnFields2       *string
	returnAsObject      *int32
}

// Object data to update
func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest) MsserverAdsitesSite(msserverAdsitesSite MsserverAdsitesSite) MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest {
	r.msserverAdsitesSite = &msserverAdsitesSite
	return r
}

// Enter the field names followed by comma
func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest) ReturnFields(returnFields string) MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest) ReturnFields2(returnFields2 string) MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest) ReturnAsObject(returnAsObject int32) MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest) Execute() (*UpdateMsserverAdsitesSiteResponse, *http.Response, error) {
	return r.ApiService.MsserveradsitessiteReferencePutExecute(r)
}

/*
MsserveradsitessiteReferencePut Update a msserver:adsites:site object

Updates a specific msserver:adsites:site object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:adsites:site object
	@return MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest
*/
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessiteReferencePut(ctx context.Context, reference string) MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest {
	return MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateMsserverAdsitesSiteResponse
func (a *MsserverAdsitesSiteAPIService) MsserveradsitessiteReferencePutExecute(r MsserverAdsitesSiteAPIMsserveradsitessiteReferencePutRequest) (*UpdateMsserverAdsitesSiteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateMsserverAdsitesSiteResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.MsserveradsitessiteReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverAdsitesSite == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverAdsitesSite is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverAdsitesSite
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
