/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type MsserverDhcpAPI interface {
	/*
		MsserverdhcpGet Retrieve msserver:dhcp objects

		Returns a list of msserver:dhcp objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverDhcpAPIMsserverdhcpGetRequest
	*/
	MsserverdhcpGet(ctx context.Context) MsserverDhcpAPIMsserverdhcpGetRequest

	// MsserverdhcpGetExecute executes the request
	//  @return ListMsserverDhcpResponse
	MsserverdhcpGetExecute(r MsserverDhcpAPIMsserverdhcpGetRequest) (*ListMsserverDhcpResponse, *http.Response, error)
	/*
		MsserverdhcpPost Create a msserver:dhcp object

		Creates a new msserver:dhcp object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverDhcpAPIMsserverdhcpPostRequest
	*/
	MsserverdhcpPost(ctx context.Context) MsserverDhcpAPIMsserverdhcpPostRequest

	// MsserverdhcpPostExecute executes the request
	//  @return CreateMsserverDhcpResponse
	MsserverdhcpPostExecute(r MsserverDhcpAPIMsserverdhcpPostRequest) (*CreateMsserverDhcpResponse, *http.Response, error)
	/*
		MsserverdhcpReferenceDelete Delete a msserver:dhcp object

		Deletes a specific msserver:dhcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:dhcp object
		@return MsserverDhcpAPIMsserverdhcpReferenceDeleteRequest
	*/
	MsserverdhcpReferenceDelete(ctx context.Context, reference string) MsserverDhcpAPIMsserverdhcpReferenceDeleteRequest

	// MsserverdhcpReferenceDeleteExecute executes the request
	MsserverdhcpReferenceDeleteExecute(r MsserverDhcpAPIMsserverdhcpReferenceDeleteRequest) (*http.Response, error)
	/*
		MsserverdhcpReferenceGet Get a specific msserver:dhcp object

		Returns a specific msserver:dhcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:dhcp object
		@return MsserverDhcpAPIMsserverdhcpReferenceGetRequest
	*/
	MsserverdhcpReferenceGet(ctx context.Context, reference string) MsserverDhcpAPIMsserverdhcpReferenceGetRequest

	// MsserverdhcpReferenceGetExecute executes the request
	//  @return GetMsserverDhcpResponse
	MsserverdhcpReferenceGetExecute(r MsserverDhcpAPIMsserverdhcpReferenceGetRequest) (*GetMsserverDhcpResponse, *http.Response, error)
	/*
		MsserverdhcpReferencePut Update a msserver:dhcp object

		Updates a specific msserver:dhcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:dhcp object
		@return MsserverDhcpAPIMsserverdhcpReferencePutRequest
	*/
	MsserverdhcpReferencePut(ctx context.Context, reference string) MsserverDhcpAPIMsserverdhcpReferencePutRequest

	// MsserverdhcpReferencePutExecute executes the request
	//  @return UpdateMsserverDhcpResponse
	MsserverdhcpReferencePutExecute(r MsserverDhcpAPIMsserverdhcpReferencePutRequest) (*UpdateMsserverDhcpResponse, *http.Response, error)
}

// MsserverDhcpAPIService MsserverDhcpAPI service
type MsserverDhcpAPIService internal.Service

type MsserverDhcpAPIMsserverdhcpGetRequest struct {
	ctx            context.Context
	ApiService     MsserverDhcpAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r MsserverDhcpAPIMsserverdhcpGetRequest) ReturnFields(returnFields string) MsserverDhcpAPIMsserverdhcpGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverDhcpAPIMsserverdhcpGetRequest) ReturnFields2(returnFields2 string) MsserverDhcpAPIMsserverdhcpGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r MsserverDhcpAPIMsserverdhcpGetRequest) MaxResults(maxResults int32) MsserverDhcpAPIMsserverdhcpGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r MsserverDhcpAPIMsserverdhcpGetRequest) ReturnAsObject(returnAsObject int32) MsserverDhcpAPIMsserverdhcpGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r MsserverDhcpAPIMsserverdhcpGetRequest) Paging(paging int32) MsserverDhcpAPIMsserverdhcpGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r MsserverDhcpAPIMsserverdhcpGetRequest) PageId(pageId string) MsserverDhcpAPIMsserverdhcpGetRequest {
	r.pageId = &pageId
	return r
}

func (r MsserverDhcpAPIMsserverdhcpGetRequest) Filters(filters map[string]interface{}) MsserverDhcpAPIMsserverdhcpGetRequest {
	r.filters = &filters
	return r
}

func (r MsserverDhcpAPIMsserverdhcpGetRequest) Extattrfilter(extattrfilter map[string]interface{}) MsserverDhcpAPIMsserverdhcpGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r MsserverDhcpAPIMsserverdhcpGetRequest) Execute() (*ListMsserverDhcpResponse, *http.Response, error) {
	return r.ApiService.MsserverdhcpGetExecute(r)
}

/*
MsserverdhcpGet Retrieve msserver:dhcp objects

Returns a list of msserver:dhcp objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverDhcpAPIMsserverdhcpGetRequest
*/
func (a *MsserverDhcpAPIService) MsserverdhcpGet(ctx context.Context) MsserverDhcpAPIMsserverdhcpGetRequest {
	return MsserverDhcpAPIMsserverdhcpGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListMsserverDhcpResponse
func (a *MsserverDhcpAPIService) MsserverdhcpGetExecute(r MsserverDhcpAPIMsserverdhcpGetRequest) (*ListMsserverDhcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListMsserverDhcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDhcpAPIService.MsserverdhcpGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverDhcpAPIMsserverdhcpPostRequest struct {
	ctx            context.Context
	ApiService     MsserverDhcpAPI
	msserverDhcp   *MsserverDhcp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r MsserverDhcpAPIMsserverdhcpPostRequest) MsserverDhcp(msserverDhcp MsserverDhcp) MsserverDhcpAPIMsserverdhcpPostRequest {
	r.msserverDhcp = &msserverDhcp
	return r
}

// Enter the field names followed by comma
func (r MsserverDhcpAPIMsserverdhcpPostRequest) ReturnFields(returnFields string) MsserverDhcpAPIMsserverdhcpPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverDhcpAPIMsserverdhcpPostRequest) ReturnFields2(returnFields2 string) MsserverDhcpAPIMsserverdhcpPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverDhcpAPIMsserverdhcpPostRequest) ReturnAsObject(returnAsObject int32) MsserverDhcpAPIMsserverdhcpPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverDhcpAPIMsserverdhcpPostRequest) Execute() (*CreateMsserverDhcpResponse, *http.Response, error) {
	return r.ApiService.MsserverdhcpPostExecute(r)
}

/*
MsserverdhcpPost Create a msserver:dhcp object

Creates a new msserver:dhcp object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverDhcpAPIMsserverdhcpPostRequest
*/
func (a *MsserverDhcpAPIService) MsserverdhcpPost(ctx context.Context) MsserverDhcpAPIMsserverdhcpPostRequest {
	return MsserverDhcpAPIMsserverdhcpPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateMsserverDhcpResponse
func (a *MsserverDhcpAPIService) MsserverdhcpPostExecute(r MsserverDhcpAPIMsserverdhcpPostRequest) (*CreateMsserverDhcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateMsserverDhcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDhcpAPIService.MsserverdhcpPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverDhcp == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverDhcp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverDhcp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverDhcpAPIMsserverdhcpReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService MsserverDhcpAPI
	reference  string
}

func (r MsserverDhcpAPIMsserverdhcpReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.MsserverdhcpReferenceDeleteExecute(r)
}

/*
MsserverdhcpReferenceDelete Delete a msserver:dhcp object

Deletes a specific msserver:dhcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:dhcp object
	@return MsserverDhcpAPIMsserverdhcpReferenceDeleteRequest
*/
func (a *MsserverDhcpAPIService) MsserverdhcpReferenceDelete(ctx context.Context, reference string) MsserverDhcpAPIMsserverdhcpReferenceDeleteRequest {
	return MsserverDhcpAPIMsserverdhcpReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *MsserverDhcpAPIService) MsserverdhcpReferenceDeleteExecute(r MsserverDhcpAPIMsserverdhcpReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDhcpAPIService.MsserverdhcpReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MsserverDhcpAPIMsserverdhcpReferenceGetRequest struct {
	ctx            context.Context
	ApiService     MsserverDhcpAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r MsserverDhcpAPIMsserverdhcpReferenceGetRequest) ReturnFields(returnFields string) MsserverDhcpAPIMsserverdhcpReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverDhcpAPIMsserverdhcpReferenceGetRequest) ReturnFields2(returnFields2 string) MsserverDhcpAPIMsserverdhcpReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverDhcpAPIMsserverdhcpReferenceGetRequest) ReturnAsObject(returnAsObject int32) MsserverDhcpAPIMsserverdhcpReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverDhcpAPIMsserverdhcpReferenceGetRequest) Execute() (*GetMsserverDhcpResponse, *http.Response, error) {
	return r.ApiService.MsserverdhcpReferenceGetExecute(r)
}

/*
MsserverdhcpReferenceGet Get a specific msserver:dhcp object

Returns a specific msserver:dhcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:dhcp object
	@return MsserverDhcpAPIMsserverdhcpReferenceGetRequest
*/
func (a *MsserverDhcpAPIService) MsserverdhcpReferenceGet(ctx context.Context, reference string) MsserverDhcpAPIMsserverdhcpReferenceGetRequest {
	return MsserverDhcpAPIMsserverdhcpReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetMsserverDhcpResponse
func (a *MsserverDhcpAPIService) MsserverdhcpReferenceGetExecute(r MsserverDhcpAPIMsserverdhcpReferenceGetRequest) (*GetMsserverDhcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetMsserverDhcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDhcpAPIService.MsserverdhcpReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverDhcpAPIMsserverdhcpReferencePutRequest struct {
	ctx            context.Context
	ApiService     MsserverDhcpAPI
	reference      string
	msserverDhcp   *MsserverDhcp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r MsserverDhcpAPIMsserverdhcpReferencePutRequest) MsserverDhcp(msserverDhcp MsserverDhcp) MsserverDhcpAPIMsserverdhcpReferencePutRequest {
	r.msserverDhcp = &msserverDhcp
	return r
}

// Enter the field names followed by comma
func (r MsserverDhcpAPIMsserverdhcpReferencePutRequest) ReturnFields(returnFields string) MsserverDhcpAPIMsserverdhcpReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverDhcpAPIMsserverdhcpReferencePutRequest) ReturnFields2(returnFields2 string) MsserverDhcpAPIMsserverdhcpReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverDhcpAPIMsserverdhcpReferencePutRequest) ReturnAsObject(returnAsObject int32) MsserverDhcpAPIMsserverdhcpReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverDhcpAPIMsserverdhcpReferencePutRequest) Execute() (*UpdateMsserverDhcpResponse, *http.Response, error) {
	return r.ApiService.MsserverdhcpReferencePutExecute(r)
}

/*
MsserverdhcpReferencePut Update a msserver:dhcp object

Updates a specific msserver:dhcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:dhcp object
	@return MsserverDhcpAPIMsserverdhcpReferencePutRequest
*/
func (a *MsserverDhcpAPIService) MsserverdhcpReferencePut(ctx context.Context, reference string) MsserverDhcpAPIMsserverdhcpReferencePutRequest {
	return MsserverDhcpAPIMsserverdhcpReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateMsserverDhcpResponse
func (a *MsserverDhcpAPIService) MsserverdhcpReferencePutExecute(r MsserverDhcpAPIMsserverdhcpReferencePutRequest) (*UpdateMsserverDhcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateMsserverDhcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDhcpAPIService.MsserverdhcpReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverDhcp == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverDhcp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverDhcp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
