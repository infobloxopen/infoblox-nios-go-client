/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type MsserverDnsAPI interface {
	/*
		MsserverdnsGet Retrieve msserver:dns objects

		Returns a list of msserver:dns objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverDnsAPIMsserverdnsGetRequest
	*/
	MsserverdnsGet(ctx context.Context) MsserverDnsAPIMsserverdnsGetRequest

	// MsserverdnsGetExecute executes the request
	//  @return ListMsserverDnsResponse
	MsserverdnsGetExecute(r MsserverDnsAPIMsserverdnsGetRequest) (*ListMsserverDnsResponse, *http.Response, error)
	/*
		MsserverdnsPost Create a msserver:dns object

		Creates a new msserver:dns object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverDnsAPIMsserverdnsPostRequest
	*/
	MsserverdnsPost(ctx context.Context) MsserverDnsAPIMsserverdnsPostRequest

	// MsserverdnsPostExecute executes the request
	//  @return CreateMsserverDnsResponse
	MsserverdnsPostExecute(r MsserverDnsAPIMsserverdnsPostRequest) (*CreateMsserverDnsResponse, *http.Response, error)
	/*
		MsserverdnsReferenceDelete Delete a msserver:dns object

		Deletes a specific msserver:dns object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:dns object
		@return MsserverDnsAPIMsserverdnsReferenceDeleteRequest
	*/
	MsserverdnsReferenceDelete(ctx context.Context, reference string) MsserverDnsAPIMsserverdnsReferenceDeleteRequest

	// MsserverdnsReferenceDeleteExecute executes the request
	MsserverdnsReferenceDeleteExecute(r MsserverDnsAPIMsserverdnsReferenceDeleteRequest) (*http.Response, error)
	/*
		MsserverdnsReferenceGet Get a specific msserver:dns object

		Returns a specific msserver:dns object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:dns object
		@return MsserverDnsAPIMsserverdnsReferenceGetRequest
	*/
	MsserverdnsReferenceGet(ctx context.Context, reference string) MsserverDnsAPIMsserverdnsReferenceGetRequest

	// MsserverdnsReferenceGetExecute executes the request
	//  @return GetMsserverDnsResponse
	MsserverdnsReferenceGetExecute(r MsserverDnsAPIMsserverdnsReferenceGetRequest) (*GetMsserverDnsResponse, *http.Response, error)
	/*
		MsserverdnsReferencePut Update a msserver:dns object

		Updates a specific msserver:dns object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:dns object
		@return MsserverDnsAPIMsserverdnsReferencePutRequest
	*/
	MsserverdnsReferencePut(ctx context.Context, reference string) MsserverDnsAPIMsserverdnsReferencePutRequest

	// MsserverdnsReferencePutExecute executes the request
	//  @return UpdateMsserverDnsResponse
	MsserverdnsReferencePutExecute(r MsserverDnsAPIMsserverdnsReferencePutRequest) (*UpdateMsserverDnsResponse, *http.Response, error)
}

// MsserverDnsAPIService MsserverDnsAPI service
type MsserverDnsAPIService internal.Service

type MsserverDnsAPIMsserverdnsGetRequest struct {
	ctx            context.Context
	ApiService     MsserverDnsAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r MsserverDnsAPIMsserverdnsGetRequest) ReturnFields(returnFields string) MsserverDnsAPIMsserverdnsGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverDnsAPIMsserverdnsGetRequest) ReturnFields2(returnFields2 string) MsserverDnsAPIMsserverdnsGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r MsserverDnsAPIMsserverdnsGetRequest) MaxResults(maxResults int32) MsserverDnsAPIMsserverdnsGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r MsserverDnsAPIMsserverdnsGetRequest) ReturnAsObject(returnAsObject int32) MsserverDnsAPIMsserverdnsGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r MsserverDnsAPIMsserverdnsGetRequest) Paging(paging int32) MsserverDnsAPIMsserverdnsGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r MsserverDnsAPIMsserverdnsGetRequest) PageId(pageId string) MsserverDnsAPIMsserverdnsGetRequest {
	r.pageId = &pageId
	return r
}

func (r MsserverDnsAPIMsserverdnsGetRequest) Filters(filters map[string]interface{}) MsserverDnsAPIMsserverdnsGetRequest {
	r.filters = &filters
	return r
}

func (r MsserverDnsAPIMsserverdnsGetRequest) Extattrfilter(extattrfilter map[string]interface{}) MsserverDnsAPIMsserverdnsGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r MsserverDnsAPIMsserverdnsGetRequest) Execute() (*ListMsserverDnsResponse, *http.Response, error) {
	return r.ApiService.MsserverdnsGetExecute(r)
}

/*
MsserverdnsGet Retrieve msserver:dns objects

Returns a list of msserver:dns objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverDnsAPIMsserverdnsGetRequest
*/
func (a *MsserverDnsAPIService) MsserverdnsGet(ctx context.Context) MsserverDnsAPIMsserverdnsGetRequest {
	return MsserverDnsAPIMsserverdnsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListMsserverDnsResponse
func (a *MsserverDnsAPIService) MsserverdnsGetExecute(r MsserverDnsAPIMsserverdnsGetRequest) (*ListMsserverDnsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListMsserverDnsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDnsAPIService.MsserverdnsGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverDnsAPIMsserverdnsPostRequest struct {
	ctx            context.Context
	ApiService     MsserverDnsAPI
	msserverDns    *MsserverDns
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r MsserverDnsAPIMsserverdnsPostRequest) MsserverDns(msserverDns MsserverDns) MsserverDnsAPIMsserverdnsPostRequest {
	r.msserverDns = &msserverDns
	return r
}

// Enter the field names followed by comma
func (r MsserverDnsAPIMsserverdnsPostRequest) ReturnFields(returnFields string) MsserverDnsAPIMsserverdnsPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverDnsAPIMsserverdnsPostRequest) ReturnFields2(returnFields2 string) MsserverDnsAPIMsserverdnsPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverDnsAPIMsserverdnsPostRequest) ReturnAsObject(returnAsObject int32) MsserverDnsAPIMsserverdnsPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverDnsAPIMsserverdnsPostRequest) Execute() (*CreateMsserverDnsResponse, *http.Response, error) {
	return r.ApiService.MsserverdnsPostExecute(r)
}

/*
MsserverdnsPost Create a msserver:dns object

Creates a new msserver:dns object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverDnsAPIMsserverdnsPostRequest
*/
func (a *MsserverDnsAPIService) MsserverdnsPost(ctx context.Context) MsserverDnsAPIMsserverdnsPostRequest {
	return MsserverDnsAPIMsserverdnsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateMsserverDnsResponse
func (a *MsserverDnsAPIService) MsserverdnsPostExecute(r MsserverDnsAPIMsserverdnsPostRequest) (*CreateMsserverDnsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateMsserverDnsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDnsAPIService.MsserverdnsPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverDns == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverDns is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverDns
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverDnsAPIMsserverdnsReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService MsserverDnsAPI
	reference  string
}

func (r MsserverDnsAPIMsserverdnsReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.MsserverdnsReferenceDeleteExecute(r)
}

/*
MsserverdnsReferenceDelete Delete a msserver:dns object

Deletes a specific msserver:dns object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:dns object
	@return MsserverDnsAPIMsserverdnsReferenceDeleteRequest
*/
func (a *MsserverDnsAPIService) MsserverdnsReferenceDelete(ctx context.Context, reference string) MsserverDnsAPIMsserverdnsReferenceDeleteRequest {
	return MsserverDnsAPIMsserverdnsReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *MsserverDnsAPIService) MsserverdnsReferenceDeleteExecute(r MsserverDnsAPIMsserverdnsReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDnsAPIService.MsserverdnsReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dns/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MsserverDnsAPIMsserverdnsReferenceGetRequest struct {
	ctx            context.Context
	ApiService     MsserverDnsAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r MsserverDnsAPIMsserverdnsReferenceGetRequest) ReturnFields(returnFields string) MsserverDnsAPIMsserverdnsReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverDnsAPIMsserverdnsReferenceGetRequest) ReturnFields2(returnFields2 string) MsserverDnsAPIMsserverdnsReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverDnsAPIMsserverdnsReferenceGetRequest) ReturnAsObject(returnAsObject int32) MsserverDnsAPIMsserverdnsReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverDnsAPIMsserverdnsReferenceGetRequest) Execute() (*GetMsserverDnsResponse, *http.Response, error) {
	return r.ApiService.MsserverdnsReferenceGetExecute(r)
}

/*
MsserverdnsReferenceGet Get a specific msserver:dns object

Returns a specific msserver:dns object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:dns object
	@return MsserverDnsAPIMsserverdnsReferenceGetRequest
*/
func (a *MsserverDnsAPIService) MsserverdnsReferenceGet(ctx context.Context, reference string) MsserverDnsAPIMsserverdnsReferenceGetRequest {
	return MsserverDnsAPIMsserverdnsReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetMsserverDnsResponse
func (a *MsserverDnsAPIService) MsserverdnsReferenceGetExecute(r MsserverDnsAPIMsserverdnsReferenceGetRequest) (*GetMsserverDnsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetMsserverDnsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDnsAPIService.MsserverdnsReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dns/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverDnsAPIMsserverdnsReferencePutRequest struct {
	ctx            context.Context
	ApiService     MsserverDnsAPI
	reference      string
	msserverDns    *MsserverDns
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r MsserverDnsAPIMsserverdnsReferencePutRequest) MsserverDns(msserverDns MsserverDns) MsserverDnsAPIMsserverdnsReferencePutRequest {
	r.msserverDns = &msserverDns
	return r
}

// Enter the field names followed by comma
func (r MsserverDnsAPIMsserverdnsReferencePutRequest) ReturnFields(returnFields string) MsserverDnsAPIMsserverdnsReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverDnsAPIMsserverdnsReferencePutRequest) ReturnFields2(returnFields2 string) MsserverDnsAPIMsserverdnsReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverDnsAPIMsserverdnsReferencePutRequest) ReturnAsObject(returnAsObject int32) MsserverDnsAPIMsserverdnsReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverDnsAPIMsserverdnsReferencePutRequest) Execute() (*UpdateMsserverDnsResponse, *http.Response, error) {
	return r.ApiService.MsserverdnsReferencePutExecute(r)
}

/*
MsserverdnsReferencePut Update a msserver:dns object

Updates a specific msserver:dns object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:dns object
	@return MsserverDnsAPIMsserverdnsReferencePutRequest
*/
func (a *MsserverDnsAPIService) MsserverdnsReferencePut(ctx context.Context, reference string) MsserverDnsAPIMsserverdnsReferencePutRequest {
	return MsserverDnsAPIMsserverdnsReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateMsserverDnsResponse
func (a *MsserverDnsAPIService) MsserverdnsReferencePutExecute(r MsserverDnsAPIMsserverdnsReferencePutRequest) (*UpdateMsserverDnsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateMsserverDnsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverDnsAPIService.MsserverdnsReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dns/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverDns == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverDns is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverDns
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
