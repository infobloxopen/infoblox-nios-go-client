/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type BfdtemplateAPI interface {
	/*
		Get Retrieve bfdtemplate objects

		Returns a list of bfdtemplate objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return BfdtemplateAPIGetRequest
	*/
	Get(ctx context.Context) BfdtemplateAPIGetRequest

	// GetExecute executes the request
	//  @return ListBfdtemplateResponse
	GetExecute(r BfdtemplateAPIGetRequest) (*ListBfdtemplateResponse, *http.Response, error)
	/*
		Post Create a bfdtemplate object

		Creates a new bfdtemplate object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return BfdtemplateAPIPostRequest
	*/
	Post(ctx context.Context) BfdtemplateAPIPostRequest

	// PostExecute executes the request
	//  @return CreateBfdtemplateResponse
	PostExecute(r BfdtemplateAPIPostRequest) (*CreateBfdtemplateResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a bfdtemplate object

		Deletes a specific bfdtemplate object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the bfdtemplate object
		@return BfdtemplateAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) BfdtemplateAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r BfdtemplateAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific bfdtemplate object

		Returns a specific bfdtemplate object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the bfdtemplate object
		@return BfdtemplateAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) BfdtemplateAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetBfdtemplateResponse
	ReferenceGetExecute(r BfdtemplateAPIReferenceGetRequest) (*GetBfdtemplateResponse, *http.Response, error)
	/*
		ReferencePut Update a bfdtemplate object

		Updates a specific bfdtemplate object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the bfdtemplate object
		@return BfdtemplateAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) BfdtemplateAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateBfdtemplateResponse
	ReferencePutExecute(r BfdtemplateAPIReferencePutRequest) (*UpdateBfdtemplateResponse, *http.Response, error)
}

// BfdtemplateAPIService BfdtemplateAPI service
type BfdtemplateAPIService internal.Service

type BfdtemplateAPIGetRequest struct {
	ctx            context.Context
	ApiService     BfdtemplateAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r BfdtemplateAPIGetRequest) ReturnFields(returnFields string) BfdtemplateAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r BfdtemplateAPIGetRequest) ReturnFields2(returnFields2 string) BfdtemplateAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r BfdtemplateAPIGetRequest) MaxResults(maxResults int32) BfdtemplateAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r BfdtemplateAPIGetRequest) ReturnAsObject(returnAsObject int32) BfdtemplateAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r BfdtemplateAPIGetRequest) Paging(paging int32) BfdtemplateAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r BfdtemplateAPIGetRequest) PageId(pageId string) BfdtemplateAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r BfdtemplateAPIGetRequest) Filters(filters map[string]interface{}) BfdtemplateAPIGetRequest {
	r.filters = &filters
	return r
}

func (r BfdtemplateAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) BfdtemplateAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r BfdtemplateAPIGetRequest) Execute() (*ListBfdtemplateResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve bfdtemplate objects

Returns a list of bfdtemplate objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BfdtemplateAPIGetRequest
*/
func (a *BfdtemplateAPIService) Get(ctx context.Context) BfdtemplateAPIGetRequest {
	return BfdtemplateAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListBfdtemplateResponse
func (a *BfdtemplateAPIService) GetExecute(r BfdtemplateAPIGetRequest) (*ListBfdtemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListBfdtemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BfdtemplateAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bfdtemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type BfdtemplateAPIPostRequest struct {
	ctx            context.Context
	ApiService     BfdtemplateAPI
	bfdtemplate    *Bfdtemplate
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r BfdtemplateAPIPostRequest) Bfdtemplate(bfdtemplate Bfdtemplate) BfdtemplateAPIPostRequest {
	r.bfdtemplate = &bfdtemplate
	return r
}

// Enter the field names followed by comma
func (r BfdtemplateAPIPostRequest) ReturnFields(returnFields string) BfdtemplateAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r BfdtemplateAPIPostRequest) ReturnFields2(returnFields2 string) BfdtemplateAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r BfdtemplateAPIPostRequest) ReturnAsObject(returnAsObject int32) BfdtemplateAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r BfdtemplateAPIPostRequest) Execute() (*CreateBfdtemplateResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a bfdtemplate object

Creates a new bfdtemplate object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BfdtemplateAPIPostRequest
*/
func (a *BfdtemplateAPIService) Post(ctx context.Context) BfdtemplateAPIPostRequest {
	return BfdtemplateAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateBfdtemplateResponse
func (a *BfdtemplateAPIService) PostExecute(r BfdtemplateAPIPostRequest) (*CreateBfdtemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateBfdtemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BfdtemplateAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bfdtemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bfdtemplate == nil {
		return localVarReturnValue, nil, internal.ReportError("bfdtemplate is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bfdtemplate
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type BfdtemplateAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService BfdtemplateAPI
	reference  string
}

func (r BfdtemplateAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a bfdtemplate object

Deletes a specific bfdtemplate object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the bfdtemplate object
	@return BfdtemplateAPIReferenceDeleteRequest
*/
func (a *BfdtemplateAPIService) ReferenceDelete(ctx context.Context, reference string) BfdtemplateAPIReferenceDeleteRequest {
	return BfdtemplateAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *BfdtemplateAPIService) ReferenceDeleteExecute(r BfdtemplateAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BfdtemplateAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bfdtemplate/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BfdtemplateAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     BfdtemplateAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r BfdtemplateAPIReferenceGetRequest) ReturnFields(returnFields string) BfdtemplateAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r BfdtemplateAPIReferenceGetRequest) ReturnFields2(returnFields2 string) BfdtemplateAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r BfdtemplateAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) BfdtemplateAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r BfdtemplateAPIReferenceGetRequest) Execute() (*GetBfdtemplateResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific bfdtemplate object

Returns a specific bfdtemplate object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the bfdtemplate object
	@return BfdtemplateAPIReferenceGetRequest
*/
func (a *BfdtemplateAPIService) ReferenceGet(ctx context.Context, reference string) BfdtemplateAPIReferenceGetRequest {
	return BfdtemplateAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetBfdtemplateResponse
func (a *BfdtemplateAPIService) ReferenceGetExecute(r BfdtemplateAPIReferenceGetRequest) (*GetBfdtemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetBfdtemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BfdtemplateAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bfdtemplate/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type BfdtemplateAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     BfdtemplateAPI
	reference      string
	bfdtemplate    *Bfdtemplate
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r BfdtemplateAPIReferencePutRequest) Bfdtemplate(bfdtemplate Bfdtemplate) BfdtemplateAPIReferencePutRequest {
	r.bfdtemplate = &bfdtemplate
	return r
}

// Enter the field names followed by comma
func (r BfdtemplateAPIReferencePutRequest) ReturnFields(returnFields string) BfdtemplateAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r BfdtemplateAPIReferencePutRequest) ReturnFields2(returnFields2 string) BfdtemplateAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r BfdtemplateAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) BfdtemplateAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r BfdtemplateAPIReferencePutRequest) Execute() (*UpdateBfdtemplateResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a bfdtemplate object

Updates a specific bfdtemplate object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the bfdtemplate object
	@return BfdtemplateAPIReferencePutRequest
*/
func (a *BfdtemplateAPIService) ReferencePut(ctx context.Context, reference string) BfdtemplateAPIReferencePutRequest {
	return BfdtemplateAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateBfdtemplateResponse
func (a *BfdtemplateAPIService) ReferencePutExecute(r BfdtemplateAPIReferencePutRequest) (*UpdateBfdtemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateBfdtemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BfdtemplateAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bfdtemplate/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bfdtemplate == nil {
		return localVarReturnValue, nil, internal.ReportError("bfdtemplate is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bfdtemplate
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
