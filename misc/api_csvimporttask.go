/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type CsvimporttaskAPI interface {
	/*
		Get Retrieve csvimporttask objects

		Returns a list of csvimporttask objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return CsvimporttaskAPIGetRequest
	*/
	Get(ctx context.Context) CsvimporttaskAPIGetRequest

	// GetExecute executes the request
	//  @return ListCsvimporttaskResponse
	GetExecute(r CsvimporttaskAPIGetRequest) (*ListCsvimporttaskResponse, *http.Response, error)
	/*
		ReferenceGet Get a specific csvimporttask object

		Returns a specific csvimporttask object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the csvimporttask object
		@return CsvimporttaskAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) CsvimporttaskAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetCsvimporttaskResponse
	ReferenceGetExecute(r CsvimporttaskAPIReferenceGetRequest) (*GetCsvimporttaskResponse, *http.Response, error)
	/*
		ReferencePut Update a csvimporttask object

		Updates a specific csvimporttask object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the csvimporttask object
		@return CsvimporttaskAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) CsvimporttaskAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateCsvimporttaskResponse
	ReferencePutExecute(r CsvimporttaskAPIReferencePutRequest) (*UpdateCsvimporttaskResponse, *http.Response, error)
}

// CsvimporttaskAPIService CsvimporttaskAPI service
type CsvimporttaskAPIService internal.Service

type CsvimporttaskAPIGetRequest struct {
	ctx            context.Context
	ApiService     CsvimporttaskAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r CsvimporttaskAPIGetRequest) ReturnFields(returnFields string) CsvimporttaskAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r CsvimporttaskAPIGetRequest) ReturnFields2(returnFields2 string) CsvimporttaskAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r CsvimporttaskAPIGetRequest) MaxResults(maxResults int32) CsvimporttaskAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r CsvimporttaskAPIGetRequest) ReturnAsObject(returnAsObject int32) CsvimporttaskAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r CsvimporttaskAPIGetRequest) Paging(paging int32) CsvimporttaskAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r CsvimporttaskAPIGetRequest) PageId(pageId string) CsvimporttaskAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r CsvimporttaskAPIGetRequest) Filters(filters map[string]interface{}) CsvimporttaskAPIGetRequest {
	r.filters = &filters
	return r
}

func (r CsvimporttaskAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) CsvimporttaskAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r CsvimporttaskAPIGetRequest) Execute() (*ListCsvimporttaskResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve csvimporttask objects

Returns a list of csvimporttask objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CsvimporttaskAPIGetRequest
*/
func (a *CsvimporttaskAPIService) Get(ctx context.Context) CsvimporttaskAPIGetRequest {
	return CsvimporttaskAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListCsvimporttaskResponse
func (a *CsvimporttaskAPIService) GetExecute(r CsvimporttaskAPIGetRequest) (*ListCsvimporttaskResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListCsvimporttaskResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "CsvimporttaskAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/csvimporttask"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type CsvimporttaskAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     CsvimporttaskAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r CsvimporttaskAPIReferenceGetRequest) ReturnFields(returnFields string) CsvimporttaskAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r CsvimporttaskAPIReferenceGetRequest) ReturnFields2(returnFields2 string) CsvimporttaskAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r CsvimporttaskAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) CsvimporttaskAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r CsvimporttaskAPIReferenceGetRequest) Execute() (*GetCsvimporttaskResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific csvimporttask object

Returns a specific csvimporttask object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the csvimporttask object
	@return CsvimporttaskAPIReferenceGetRequest
*/
func (a *CsvimporttaskAPIService) ReferenceGet(ctx context.Context, reference string) CsvimporttaskAPIReferenceGetRequest {
	return CsvimporttaskAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetCsvimporttaskResponse
func (a *CsvimporttaskAPIService) ReferenceGetExecute(r CsvimporttaskAPIReferenceGetRequest) (*GetCsvimporttaskResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetCsvimporttaskResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "CsvimporttaskAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/csvimporttask/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type CsvimporttaskAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     CsvimporttaskAPI
	reference      string
	csvimporttask  *Csvimporttask
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r CsvimporttaskAPIReferencePutRequest) Csvimporttask(csvimporttask Csvimporttask) CsvimporttaskAPIReferencePutRequest {
	r.csvimporttask = &csvimporttask
	return r
}

// Enter the field names followed by comma
func (r CsvimporttaskAPIReferencePutRequest) ReturnFields(returnFields string) CsvimporttaskAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r CsvimporttaskAPIReferencePutRequest) ReturnFields2(returnFields2 string) CsvimporttaskAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r CsvimporttaskAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) CsvimporttaskAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r CsvimporttaskAPIReferencePutRequest) Execute() (*UpdateCsvimporttaskResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a csvimporttask object

Updates a specific csvimporttask object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the csvimporttask object
	@return CsvimporttaskAPIReferencePutRequest
*/
func (a *CsvimporttaskAPIService) ReferencePut(ctx context.Context, reference string) CsvimporttaskAPIReferencePutRequest {
	return CsvimporttaskAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateCsvimporttaskResponse
func (a *CsvimporttaskAPIService) ReferencePutExecute(r CsvimporttaskAPIReferencePutRequest) (*UpdateCsvimporttaskResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateCsvimporttaskResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "CsvimporttaskAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/csvimporttask/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.csvimporttask == nil {
		return localVarReturnValue, nil, internal.ReportError("csvimporttask is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.csvimporttask
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
