/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SyslogEndpointAPI interface {
	/*
		SyslogendpointGet Retrieve syslog:endpoint objects

		Returns a list of syslog:endpoint objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SyslogEndpointAPISyslogendpointGetRequest
	*/
	SyslogendpointGet(ctx context.Context) SyslogEndpointAPISyslogendpointGetRequest

	// SyslogendpointGetExecute executes the request
	//  @return ListSyslogEndpointResponse
	SyslogendpointGetExecute(r SyslogEndpointAPISyslogendpointGetRequest) (*ListSyslogEndpointResponse, *http.Response, error)
	/*
		SyslogendpointPost Create a syslog:endpoint object

		Creates a new syslog:endpoint object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SyslogEndpointAPISyslogendpointPostRequest
	*/
	SyslogendpointPost(ctx context.Context) SyslogEndpointAPISyslogendpointPostRequest

	// SyslogendpointPostExecute executes the request
	//  @return CreateSyslogEndpointResponse
	SyslogendpointPostExecute(r SyslogEndpointAPISyslogendpointPostRequest) (*CreateSyslogEndpointResponse, *http.Response, error)
	/*
		SyslogendpointReferenceDelete Delete a syslog:endpoint object

		Deletes a specific syslog:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the syslog:endpoint object
		@return SyslogEndpointAPISyslogendpointReferenceDeleteRequest
	*/
	SyslogendpointReferenceDelete(ctx context.Context, reference string) SyslogEndpointAPISyslogendpointReferenceDeleteRequest

	// SyslogendpointReferenceDeleteExecute executes the request
	SyslogendpointReferenceDeleteExecute(r SyslogEndpointAPISyslogendpointReferenceDeleteRequest) (*http.Response, error)
	/*
		SyslogendpointReferenceGet Get a specific syslog:endpoint object

		Returns a specific syslog:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the syslog:endpoint object
		@return SyslogEndpointAPISyslogendpointReferenceGetRequest
	*/
	SyslogendpointReferenceGet(ctx context.Context, reference string) SyslogEndpointAPISyslogendpointReferenceGetRequest

	// SyslogendpointReferenceGetExecute executes the request
	//  @return GetSyslogEndpointResponse
	SyslogendpointReferenceGetExecute(r SyslogEndpointAPISyslogendpointReferenceGetRequest) (*GetSyslogEndpointResponse, *http.Response, error)
	/*
		SyslogendpointReferencePut Update a syslog:endpoint object

		Updates a specific syslog:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the syslog:endpoint object
		@return SyslogEndpointAPISyslogendpointReferencePutRequest
	*/
	SyslogendpointReferencePut(ctx context.Context, reference string) SyslogEndpointAPISyslogendpointReferencePutRequest

	// SyslogendpointReferencePutExecute executes the request
	//  @return UpdateSyslogEndpointResponse
	SyslogendpointReferencePutExecute(r SyslogEndpointAPISyslogendpointReferencePutRequest) (*UpdateSyslogEndpointResponse, *http.Response, error)
}

// SyslogEndpointAPIService SyslogEndpointAPI service
type SyslogEndpointAPIService internal.Service

type SyslogEndpointAPISyslogendpointGetRequest struct {
	ctx            context.Context
	ApiService     SyslogEndpointAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r SyslogEndpointAPISyslogendpointGetRequest) ReturnFields(returnFields string) SyslogEndpointAPISyslogendpointGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SyslogEndpointAPISyslogendpointGetRequest) ReturnFields2(returnFields2 string) SyslogEndpointAPISyslogendpointGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r SyslogEndpointAPISyslogendpointGetRequest) MaxResults(maxResults int32) SyslogEndpointAPISyslogendpointGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SyslogEndpointAPISyslogendpointGetRequest) ReturnAsObject(returnAsObject int32) SyslogEndpointAPISyslogendpointGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SyslogEndpointAPISyslogendpointGetRequest) Paging(paging int32) SyslogEndpointAPISyslogendpointGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SyslogEndpointAPISyslogendpointGetRequest) PageId(pageId string) SyslogEndpointAPISyslogendpointGetRequest {
	r.pageId = &pageId
	return r
}

func (r SyslogEndpointAPISyslogendpointGetRequest) Filters(filters map[string]interface{}) SyslogEndpointAPISyslogendpointGetRequest {
	r.filters = &filters
	return r
}

func (r SyslogEndpointAPISyslogendpointGetRequest) Extattrfilter(extattrfilter map[string]interface{}) SyslogEndpointAPISyslogendpointGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SyslogEndpointAPISyslogendpointGetRequest) Execute() (*ListSyslogEndpointResponse, *http.Response, error) {
	return r.ApiService.SyslogendpointGetExecute(r)
}

/*
SyslogendpointGet Retrieve syslog:endpoint objects

Returns a list of syslog:endpoint objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SyslogEndpointAPISyslogendpointGetRequest
*/
func (a *SyslogEndpointAPIService) SyslogendpointGet(ctx context.Context) SyslogEndpointAPISyslogendpointGetRequest {
	return SyslogEndpointAPISyslogendpointGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSyslogEndpointResponse
func (a *SyslogEndpointAPIService) SyslogendpointGetExecute(r SyslogEndpointAPISyslogendpointGetRequest) (*ListSyslogEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSyslogEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SyslogEndpointAPIService.SyslogendpointGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/syslog:endpoint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SyslogEndpointAPISyslogendpointPostRequest struct {
	ctx            context.Context
	ApiService     SyslogEndpointAPI
	syslogEndpoint *SyslogEndpoint
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r SyslogEndpointAPISyslogendpointPostRequest) SyslogEndpoint(syslogEndpoint SyslogEndpoint) SyslogEndpointAPISyslogendpointPostRequest {
	r.syslogEndpoint = &syslogEndpoint
	return r
}

// Enter the field names followed by comma
func (r SyslogEndpointAPISyslogendpointPostRequest) ReturnFields(returnFields string) SyslogEndpointAPISyslogendpointPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SyslogEndpointAPISyslogendpointPostRequest) ReturnFields2(returnFields2 string) SyslogEndpointAPISyslogendpointPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SyslogEndpointAPISyslogendpointPostRequest) ReturnAsObject(returnAsObject int32) SyslogEndpointAPISyslogendpointPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SyslogEndpointAPISyslogendpointPostRequest) Execute() (*CreateSyslogEndpointResponse, *http.Response, error) {
	return r.ApiService.SyslogendpointPostExecute(r)
}

/*
SyslogendpointPost Create a syslog:endpoint object

Creates a new syslog:endpoint object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SyslogEndpointAPISyslogendpointPostRequest
*/
func (a *SyslogEndpointAPIService) SyslogendpointPost(ctx context.Context) SyslogEndpointAPISyslogendpointPostRequest {
	return SyslogEndpointAPISyslogendpointPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSyslogEndpointResponse
func (a *SyslogEndpointAPIService) SyslogendpointPostExecute(r SyslogEndpointAPISyslogendpointPostRequest) (*CreateSyslogEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSyslogEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SyslogEndpointAPIService.SyslogendpointPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/syslog:endpoint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.syslogEndpoint == nil {
		return localVarReturnValue, nil, internal.ReportError("syslogEndpoint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.syslogEndpoint != nil {
		if r.syslogEndpoint.Extattrs == nil {
			r.syslogEndpoint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.syslogEndpoint.Extattrs)[k]; !ok {
				(*r.syslogEndpoint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.syslogEndpoint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SyslogEndpointAPISyslogendpointReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService SyslogEndpointAPI
	reference  string
}

func (r SyslogEndpointAPISyslogendpointReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SyslogendpointReferenceDeleteExecute(r)
}

/*
SyslogendpointReferenceDelete Delete a syslog:endpoint object

Deletes a specific syslog:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the syslog:endpoint object
	@return SyslogEndpointAPISyslogendpointReferenceDeleteRequest
*/
func (a *SyslogEndpointAPIService) SyslogendpointReferenceDelete(ctx context.Context, reference string) SyslogEndpointAPISyslogendpointReferenceDeleteRequest {
	return SyslogEndpointAPISyslogendpointReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SyslogEndpointAPIService) SyslogendpointReferenceDeleteExecute(r SyslogEndpointAPISyslogendpointReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SyslogEndpointAPIService.SyslogendpointReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/syslog:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SyslogEndpointAPISyslogendpointReferenceGetRequest struct {
	ctx            context.Context
	ApiService     SyslogEndpointAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r SyslogEndpointAPISyslogendpointReferenceGetRequest) ReturnFields(returnFields string) SyslogEndpointAPISyslogendpointReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SyslogEndpointAPISyslogendpointReferenceGetRequest) ReturnFields2(returnFields2 string) SyslogEndpointAPISyslogendpointReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SyslogEndpointAPISyslogendpointReferenceGetRequest) ReturnAsObject(returnAsObject int32) SyslogEndpointAPISyslogendpointReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SyslogEndpointAPISyslogendpointReferenceGetRequest) Execute() (*GetSyslogEndpointResponse, *http.Response, error) {
	return r.ApiService.SyslogendpointReferenceGetExecute(r)
}

/*
SyslogendpointReferenceGet Get a specific syslog:endpoint object

Returns a specific syslog:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the syslog:endpoint object
	@return SyslogEndpointAPISyslogendpointReferenceGetRequest
*/
func (a *SyslogEndpointAPIService) SyslogendpointReferenceGet(ctx context.Context, reference string) SyslogEndpointAPISyslogendpointReferenceGetRequest {
	return SyslogEndpointAPISyslogendpointReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSyslogEndpointResponse
func (a *SyslogEndpointAPIService) SyslogendpointReferenceGetExecute(r SyslogEndpointAPISyslogendpointReferenceGetRequest) (*GetSyslogEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSyslogEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SyslogEndpointAPIService.SyslogendpointReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/syslog:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SyslogEndpointAPISyslogendpointReferencePutRequest struct {
	ctx            context.Context
	ApiService     SyslogEndpointAPI
	reference      string
	syslogEndpoint *SyslogEndpoint
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r SyslogEndpointAPISyslogendpointReferencePutRequest) SyslogEndpoint(syslogEndpoint SyslogEndpoint) SyslogEndpointAPISyslogendpointReferencePutRequest {
	r.syslogEndpoint = &syslogEndpoint
	return r
}

// Enter the field names followed by comma
func (r SyslogEndpointAPISyslogendpointReferencePutRequest) ReturnFields(returnFields string) SyslogEndpointAPISyslogendpointReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SyslogEndpointAPISyslogendpointReferencePutRequest) ReturnFields2(returnFields2 string) SyslogEndpointAPISyslogendpointReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SyslogEndpointAPISyslogendpointReferencePutRequest) ReturnAsObject(returnAsObject int32) SyslogEndpointAPISyslogendpointReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SyslogEndpointAPISyslogendpointReferencePutRequest) Execute() (*UpdateSyslogEndpointResponse, *http.Response, error) {
	return r.ApiService.SyslogendpointReferencePutExecute(r)
}

/*
SyslogendpointReferencePut Update a syslog:endpoint object

Updates a specific syslog:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the syslog:endpoint object
	@return SyslogEndpointAPISyslogendpointReferencePutRequest
*/
func (a *SyslogEndpointAPIService) SyslogendpointReferencePut(ctx context.Context, reference string) SyslogEndpointAPISyslogendpointReferencePutRequest {
	return SyslogEndpointAPISyslogendpointReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSyslogEndpointResponse
func (a *SyslogEndpointAPIService) SyslogendpointReferencePutExecute(r SyslogEndpointAPISyslogendpointReferencePutRequest) (*UpdateSyslogEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSyslogEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SyslogEndpointAPIService.SyslogendpointReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/syslog:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.syslogEndpoint == nil {
		return localVarReturnValue, nil, internal.ReportError("syslogEndpoint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.syslogEndpoint != nil {
		if r.syslogEndpoint.Extattrs == nil {
			r.syslogEndpoint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.syslogEndpoint.Extattrs)[k]; !ok {
				(*r.syslogEndpoint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.syslogEndpoint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
