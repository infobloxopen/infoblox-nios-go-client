/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type TftpfiledirAPI interface {
	/*
		Get Retrieve tftpfiledir objects

		Returns a list of tftpfiledir objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return TftpfiledirAPIGetRequest
	*/
	Get(ctx context.Context) TftpfiledirAPIGetRequest

	// GetExecute executes the request
	//  @return ListTftpfiledirResponse
	GetExecute(r TftpfiledirAPIGetRequest) (*ListTftpfiledirResponse, *http.Response, error)
	/*
		Post Create a tftpfiledir object

		Creates a new tftpfiledir object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return TftpfiledirAPIPostRequest
	*/
	Post(ctx context.Context) TftpfiledirAPIPostRequest

	// PostExecute executes the request
	//  @return CreateTftpfiledirResponse
	PostExecute(r TftpfiledirAPIPostRequest) (*CreateTftpfiledirResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a tftpfiledir object

		Deletes a specific tftpfiledir object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the tftpfiledir object
		@return TftpfiledirAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) TftpfiledirAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r TftpfiledirAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific tftpfiledir object

		Returns a specific tftpfiledir object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the tftpfiledir object
		@return TftpfiledirAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) TftpfiledirAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetTftpfiledirResponse
	ReferenceGetExecute(r TftpfiledirAPIReferenceGetRequest) (*GetTftpfiledirResponse, *http.Response, error)
	/*
		ReferencePut Update a tftpfiledir object

		Updates a specific tftpfiledir object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the tftpfiledir object
		@return TftpfiledirAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) TftpfiledirAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateTftpfiledirResponse
	ReferencePutExecute(r TftpfiledirAPIReferencePutRequest) (*UpdateTftpfiledirResponse, *http.Response, error)
}

// TftpfiledirAPIService TftpfiledirAPI service
type TftpfiledirAPIService internal.Service

type TftpfiledirAPIGetRequest struct {
	ctx            context.Context
	ApiService     TftpfiledirAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r TftpfiledirAPIGetRequest) ReturnFields(returnFields string) TftpfiledirAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TftpfiledirAPIGetRequest) ReturnFields2(returnFields2 string) TftpfiledirAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r TftpfiledirAPIGetRequest) MaxResults(maxResults int32) TftpfiledirAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r TftpfiledirAPIGetRequest) ReturnAsObject(returnAsObject int32) TftpfiledirAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r TftpfiledirAPIGetRequest) Paging(paging int32) TftpfiledirAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r TftpfiledirAPIGetRequest) PageId(pageId string) TftpfiledirAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r TftpfiledirAPIGetRequest) Filters(filters map[string]interface{}) TftpfiledirAPIGetRequest {
	r.filters = &filters
	return r
}

func (r TftpfiledirAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) TftpfiledirAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r TftpfiledirAPIGetRequest) Execute() (*ListTftpfiledirResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve tftpfiledir objects

Returns a list of tftpfiledir objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TftpfiledirAPIGetRequest
*/
func (a *TftpfiledirAPIService) Get(ctx context.Context) TftpfiledirAPIGetRequest {
	return TftpfiledirAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListTftpfiledirResponse
func (a *TftpfiledirAPIService) GetExecute(r TftpfiledirAPIGetRequest) (*ListTftpfiledirResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListTftpfiledirResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TftpfiledirAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tftpfiledir"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type TftpfiledirAPIPostRequest struct {
	ctx            context.Context
	ApiService     TftpfiledirAPI
	tftpfiledir    *Tftpfiledir
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r TftpfiledirAPIPostRequest) Tftpfiledir(tftpfiledir Tftpfiledir) TftpfiledirAPIPostRequest {
	r.tftpfiledir = &tftpfiledir
	return r
}

// Enter the field names followed by comma
func (r TftpfiledirAPIPostRequest) ReturnFields(returnFields string) TftpfiledirAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TftpfiledirAPIPostRequest) ReturnFields2(returnFields2 string) TftpfiledirAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r TftpfiledirAPIPostRequest) ReturnAsObject(returnAsObject int32) TftpfiledirAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r TftpfiledirAPIPostRequest) Execute() (*CreateTftpfiledirResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a tftpfiledir object

Creates a new tftpfiledir object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TftpfiledirAPIPostRequest
*/
func (a *TftpfiledirAPIService) Post(ctx context.Context) TftpfiledirAPIPostRequest {
	return TftpfiledirAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateTftpfiledirResponse
func (a *TftpfiledirAPIService) PostExecute(r TftpfiledirAPIPostRequest) (*CreateTftpfiledirResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateTftpfiledirResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TftpfiledirAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tftpfiledir"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tftpfiledir == nil {
		return localVarReturnValue, nil, internal.ReportError("tftpfiledir is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tftpfiledir
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type TftpfiledirAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService TftpfiledirAPI
	reference  string
}

func (r TftpfiledirAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a tftpfiledir object

Deletes a specific tftpfiledir object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the tftpfiledir object
	@return TftpfiledirAPIReferenceDeleteRequest
*/
func (a *TftpfiledirAPIService) ReferenceDelete(ctx context.Context, reference string) TftpfiledirAPIReferenceDeleteRequest {
	return TftpfiledirAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *TftpfiledirAPIService) ReferenceDeleteExecute(r TftpfiledirAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TftpfiledirAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tftpfiledir/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TftpfiledirAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     TftpfiledirAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r TftpfiledirAPIReferenceGetRequest) ReturnFields(returnFields string) TftpfiledirAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TftpfiledirAPIReferenceGetRequest) ReturnFields2(returnFields2 string) TftpfiledirAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r TftpfiledirAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) TftpfiledirAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r TftpfiledirAPIReferenceGetRequest) Execute() (*GetTftpfiledirResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific tftpfiledir object

Returns a specific tftpfiledir object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the tftpfiledir object
	@return TftpfiledirAPIReferenceGetRequest
*/
func (a *TftpfiledirAPIService) ReferenceGet(ctx context.Context, reference string) TftpfiledirAPIReferenceGetRequest {
	return TftpfiledirAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetTftpfiledirResponse
func (a *TftpfiledirAPIService) ReferenceGetExecute(r TftpfiledirAPIReferenceGetRequest) (*GetTftpfiledirResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetTftpfiledirResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TftpfiledirAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tftpfiledir/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type TftpfiledirAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     TftpfiledirAPI
	reference      string
	tftpfiledir    *Tftpfiledir
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r TftpfiledirAPIReferencePutRequest) Tftpfiledir(tftpfiledir Tftpfiledir) TftpfiledirAPIReferencePutRequest {
	r.tftpfiledir = &tftpfiledir
	return r
}

// Enter the field names followed by comma
func (r TftpfiledirAPIReferencePutRequest) ReturnFields(returnFields string) TftpfiledirAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TftpfiledirAPIReferencePutRequest) ReturnFields2(returnFields2 string) TftpfiledirAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r TftpfiledirAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) TftpfiledirAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r TftpfiledirAPIReferencePutRequest) Execute() (*UpdateTftpfiledirResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a tftpfiledir object

Updates a specific tftpfiledir object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the tftpfiledir object
	@return TftpfiledirAPIReferencePutRequest
*/
func (a *TftpfiledirAPIService) ReferencePut(ctx context.Context, reference string) TftpfiledirAPIReferencePutRequest {
	return TftpfiledirAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateTftpfiledirResponse
func (a *TftpfiledirAPIService) ReferencePutExecute(r TftpfiledirAPIReferencePutRequest) (*UpdateTftpfiledirResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateTftpfiledirResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TftpfiledirAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tftpfiledir/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tftpfiledir == nil {
		return localVarReturnValue, nil, internal.ReportError("tftpfiledir is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tftpfiledir
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
