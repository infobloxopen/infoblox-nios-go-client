/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NotificationRestEndpointAPI interface {
	/*
		NotificationrestendpointGet Retrieve notification:rest:endpoint objects

		Returns a list of notification:rest:endpoint objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NotificationRestEndpointAPINotificationrestendpointGetRequest
	*/
	NotificationrestendpointGet(ctx context.Context) NotificationRestEndpointAPINotificationrestendpointGetRequest

	// NotificationrestendpointGetExecute executes the request
	//  @return ListNotificationRestEndpointResponse
	NotificationrestendpointGetExecute(r NotificationRestEndpointAPINotificationrestendpointGetRequest) (*ListNotificationRestEndpointResponse, *http.Response, error)
	/*
		NotificationrestendpointPost Create a notification:rest:endpoint object

		Creates a new notification:rest:endpoint object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NotificationRestEndpointAPINotificationrestendpointPostRequest
	*/
	NotificationrestendpointPost(ctx context.Context) NotificationRestEndpointAPINotificationrestendpointPostRequest

	// NotificationrestendpointPostExecute executes the request
	//  @return CreateNotificationRestEndpointResponse
	NotificationrestendpointPostExecute(r NotificationRestEndpointAPINotificationrestendpointPostRequest) (*CreateNotificationRestEndpointResponse, *http.Response, error)
	/*
		NotificationrestendpointReferenceDelete Delete a notification:rest:endpoint object

		Deletes a specific notification:rest:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:endpoint object
		@return NotificationRestEndpointAPINotificationrestendpointReferenceDeleteRequest
	*/
	NotificationrestendpointReferenceDelete(ctx context.Context, reference string) NotificationRestEndpointAPINotificationrestendpointReferenceDeleteRequest

	// NotificationrestendpointReferenceDeleteExecute executes the request
	NotificationrestendpointReferenceDeleteExecute(r NotificationRestEndpointAPINotificationrestendpointReferenceDeleteRequest) (*http.Response, error)
	/*
		NotificationrestendpointReferenceGet Get a specific notification:rest:endpoint object

		Returns a specific notification:rest:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:endpoint object
		@return NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest
	*/
	NotificationrestendpointReferenceGet(ctx context.Context, reference string) NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest

	// NotificationrestendpointReferenceGetExecute executes the request
	//  @return GetNotificationRestEndpointResponse
	NotificationrestendpointReferenceGetExecute(r NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest) (*GetNotificationRestEndpointResponse, *http.Response, error)
	/*
		NotificationrestendpointReferencePut Update a notification:rest:endpoint object

		Updates a specific notification:rest:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:endpoint object
		@return NotificationRestEndpointAPINotificationrestendpointReferencePutRequest
	*/
	NotificationrestendpointReferencePut(ctx context.Context, reference string) NotificationRestEndpointAPINotificationrestendpointReferencePutRequest

	// NotificationrestendpointReferencePutExecute executes the request
	//  @return UpdateNotificationRestEndpointResponse
	NotificationrestendpointReferencePutExecute(r NotificationRestEndpointAPINotificationrestendpointReferencePutRequest) (*UpdateNotificationRestEndpointResponse, *http.Response, error)
}

// NotificationRestEndpointAPIService NotificationRestEndpointAPI service
type NotificationRestEndpointAPIService internal.Service

type NotificationRestEndpointAPINotificationrestendpointGetRequest struct {
	ctx            context.Context
	ApiService     NotificationRestEndpointAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r NotificationRestEndpointAPINotificationrestendpointGetRequest) ReturnFields(returnFields string) NotificationRestEndpointAPINotificationrestendpointGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestEndpointAPINotificationrestendpointGetRequest) ReturnFields2(returnFields2 string) NotificationRestEndpointAPINotificationrestendpointGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r NotificationRestEndpointAPINotificationrestendpointGetRequest) MaxResults(maxResults int32) NotificationRestEndpointAPINotificationrestendpointGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestEndpointAPINotificationrestendpointGetRequest) ReturnAsObject(returnAsObject int32) NotificationRestEndpointAPINotificationrestendpointGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NotificationRestEndpointAPINotificationrestendpointGetRequest) Paging(paging int32) NotificationRestEndpointAPINotificationrestendpointGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NotificationRestEndpointAPINotificationrestendpointGetRequest) PageId(pageId string) NotificationRestEndpointAPINotificationrestendpointGetRequest {
	r.pageId = &pageId
	return r
}

func (r NotificationRestEndpointAPINotificationrestendpointGetRequest) Filters(filters map[string]interface{}) NotificationRestEndpointAPINotificationrestendpointGetRequest {
	r.filters = &filters
	return r
}

func (r NotificationRestEndpointAPINotificationrestendpointGetRequest) Extattrfilter(extattrfilter map[string]interface{}) NotificationRestEndpointAPINotificationrestendpointGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NotificationRestEndpointAPINotificationrestendpointGetRequest) Execute() (*ListNotificationRestEndpointResponse, *http.Response, error) {
	return r.ApiService.NotificationrestendpointGetExecute(r)
}

/*
NotificationrestendpointGet Retrieve notification:rest:endpoint objects

Returns a list of notification:rest:endpoint objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NotificationRestEndpointAPINotificationrestendpointGetRequest
*/
func (a *NotificationRestEndpointAPIService) NotificationrestendpointGet(ctx context.Context) NotificationRestEndpointAPINotificationrestendpointGetRequest {
	return NotificationRestEndpointAPINotificationrestendpointGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNotificationRestEndpointResponse
func (a *NotificationRestEndpointAPIService) NotificationrestendpointGetExecute(r NotificationRestEndpointAPINotificationrestendpointGetRequest) (*ListNotificationRestEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNotificationRestEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.NotificationrestendpointGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestEndpointAPINotificationrestendpointPostRequest struct {
	ctx                      context.Context
	ApiService               NotificationRestEndpointAPI
	notificationRestEndpoint *NotificationRestEndpoint
	returnFields             *string
	returnFields2            *string
	returnAsObject           *int32
}

// Object data to create
func (r NotificationRestEndpointAPINotificationrestendpointPostRequest) NotificationRestEndpoint(notificationRestEndpoint NotificationRestEndpoint) NotificationRestEndpointAPINotificationrestendpointPostRequest {
	r.notificationRestEndpoint = &notificationRestEndpoint
	return r
}

// Enter the field names followed by comma
func (r NotificationRestEndpointAPINotificationrestendpointPostRequest) ReturnFields(returnFields string) NotificationRestEndpointAPINotificationrestendpointPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestEndpointAPINotificationrestendpointPostRequest) ReturnFields2(returnFields2 string) NotificationRestEndpointAPINotificationrestendpointPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestEndpointAPINotificationrestendpointPostRequest) ReturnAsObject(returnAsObject int32) NotificationRestEndpointAPINotificationrestendpointPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestEndpointAPINotificationrestendpointPostRequest) Execute() (*CreateNotificationRestEndpointResponse, *http.Response, error) {
	return r.ApiService.NotificationrestendpointPostExecute(r)
}

/*
NotificationrestendpointPost Create a notification:rest:endpoint object

Creates a new notification:rest:endpoint object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NotificationRestEndpointAPINotificationrestendpointPostRequest
*/
func (a *NotificationRestEndpointAPIService) NotificationrestendpointPost(ctx context.Context) NotificationRestEndpointAPINotificationrestendpointPostRequest {
	return NotificationRestEndpointAPINotificationrestendpointPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNotificationRestEndpointResponse
func (a *NotificationRestEndpointAPIService) NotificationrestendpointPostExecute(r NotificationRestEndpointAPINotificationrestendpointPostRequest) (*CreateNotificationRestEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNotificationRestEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.NotificationrestendpointPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notificationRestEndpoint == nil {
		return localVarReturnValue, nil, internal.ReportError("notificationRestEndpoint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.notificationRestEndpoint != nil {
		if r.notificationRestEndpoint.Extattrs == nil {
			r.notificationRestEndpoint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.notificationRestEndpoint.Extattrs)[k]; !ok {
				(*r.notificationRestEndpoint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.notificationRestEndpoint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestEndpointAPINotificationrestendpointReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService NotificationRestEndpointAPI
	reference  string
}

func (r NotificationRestEndpointAPINotificationrestendpointReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.NotificationrestendpointReferenceDeleteExecute(r)
}

/*
NotificationrestendpointReferenceDelete Delete a notification:rest:endpoint object

Deletes a specific notification:rest:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:endpoint object
	@return NotificationRestEndpointAPINotificationrestendpointReferenceDeleteRequest
*/
func (a *NotificationRestEndpointAPIService) NotificationrestendpointReferenceDelete(ctx context.Context, reference string) NotificationRestEndpointAPINotificationrestendpointReferenceDeleteRequest {
	return NotificationRestEndpointAPINotificationrestendpointReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NotificationRestEndpointAPIService) NotificationrestendpointReferenceDeleteExecute(r NotificationRestEndpointAPINotificationrestendpointReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.NotificationrestendpointReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest struct {
	ctx            context.Context
	ApiService     NotificationRestEndpointAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest) ReturnFields(returnFields string) NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest) ReturnFields2(returnFields2 string) NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest) ReturnAsObject(returnAsObject int32) NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest) Execute() (*GetNotificationRestEndpointResponse, *http.Response, error) {
	return r.ApiService.NotificationrestendpointReferenceGetExecute(r)
}

/*
NotificationrestendpointReferenceGet Get a specific notification:rest:endpoint object

Returns a specific notification:rest:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:endpoint object
	@return NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest
*/
func (a *NotificationRestEndpointAPIService) NotificationrestendpointReferenceGet(ctx context.Context, reference string) NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest {
	return NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNotificationRestEndpointResponse
func (a *NotificationRestEndpointAPIService) NotificationrestendpointReferenceGetExecute(r NotificationRestEndpointAPINotificationrestendpointReferenceGetRequest) (*GetNotificationRestEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNotificationRestEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.NotificationrestendpointReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestEndpointAPINotificationrestendpointReferencePutRequest struct {
	ctx                      context.Context
	ApiService               NotificationRestEndpointAPI
	reference                string
	notificationRestEndpoint *NotificationRestEndpoint
	returnFields             *string
	returnFields2            *string
	returnAsObject           *int32
}

// Object data to update
func (r NotificationRestEndpointAPINotificationrestendpointReferencePutRequest) NotificationRestEndpoint(notificationRestEndpoint NotificationRestEndpoint) NotificationRestEndpointAPINotificationrestendpointReferencePutRequest {
	r.notificationRestEndpoint = &notificationRestEndpoint
	return r
}

// Enter the field names followed by comma
func (r NotificationRestEndpointAPINotificationrestendpointReferencePutRequest) ReturnFields(returnFields string) NotificationRestEndpointAPINotificationrestendpointReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestEndpointAPINotificationrestendpointReferencePutRequest) ReturnFields2(returnFields2 string) NotificationRestEndpointAPINotificationrestendpointReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestEndpointAPINotificationrestendpointReferencePutRequest) ReturnAsObject(returnAsObject int32) NotificationRestEndpointAPINotificationrestendpointReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestEndpointAPINotificationrestendpointReferencePutRequest) Execute() (*UpdateNotificationRestEndpointResponse, *http.Response, error) {
	return r.ApiService.NotificationrestendpointReferencePutExecute(r)
}

/*
NotificationrestendpointReferencePut Update a notification:rest:endpoint object

Updates a specific notification:rest:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:endpoint object
	@return NotificationRestEndpointAPINotificationrestendpointReferencePutRequest
*/
func (a *NotificationRestEndpointAPIService) NotificationrestendpointReferencePut(ctx context.Context, reference string) NotificationRestEndpointAPINotificationrestendpointReferencePutRequest {
	return NotificationRestEndpointAPINotificationrestendpointReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNotificationRestEndpointResponse
func (a *NotificationRestEndpointAPIService) NotificationrestendpointReferencePutExecute(r NotificationRestEndpointAPINotificationrestendpointReferencePutRequest) (*UpdateNotificationRestEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNotificationRestEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.NotificationrestendpointReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notificationRestEndpoint == nil {
		return localVarReturnValue, nil, internal.ReportError("notificationRestEndpoint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.notificationRestEndpoint != nil {
		if r.notificationRestEndpoint.Extattrs == nil {
			r.notificationRestEndpoint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.notificationRestEndpoint.Extattrs)[k]; !ok {
				(*r.notificationRestEndpoint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.notificationRestEndpoint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
