/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NotificationRestTemplateAPI interface {
	/*
		NotificationresttemplateGet Retrieve notification:rest:template objects

		Returns a list of notification:rest:template objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NotificationRestTemplateAPINotificationresttemplateGetRequest
	*/
	NotificationresttemplateGet(ctx context.Context) NotificationRestTemplateAPINotificationresttemplateGetRequest

	// NotificationresttemplateGetExecute executes the request
	//  @return ListNotificationRestTemplateResponse
	NotificationresttemplateGetExecute(r NotificationRestTemplateAPINotificationresttemplateGetRequest) (*ListNotificationRestTemplateResponse, *http.Response, error)
	/*
		NotificationresttemplateReferenceDelete Delete a notification:rest:template object

		Deletes a specific notification:rest:template object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:template object
		@return NotificationRestTemplateAPINotificationresttemplateReferenceDeleteRequest
	*/
	NotificationresttemplateReferenceDelete(ctx context.Context, reference string) NotificationRestTemplateAPINotificationresttemplateReferenceDeleteRequest

	// NotificationresttemplateReferenceDeleteExecute executes the request
	NotificationresttemplateReferenceDeleteExecute(r NotificationRestTemplateAPINotificationresttemplateReferenceDeleteRequest) (*http.Response, error)
	/*
		NotificationresttemplateReferenceGet Get a specific notification:rest:template object

		Returns a specific notification:rest:template object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:template object
		@return NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest
	*/
	NotificationresttemplateReferenceGet(ctx context.Context, reference string) NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest

	// NotificationresttemplateReferenceGetExecute executes the request
	//  @return GetNotificationRestTemplateResponse
	NotificationresttemplateReferenceGetExecute(r NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest) (*GetNotificationRestTemplateResponse, *http.Response, error)
	/*
		NotificationresttemplateReferencePut Update a notification:rest:template object

		Updates a specific notification:rest:template object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:template object
		@return NotificationRestTemplateAPINotificationresttemplateReferencePutRequest
	*/
	NotificationresttemplateReferencePut(ctx context.Context, reference string) NotificationRestTemplateAPINotificationresttemplateReferencePutRequest

	// NotificationresttemplateReferencePutExecute executes the request
	//  @return UpdateNotificationRestTemplateResponse
	NotificationresttemplateReferencePutExecute(r NotificationRestTemplateAPINotificationresttemplateReferencePutRequest) (*UpdateNotificationRestTemplateResponse, *http.Response, error)
}

// NotificationRestTemplateAPIService NotificationRestTemplateAPI service
type NotificationRestTemplateAPIService internal.Service

type NotificationRestTemplateAPINotificationresttemplateGetRequest struct {
	ctx            context.Context
	ApiService     NotificationRestTemplateAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r NotificationRestTemplateAPINotificationresttemplateGetRequest) ReturnFields(returnFields string) NotificationRestTemplateAPINotificationresttemplateGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestTemplateAPINotificationresttemplateGetRequest) ReturnFields2(returnFields2 string) NotificationRestTemplateAPINotificationresttemplateGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r NotificationRestTemplateAPINotificationresttemplateGetRequest) MaxResults(maxResults int32) NotificationRestTemplateAPINotificationresttemplateGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestTemplateAPINotificationresttemplateGetRequest) ReturnAsObject(returnAsObject int32) NotificationRestTemplateAPINotificationresttemplateGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NotificationRestTemplateAPINotificationresttemplateGetRequest) Paging(paging int32) NotificationRestTemplateAPINotificationresttemplateGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NotificationRestTemplateAPINotificationresttemplateGetRequest) PageId(pageId string) NotificationRestTemplateAPINotificationresttemplateGetRequest {
	r.pageId = &pageId
	return r
}

func (r NotificationRestTemplateAPINotificationresttemplateGetRequest) Filters(filters map[string]interface{}) NotificationRestTemplateAPINotificationresttemplateGetRequest {
	r.filters = &filters
	return r
}

func (r NotificationRestTemplateAPINotificationresttemplateGetRequest) Extattrfilter(extattrfilter map[string]interface{}) NotificationRestTemplateAPINotificationresttemplateGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NotificationRestTemplateAPINotificationresttemplateGetRequest) Execute() (*ListNotificationRestTemplateResponse, *http.Response, error) {
	return r.ApiService.NotificationresttemplateGetExecute(r)
}

/*
NotificationresttemplateGet Retrieve notification:rest:template objects

Returns a list of notification:rest:template objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NotificationRestTemplateAPINotificationresttemplateGetRequest
*/
func (a *NotificationRestTemplateAPIService) NotificationresttemplateGet(ctx context.Context) NotificationRestTemplateAPINotificationresttemplateGetRequest {
	return NotificationRestTemplateAPINotificationresttemplateGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNotificationRestTemplateResponse
func (a *NotificationRestTemplateAPIService) NotificationresttemplateGetExecute(r NotificationRestTemplateAPINotificationresttemplateGetRequest) (*ListNotificationRestTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNotificationRestTemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestTemplateAPIService.NotificationresttemplateGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestTemplateAPINotificationresttemplateReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService NotificationRestTemplateAPI
	reference  string
}

func (r NotificationRestTemplateAPINotificationresttemplateReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.NotificationresttemplateReferenceDeleteExecute(r)
}

/*
NotificationresttemplateReferenceDelete Delete a notification:rest:template object

Deletes a specific notification:rest:template object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:template object
	@return NotificationRestTemplateAPINotificationresttemplateReferenceDeleteRequest
*/
func (a *NotificationRestTemplateAPIService) NotificationresttemplateReferenceDelete(ctx context.Context, reference string) NotificationRestTemplateAPINotificationresttemplateReferenceDeleteRequest {
	return NotificationRestTemplateAPINotificationresttemplateReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NotificationRestTemplateAPIService) NotificationresttemplateReferenceDeleteExecute(r NotificationRestTemplateAPINotificationresttemplateReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestTemplateAPIService.NotificationresttemplateReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:template/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest struct {
	ctx            context.Context
	ApiService     NotificationRestTemplateAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest) ReturnFields(returnFields string) NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest) ReturnFields2(returnFields2 string) NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest) ReturnAsObject(returnAsObject int32) NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest) Execute() (*GetNotificationRestTemplateResponse, *http.Response, error) {
	return r.ApiService.NotificationresttemplateReferenceGetExecute(r)
}

/*
NotificationresttemplateReferenceGet Get a specific notification:rest:template object

Returns a specific notification:rest:template object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:template object
	@return NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest
*/
func (a *NotificationRestTemplateAPIService) NotificationresttemplateReferenceGet(ctx context.Context, reference string) NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest {
	return NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNotificationRestTemplateResponse
func (a *NotificationRestTemplateAPIService) NotificationresttemplateReferenceGetExecute(r NotificationRestTemplateAPINotificationresttemplateReferenceGetRequest) (*GetNotificationRestTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNotificationRestTemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestTemplateAPIService.NotificationresttemplateReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:template/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestTemplateAPINotificationresttemplateReferencePutRequest struct {
	ctx                      context.Context
	ApiService               NotificationRestTemplateAPI
	reference                string
	notificationRestTemplate *NotificationRestTemplate
	returnFields             *string
	returnFields2            *string
	returnAsObject           *int32
}

// Object data to update
func (r NotificationRestTemplateAPINotificationresttemplateReferencePutRequest) NotificationRestTemplate(notificationRestTemplate NotificationRestTemplate) NotificationRestTemplateAPINotificationresttemplateReferencePutRequest {
	r.notificationRestTemplate = &notificationRestTemplate
	return r
}

// Enter the field names followed by comma
func (r NotificationRestTemplateAPINotificationresttemplateReferencePutRequest) ReturnFields(returnFields string) NotificationRestTemplateAPINotificationresttemplateReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestTemplateAPINotificationresttemplateReferencePutRequest) ReturnFields2(returnFields2 string) NotificationRestTemplateAPINotificationresttemplateReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestTemplateAPINotificationresttemplateReferencePutRequest) ReturnAsObject(returnAsObject int32) NotificationRestTemplateAPINotificationresttemplateReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestTemplateAPINotificationresttemplateReferencePutRequest) Execute() (*UpdateNotificationRestTemplateResponse, *http.Response, error) {
	return r.ApiService.NotificationresttemplateReferencePutExecute(r)
}

/*
NotificationresttemplateReferencePut Update a notification:rest:template object

Updates a specific notification:rest:template object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:template object
	@return NotificationRestTemplateAPINotificationresttemplateReferencePutRequest
*/
func (a *NotificationRestTemplateAPIService) NotificationresttemplateReferencePut(ctx context.Context, reference string) NotificationRestTemplateAPINotificationresttemplateReferencePutRequest {
	return NotificationRestTemplateAPINotificationresttemplateReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNotificationRestTemplateResponse
func (a *NotificationRestTemplateAPIService) NotificationresttemplateReferencePutExecute(r NotificationRestTemplateAPINotificationresttemplateReferencePutRequest) (*UpdateNotificationRestTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNotificationRestTemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestTemplateAPIService.NotificationresttemplateReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:template/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notificationRestTemplate == nil {
		return localVarReturnValue, nil, internal.ReportError("notificationRestTemplate is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notificationRestTemplate
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
