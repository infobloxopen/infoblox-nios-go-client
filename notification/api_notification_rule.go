/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NotificationRuleAPI interface {
	/*
		NotificationruleGet Retrieve notification:rule objects

		Returns a list of notification:rule objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NotificationRuleAPINotificationruleGetRequest
	*/
	NotificationruleGet(ctx context.Context) NotificationRuleAPINotificationruleGetRequest

	// NotificationruleGetExecute executes the request
	//  @return ListNotificationRuleResponse
	NotificationruleGetExecute(r NotificationRuleAPINotificationruleGetRequest) (*ListNotificationRuleResponse, *http.Response, error)
	/*
		NotificationrulePost Create a notification:rule object

		Creates a new notification:rule object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NotificationRuleAPINotificationrulePostRequest
	*/
	NotificationrulePost(ctx context.Context) NotificationRuleAPINotificationrulePostRequest

	// NotificationrulePostExecute executes the request
	//  @return CreateNotificationRuleResponse
	NotificationrulePostExecute(r NotificationRuleAPINotificationrulePostRequest) (*CreateNotificationRuleResponse, *http.Response, error)
	/*
		NotificationruleReferenceDelete Delete a notification:rule object

		Deletes a specific notification:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rule object
		@return NotificationRuleAPINotificationruleReferenceDeleteRequest
	*/
	NotificationruleReferenceDelete(ctx context.Context, reference string) NotificationRuleAPINotificationruleReferenceDeleteRequest

	// NotificationruleReferenceDeleteExecute executes the request
	NotificationruleReferenceDeleteExecute(r NotificationRuleAPINotificationruleReferenceDeleteRequest) (*http.Response, error)
	/*
		NotificationruleReferenceGet Get a specific notification:rule object

		Returns a specific notification:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rule object
		@return NotificationRuleAPINotificationruleReferenceGetRequest
	*/
	NotificationruleReferenceGet(ctx context.Context, reference string) NotificationRuleAPINotificationruleReferenceGetRequest

	// NotificationruleReferenceGetExecute executes the request
	//  @return GetNotificationRuleResponse
	NotificationruleReferenceGetExecute(r NotificationRuleAPINotificationruleReferenceGetRequest) (*GetNotificationRuleResponse, *http.Response, error)
	/*
		NotificationruleReferencePut Update a notification:rule object

		Updates a specific notification:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rule object
		@return NotificationRuleAPINotificationruleReferencePutRequest
	*/
	NotificationruleReferencePut(ctx context.Context, reference string) NotificationRuleAPINotificationruleReferencePutRequest

	// NotificationruleReferencePutExecute executes the request
	//  @return UpdateNotificationRuleResponse
	NotificationruleReferencePutExecute(r NotificationRuleAPINotificationruleReferencePutRequest) (*UpdateNotificationRuleResponse, *http.Response, error)
}

// NotificationRuleAPIService NotificationRuleAPI service
type NotificationRuleAPIService internal.Service

type NotificationRuleAPINotificationruleGetRequest struct {
	ctx            context.Context
	ApiService     NotificationRuleAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r NotificationRuleAPINotificationruleGetRequest) ReturnFields(returnFields string) NotificationRuleAPINotificationruleGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRuleAPINotificationruleGetRequest) ReturnFields2(returnFields2 string) NotificationRuleAPINotificationruleGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r NotificationRuleAPINotificationruleGetRequest) MaxResults(maxResults int32) NotificationRuleAPINotificationruleGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NotificationRuleAPINotificationruleGetRequest) ReturnAsObject(returnAsObject int32) NotificationRuleAPINotificationruleGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NotificationRuleAPINotificationruleGetRequest) Paging(paging int32) NotificationRuleAPINotificationruleGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NotificationRuleAPINotificationruleGetRequest) PageId(pageId string) NotificationRuleAPINotificationruleGetRequest {
	r.pageId = &pageId
	return r
}

func (r NotificationRuleAPINotificationruleGetRequest) Filters(filters map[string]interface{}) NotificationRuleAPINotificationruleGetRequest {
	r.filters = &filters
	return r
}

func (r NotificationRuleAPINotificationruleGetRequest) Extattrfilter(extattrfilter map[string]interface{}) NotificationRuleAPINotificationruleGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NotificationRuleAPINotificationruleGetRequest) Execute() (*ListNotificationRuleResponse, *http.Response, error) {
	return r.ApiService.NotificationruleGetExecute(r)
}

/*
NotificationruleGet Retrieve notification:rule objects

Returns a list of notification:rule objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NotificationRuleAPINotificationruleGetRequest
*/
func (a *NotificationRuleAPIService) NotificationruleGet(ctx context.Context) NotificationRuleAPINotificationruleGetRequest {
	return NotificationRuleAPINotificationruleGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNotificationRuleResponse
func (a *NotificationRuleAPIService) NotificationruleGetExecute(r NotificationRuleAPINotificationruleGetRequest) (*ListNotificationRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNotificationRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRuleAPIService.NotificationruleGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRuleAPINotificationrulePostRequest struct {
	ctx              context.Context
	ApiService       NotificationRuleAPI
	notificationRule *NotificationRule
	returnFields     *string
	returnFields2    *string
	returnAsObject   *int32
}

// Object data to create
func (r NotificationRuleAPINotificationrulePostRequest) NotificationRule(notificationRule NotificationRule) NotificationRuleAPINotificationrulePostRequest {
	r.notificationRule = &notificationRule
	return r
}

// Enter the field names followed by comma
func (r NotificationRuleAPINotificationrulePostRequest) ReturnFields(returnFields string) NotificationRuleAPINotificationrulePostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRuleAPINotificationrulePostRequest) ReturnFields2(returnFields2 string) NotificationRuleAPINotificationrulePostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NotificationRuleAPINotificationrulePostRequest) ReturnAsObject(returnAsObject int32) NotificationRuleAPINotificationrulePostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRuleAPINotificationrulePostRequest) Execute() (*CreateNotificationRuleResponse, *http.Response, error) {
	return r.ApiService.NotificationrulePostExecute(r)
}

/*
NotificationrulePost Create a notification:rule object

Creates a new notification:rule object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NotificationRuleAPINotificationrulePostRequest
*/
func (a *NotificationRuleAPIService) NotificationrulePost(ctx context.Context) NotificationRuleAPINotificationrulePostRequest {
	return NotificationRuleAPINotificationrulePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNotificationRuleResponse
func (a *NotificationRuleAPIService) NotificationrulePostExecute(r NotificationRuleAPINotificationrulePostRequest) (*CreateNotificationRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNotificationRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRuleAPIService.NotificationrulePost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notificationRule == nil {
		return localVarReturnValue, nil, internal.ReportError("notificationRule is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notificationRule
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRuleAPINotificationruleReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService NotificationRuleAPI
	reference  string
}

func (r NotificationRuleAPINotificationruleReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.NotificationruleReferenceDeleteExecute(r)
}

/*
NotificationruleReferenceDelete Delete a notification:rule object

Deletes a specific notification:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rule object
	@return NotificationRuleAPINotificationruleReferenceDeleteRequest
*/
func (a *NotificationRuleAPIService) NotificationruleReferenceDelete(ctx context.Context, reference string) NotificationRuleAPINotificationruleReferenceDeleteRequest {
	return NotificationRuleAPINotificationruleReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NotificationRuleAPIService) NotificationruleReferenceDeleteExecute(r NotificationRuleAPINotificationruleReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRuleAPIService.NotificationruleReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NotificationRuleAPINotificationruleReferenceGetRequest struct {
	ctx            context.Context
	ApiService     NotificationRuleAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r NotificationRuleAPINotificationruleReferenceGetRequest) ReturnFields(returnFields string) NotificationRuleAPINotificationruleReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRuleAPINotificationruleReferenceGetRequest) ReturnFields2(returnFields2 string) NotificationRuleAPINotificationruleReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NotificationRuleAPINotificationruleReferenceGetRequest) ReturnAsObject(returnAsObject int32) NotificationRuleAPINotificationruleReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRuleAPINotificationruleReferenceGetRequest) Execute() (*GetNotificationRuleResponse, *http.Response, error) {
	return r.ApiService.NotificationruleReferenceGetExecute(r)
}

/*
NotificationruleReferenceGet Get a specific notification:rule object

Returns a specific notification:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rule object
	@return NotificationRuleAPINotificationruleReferenceGetRequest
*/
func (a *NotificationRuleAPIService) NotificationruleReferenceGet(ctx context.Context, reference string) NotificationRuleAPINotificationruleReferenceGetRequest {
	return NotificationRuleAPINotificationruleReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNotificationRuleResponse
func (a *NotificationRuleAPIService) NotificationruleReferenceGetExecute(r NotificationRuleAPINotificationruleReferenceGetRequest) (*GetNotificationRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNotificationRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRuleAPIService.NotificationruleReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRuleAPINotificationruleReferencePutRequest struct {
	ctx              context.Context
	ApiService       NotificationRuleAPI
	reference        string
	notificationRule *NotificationRule
	returnFields     *string
	returnFields2    *string
	returnAsObject   *int32
}

// Object data to update
func (r NotificationRuleAPINotificationruleReferencePutRequest) NotificationRule(notificationRule NotificationRule) NotificationRuleAPINotificationruleReferencePutRequest {
	r.notificationRule = &notificationRule
	return r
}

// Enter the field names followed by comma
func (r NotificationRuleAPINotificationruleReferencePutRequest) ReturnFields(returnFields string) NotificationRuleAPINotificationruleReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRuleAPINotificationruleReferencePutRequest) ReturnFields2(returnFields2 string) NotificationRuleAPINotificationruleReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NotificationRuleAPINotificationruleReferencePutRequest) ReturnAsObject(returnAsObject int32) NotificationRuleAPINotificationruleReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRuleAPINotificationruleReferencePutRequest) Execute() (*UpdateNotificationRuleResponse, *http.Response, error) {
	return r.ApiService.NotificationruleReferencePutExecute(r)
}

/*
NotificationruleReferencePut Update a notification:rule object

Updates a specific notification:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rule object
	@return NotificationRuleAPINotificationruleReferencePutRequest
*/
func (a *NotificationRuleAPIService) NotificationruleReferencePut(ctx context.Context, reference string) NotificationRuleAPINotificationruleReferencePutRequest {
	return NotificationRuleAPINotificationruleReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNotificationRuleResponse
func (a *NotificationRuleAPIService) NotificationruleReferencePutExecute(r NotificationRuleAPINotificationruleReferencePutRequest) (*UpdateNotificationRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNotificationRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRuleAPIService.NotificationruleReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notificationRule == nil {
		return localVarReturnValue, nil, internal.ReportError("notificationRule is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notificationRule
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
