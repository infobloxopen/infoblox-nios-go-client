/*
Infoblox PARENTALCONTROL API

OpenAPI specification for Infoblox NIOS WAPI PARENTALCONTROL objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parentalcontrol

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type ParentalcontrolSubscriberrecordAPI interface {
	/*
		ParentalcontrolsubscriberrecordGet Retrieve parentalcontrol:subscriberrecord objects

		Returns a list of parentalcontrol:subscriberrecord objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest
	*/
	ParentalcontrolsubscriberrecordGet(ctx context.Context) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest

	// ParentalcontrolsubscriberrecordGetExecute executes the request
	//  @return ListParentalcontrolSubscriberrecordResponse
	ParentalcontrolsubscriberrecordGetExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) (*ListParentalcontrolSubscriberrecordResponse, *http.Response, error)
	/*
		ParentalcontrolsubscriberrecordPost Create a parentalcontrol:subscriberrecord object

		Creates a new parentalcontrol:subscriberrecord object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest
	*/
	ParentalcontrolsubscriberrecordPost(ctx context.Context) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest

	// ParentalcontrolsubscriberrecordPostExecute executes the request
	//  @return CreateParentalcontrolSubscriberrecordResponse
	ParentalcontrolsubscriberrecordPostExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest) (*CreateParentalcontrolSubscriberrecordResponse, *http.Response, error)
	/*
		ParentalcontrolsubscriberrecordReferenceDelete Delete a parentalcontrol:subscriberrecord object

		Deletes a specific parentalcontrol:subscriberrecord object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the parentalcontrol:subscriberrecord object
		@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceDeleteRequest
	*/
	ParentalcontrolsubscriberrecordReferenceDelete(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceDeleteRequest

	// ParentalcontrolsubscriberrecordReferenceDeleteExecute executes the request
	ParentalcontrolsubscriberrecordReferenceDeleteExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceDeleteRequest) (*http.Response, error)
	/*
		ParentalcontrolsubscriberrecordReferenceGet Get a specific parentalcontrol:subscriberrecord object

		Returns a specific parentalcontrol:subscriberrecord object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the parentalcontrol:subscriberrecord object
		@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest
	*/
	ParentalcontrolsubscriberrecordReferenceGet(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest

	// ParentalcontrolsubscriberrecordReferenceGetExecute executes the request
	//  @return GetParentalcontrolSubscriberrecordResponse
	ParentalcontrolsubscriberrecordReferenceGetExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest) (*GetParentalcontrolSubscriberrecordResponse, *http.Response, error)
	/*
		ParentalcontrolsubscriberrecordReferencePut Update a parentalcontrol:subscriberrecord object

		Updates a specific parentalcontrol:subscriberrecord object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the parentalcontrol:subscriberrecord object
		@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest
	*/
	ParentalcontrolsubscriberrecordReferencePut(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest

	// ParentalcontrolsubscriberrecordReferencePutExecute executes the request
	//  @return UpdateParentalcontrolSubscriberrecordResponse
	ParentalcontrolsubscriberrecordReferencePutExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest) (*UpdateParentalcontrolSubscriberrecordResponse, *http.Response, error)
}

// ParentalcontrolSubscriberrecordAPIService ParentalcontrolSubscriberrecordAPI service
type ParentalcontrolSubscriberrecordAPIService internal.Service

type ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest struct {
	ctx            context.Context
	ApiService     ParentalcontrolSubscriberrecordAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) ReturnFields(returnFields string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) ReturnFields2(returnFields2 string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) MaxResults(maxResults int32) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) ReturnAsObject(returnAsObject int32) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) Paging(paging int32) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) PageId(pageId string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest {
	r.pageId = &pageId
	return r
}

func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) Filters(filters map[string]interface{}) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest {
	r.filters = &filters
	return r
}

func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) Extattrfilter(extattrfilter map[string]interface{}) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) Execute() (*ListParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	return r.ApiService.ParentalcontrolsubscriberrecordGetExecute(r)
}

/*
ParentalcontrolsubscriberrecordGet Retrieve parentalcontrol:subscriberrecord objects

Returns a list of parentalcontrol:subscriberrecord objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordGet(ctx context.Context) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest {
	return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListParentalcontrolSubscriberrecordResponse
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordGetExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordGetRequest) (*ListParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListParentalcontrolSubscriberrecordResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.ParentalcontrolsubscriberrecordGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest struct {
	ctx                             context.Context
	ApiService                      ParentalcontrolSubscriberrecordAPI
	parentalcontrolSubscriberrecord *ParentalcontrolSubscriberrecord
	returnFields                    *string
	returnFields2                   *string
	returnAsObject                  *int32
}

// Object data to create
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest) ParentalcontrolSubscriberrecord(parentalcontrolSubscriberrecord ParentalcontrolSubscriberrecord) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest {
	r.parentalcontrolSubscriberrecord = &parentalcontrolSubscriberrecord
	return r
}

// Enter the field names followed by comma
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest) ReturnFields(returnFields string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest) ReturnFields2(returnFields2 string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest) ReturnAsObject(returnAsObject int32) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest) Execute() (*CreateParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	return r.ApiService.ParentalcontrolsubscriberrecordPostExecute(r)
}

/*
ParentalcontrolsubscriberrecordPost Create a parentalcontrol:subscriberrecord object

Creates a new parentalcontrol:subscriberrecord object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordPost(ctx context.Context) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest {
	return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateParentalcontrolSubscriberrecordResponse
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordPostExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordPostRequest) (*CreateParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateParentalcontrolSubscriberrecordResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.ParentalcontrolsubscriberrecordPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.parentalcontrolSubscriberrecord == nil {
		return localVarReturnValue, nil, internal.ReportError("parentalcontrolSubscriberrecord is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.parentalcontrolSubscriberrecord
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService ParentalcontrolSubscriberrecordAPI
	reference  string
}

func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ParentalcontrolsubscriberrecordReferenceDeleteExecute(r)
}

/*
ParentalcontrolsubscriberrecordReferenceDelete Delete a parentalcontrol:subscriberrecord object

Deletes a specific parentalcontrol:subscriberrecord object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the parentalcontrol:subscriberrecord object
	@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceDeleteRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordReferenceDelete(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceDeleteRequest {
	return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordReferenceDeleteExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.ParentalcontrolsubscriberrecordReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest struct {
	ctx            context.Context
	ApiService     ParentalcontrolSubscriberrecordAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest) ReturnFields(returnFields string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest) ReturnFields2(returnFields2 string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest) ReturnAsObject(returnAsObject int32) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest) Execute() (*GetParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	return r.ApiService.ParentalcontrolsubscriberrecordReferenceGetExecute(r)
}

/*
ParentalcontrolsubscriberrecordReferenceGet Get a specific parentalcontrol:subscriberrecord object

Returns a specific parentalcontrol:subscriberrecord object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the parentalcontrol:subscriberrecord object
	@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordReferenceGet(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest {
	return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetParentalcontrolSubscriberrecordResponse
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordReferenceGetExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferenceGetRequest) (*GetParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetParentalcontrolSubscriberrecordResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.ParentalcontrolsubscriberrecordReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest struct {
	ctx                             context.Context
	ApiService                      ParentalcontrolSubscriberrecordAPI
	reference                       string
	parentalcontrolSubscriberrecord *ParentalcontrolSubscriberrecord
	returnFields                    *string
	returnFields2                   *string
	returnAsObject                  *int32
}

// Object data to update
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest) ParentalcontrolSubscriberrecord(parentalcontrolSubscriberrecord ParentalcontrolSubscriberrecord) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest {
	r.parentalcontrolSubscriberrecord = &parentalcontrolSubscriberrecord
	return r
}

// Enter the field names followed by comma
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest) ReturnFields(returnFields string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest) ReturnFields2(returnFields2 string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest) ReturnAsObject(returnAsObject int32) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest) Execute() (*UpdateParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	return r.ApiService.ParentalcontrolsubscriberrecordReferencePutExecute(r)
}

/*
ParentalcontrolsubscriberrecordReferencePut Update a parentalcontrol:subscriberrecord object

Updates a specific parentalcontrol:subscriberrecord object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the parentalcontrol:subscriberrecord object
	@return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordReferencePut(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest {
	return ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateParentalcontrolSubscriberrecordResponse
func (a *ParentalcontrolSubscriberrecordAPIService) ParentalcontrolsubscriberrecordReferencePutExecute(r ParentalcontrolSubscriberrecordAPIParentalcontrolsubscriberrecordReferencePutRequest) (*UpdateParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateParentalcontrolSubscriberrecordResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.ParentalcontrolsubscriberrecordReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.parentalcontrolSubscriberrecord == nil {
		return localVarReturnValue, nil, internal.ReportError("parentalcontrolSubscriberrecord is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.parentalcontrolSubscriberrecord
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
