/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordRpzAIpaddressAPI interface {
	/*
		RecordrpzaipaddressGet Retrieve record:rpz:a:ipaddress objects

		Returns a list of record:rpz:a:ipaddress objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest
	*/
	RecordrpzaipaddressGet(ctx context.Context) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest

	// RecordrpzaipaddressGetExecute executes the request
	//  @return ListRecordRpzAIpaddressResponse
	RecordrpzaipaddressGetExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) (*ListRecordRpzAIpaddressResponse, *http.Response, error)
	/*
		RecordrpzaipaddressPost Create a record:rpz:a:ipaddress object

		Creates a new record:rpz:a:ipaddress object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest
	*/
	RecordrpzaipaddressPost(ctx context.Context) RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest

	// RecordrpzaipaddressPostExecute executes the request
	//  @return CreateRecordRpzAIpaddressResponse
	RecordrpzaipaddressPostExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest) (*CreateRecordRpzAIpaddressResponse, *http.Response, error)
	/*
		RecordrpzaipaddressReferenceDelete Delete a record:rpz:a:ipaddress object

		Deletes a specific record:rpz:a:ipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:a:ipaddress object
		@return RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceDeleteRequest
	*/
	RecordrpzaipaddressReferenceDelete(ctx context.Context, reference string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceDeleteRequest

	// RecordrpzaipaddressReferenceDeleteExecute executes the request
	RecordrpzaipaddressReferenceDeleteExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordrpzaipaddressReferenceGet Get a specific record:rpz:a:ipaddress object

		Returns a specific record:rpz:a:ipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:a:ipaddress object
		@return RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest
	*/
	RecordrpzaipaddressReferenceGet(ctx context.Context, reference string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest

	// RecordrpzaipaddressReferenceGetExecute executes the request
	//  @return GetRecordRpzAIpaddressResponse
	RecordrpzaipaddressReferenceGetExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest) (*GetRecordRpzAIpaddressResponse, *http.Response, error)
	/*
		RecordrpzaipaddressReferencePut Update a record:rpz:a:ipaddress object

		Updates a specific record:rpz:a:ipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:a:ipaddress object
		@return RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest
	*/
	RecordrpzaipaddressReferencePut(ctx context.Context, reference string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest

	// RecordrpzaipaddressReferencePutExecute executes the request
	//  @return UpdateRecordRpzAIpaddressResponse
	RecordrpzaipaddressReferencePutExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest) (*UpdateRecordRpzAIpaddressResponse, *http.Response, error)
}

// RecordRpzAIpaddressAPIService RecordRpzAIpaddressAPI service
type RecordRpzAIpaddressAPIService internal.Service

type RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzAIpaddressAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) ReturnFields(returnFields string) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) ReturnFields2(returnFields2 string) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) MaxResults(maxResults int32) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) Paging(paging int32) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) PageId(pageId string) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) Filters(filters map[string]interface{}) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest {
	r.filters = &filters
	return r
}

func (r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) Execute() (*ListRecordRpzAIpaddressResponse, *http.Response, error) {
	return r.ApiService.RecordrpzaipaddressGetExecute(r)
}

/*
RecordrpzaipaddressGet Retrieve record:rpz:a:ipaddress objects

Returns a list of record:rpz:a:ipaddress objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest
*/
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressGet(ctx context.Context) RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest {
	return RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordRpzAIpaddressResponse
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressGetExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressGetRequest) (*ListRecordRpzAIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordRpzAIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAIpaddressAPIService.RecordrpzaipaddressGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:a:ipaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest struct {
	ctx                 context.Context
	ApiService          RecordRpzAIpaddressAPI
	recordRpzAIpaddress *RecordRpzAIpaddress
	returnFields        *string
	returnFields2       *string
	returnAsObject      *int32
}

// Object data to create
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest) RecordRpzAIpaddress(recordRpzAIpaddress RecordRpzAIpaddress) RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest {
	r.recordRpzAIpaddress = &recordRpzAIpaddress
	return r
}

// Enter the field names followed by comma
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest) ReturnFields(returnFields string) RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest) ReturnFields2(returnFields2 string) RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest) ReturnAsObject(returnAsObject int32) RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest) Execute() (*CreateRecordRpzAIpaddressResponse, *http.Response, error) {
	return r.ApiService.RecordrpzaipaddressPostExecute(r)
}

/*
RecordrpzaipaddressPost Create a record:rpz:a:ipaddress object

Creates a new record:rpz:a:ipaddress object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest
*/
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressPost(ctx context.Context) RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest {
	return RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordRpzAIpaddressResponse
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressPostExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressPostRequest) (*CreateRecordRpzAIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordRpzAIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAIpaddressAPIService.RecordrpzaipaddressPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:a:ipaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzAIpaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzAIpaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzAIpaddress != nil {
		if r.recordRpzAIpaddress.Extattrs == nil {
			r.recordRpzAIpaddress.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzAIpaddress.Extattrs)[k]; !ok {
				(*r.recordRpzAIpaddress.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzAIpaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordRpzAIpaddressAPI
	reference  string
}

func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordrpzaipaddressReferenceDeleteExecute(r)
}

/*
RecordrpzaipaddressReferenceDelete Delete a record:rpz:a:ipaddress object

Deletes a specific record:rpz:a:ipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:a:ipaddress object
	@return RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceDeleteRequest
*/
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressReferenceDelete(ctx context.Context, reference string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceDeleteRequest {
	return RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressReferenceDeleteExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAIpaddressAPIService.RecordrpzaipaddressReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:a:ipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzAIpaddressAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest) ReturnFields(returnFields string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest) ReturnFields2(returnFields2 string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest) Execute() (*GetRecordRpzAIpaddressResponse, *http.Response, error) {
	return r.ApiService.RecordrpzaipaddressReferenceGetExecute(r)
}

/*
RecordrpzaipaddressReferenceGet Get a specific record:rpz:a:ipaddress object

Returns a specific record:rpz:a:ipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:a:ipaddress object
	@return RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest
*/
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressReferenceGet(ctx context.Context, reference string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest {
	return RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordRpzAIpaddressResponse
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressReferenceGetExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressReferenceGetRequest) (*GetRecordRpzAIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordRpzAIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAIpaddressAPIService.RecordrpzaipaddressReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:a:ipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest struct {
	ctx                 context.Context
	ApiService          RecordRpzAIpaddressAPI
	reference           string
	recordRpzAIpaddress *RecordRpzAIpaddress
	returnFields        *string
	returnFields2       *string
	returnAsObject      *int32
}

// Object data to update
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest) RecordRpzAIpaddress(recordRpzAIpaddress RecordRpzAIpaddress) RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest {
	r.recordRpzAIpaddress = &recordRpzAIpaddress
	return r
}

// Enter the field names followed by comma
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest) ReturnFields(returnFields string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest) ReturnFields2(returnFields2 string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest) Execute() (*UpdateRecordRpzAIpaddressResponse, *http.Response, error) {
	return r.ApiService.RecordrpzaipaddressReferencePutExecute(r)
}

/*
RecordrpzaipaddressReferencePut Update a record:rpz:a:ipaddress object

Updates a specific record:rpz:a:ipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:a:ipaddress object
	@return RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest
*/
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressReferencePut(ctx context.Context, reference string) RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest {
	return RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordRpzAIpaddressResponse
func (a *RecordRpzAIpaddressAPIService) RecordrpzaipaddressReferencePutExecute(r RecordRpzAIpaddressAPIRecordrpzaipaddressReferencePutRequest) (*UpdateRecordRpzAIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordRpzAIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAIpaddressAPIService.RecordrpzaipaddressReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:a:ipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzAIpaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzAIpaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzAIpaddress != nil {
		if r.recordRpzAIpaddress.Extattrs == nil {
			r.recordRpzAIpaddress.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzAIpaddress.Extattrs)[k]; !ok {
				(*r.recordRpzAIpaddress.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzAIpaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
