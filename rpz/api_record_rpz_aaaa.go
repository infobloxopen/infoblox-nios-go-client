/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordRpzAaaaAPI interface {
	/*
		RecordrpzaaaaGet Retrieve record:rpz:aaaa objects

		Returns a list of record:rpz:aaaa objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzAaaaAPIRecordrpzaaaaGetRequest
	*/
	RecordrpzaaaaGet(ctx context.Context) RecordRpzAaaaAPIRecordrpzaaaaGetRequest

	// RecordrpzaaaaGetExecute executes the request
	//  @return ListRecordRpzAaaaResponse
	RecordrpzaaaaGetExecute(r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) (*ListRecordRpzAaaaResponse, *http.Response, error)
	/*
		RecordrpzaaaaPost Create a record:rpz:aaaa object

		Creates a new record:rpz:aaaa object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzAaaaAPIRecordrpzaaaaPostRequest
	*/
	RecordrpzaaaaPost(ctx context.Context) RecordRpzAaaaAPIRecordrpzaaaaPostRequest

	// RecordrpzaaaaPostExecute executes the request
	//  @return CreateRecordRpzAaaaResponse
	RecordrpzaaaaPostExecute(r RecordRpzAaaaAPIRecordrpzaaaaPostRequest) (*CreateRecordRpzAaaaResponse, *http.Response, error)
	/*
		RecordrpzaaaaReferenceDelete Delete a record:rpz:aaaa object

		Deletes a specific record:rpz:aaaa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:aaaa object
		@return RecordRpzAaaaAPIRecordrpzaaaaReferenceDeleteRequest
	*/
	RecordrpzaaaaReferenceDelete(ctx context.Context, reference string) RecordRpzAaaaAPIRecordrpzaaaaReferenceDeleteRequest

	// RecordrpzaaaaReferenceDeleteExecute executes the request
	RecordrpzaaaaReferenceDeleteExecute(r RecordRpzAaaaAPIRecordrpzaaaaReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordrpzaaaaReferenceGet Get a specific record:rpz:aaaa object

		Returns a specific record:rpz:aaaa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:aaaa object
		@return RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest
	*/
	RecordrpzaaaaReferenceGet(ctx context.Context, reference string) RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest

	// RecordrpzaaaaReferenceGetExecute executes the request
	//  @return GetRecordRpzAaaaResponse
	RecordrpzaaaaReferenceGetExecute(r RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest) (*GetRecordRpzAaaaResponse, *http.Response, error)
	/*
		RecordrpzaaaaReferencePut Update a record:rpz:aaaa object

		Updates a specific record:rpz:aaaa object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:aaaa object
		@return RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest
	*/
	RecordrpzaaaaReferencePut(ctx context.Context, reference string) RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest

	// RecordrpzaaaaReferencePutExecute executes the request
	//  @return UpdateRecordRpzAaaaResponse
	RecordrpzaaaaReferencePutExecute(r RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest) (*UpdateRecordRpzAaaaResponse, *http.Response, error)
}

// RecordRpzAaaaAPIService RecordRpzAaaaAPI service
type RecordRpzAaaaAPIService internal.Service

type RecordRpzAaaaAPIRecordrpzaaaaGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzAaaaAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) ReturnFields(returnFields string) RecordRpzAaaaAPIRecordrpzaaaaGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) ReturnFields2(returnFields2 string) RecordRpzAaaaAPIRecordrpzaaaaGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) MaxResults(maxResults int32) RecordRpzAaaaAPIRecordrpzaaaaGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzAaaaAPIRecordrpzaaaaGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) Paging(paging int32) RecordRpzAaaaAPIRecordrpzaaaaGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) PageId(pageId string) RecordRpzAaaaAPIRecordrpzaaaaGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) Filters(filters map[string]interface{}) RecordRpzAaaaAPIRecordrpzaaaaGetRequest {
	r.filters = &filters
	return r
}

func (r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordRpzAaaaAPIRecordrpzaaaaGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) Execute() (*ListRecordRpzAaaaResponse, *http.Response, error) {
	return r.ApiService.RecordrpzaaaaGetExecute(r)
}

/*
RecordrpzaaaaGet Retrieve record:rpz:aaaa objects

Returns a list of record:rpz:aaaa objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzAaaaAPIRecordrpzaaaaGetRequest
*/
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaGet(ctx context.Context) RecordRpzAaaaAPIRecordrpzaaaaGetRequest {
	return RecordRpzAaaaAPIRecordrpzaaaaGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordRpzAaaaResponse
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaGetExecute(r RecordRpzAaaaAPIRecordrpzaaaaGetRequest) (*ListRecordRpzAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordRpzAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAaaaAPIService.RecordrpzaaaaGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:aaaa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzAaaaAPIRecordrpzaaaaPostRequest struct {
	ctx            context.Context
	ApiService     RecordRpzAaaaAPI
	recordRpzAaaa  *RecordRpzAaaa
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordRpzAaaaAPIRecordrpzaaaaPostRequest) RecordRpzAaaa(recordRpzAaaa RecordRpzAaaa) RecordRpzAaaaAPIRecordrpzaaaaPostRequest {
	r.recordRpzAaaa = &recordRpzAaaa
	return r
}

// Enter the field names followed by comma
func (r RecordRpzAaaaAPIRecordrpzaaaaPostRequest) ReturnFields(returnFields string) RecordRpzAaaaAPIRecordrpzaaaaPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzAaaaAPIRecordrpzaaaaPostRequest) ReturnFields2(returnFields2 string) RecordRpzAaaaAPIRecordrpzaaaaPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzAaaaAPIRecordrpzaaaaPostRequest) ReturnAsObject(returnAsObject int32) RecordRpzAaaaAPIRecordrpzaaaaPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzAaaaAPIRecordrpzaaaaPostRequest) Execute() (*CreateRecordRpzAaaaResponse, *http.Response, error) {
	return r.ApiService.RecordrpzaaaaPostExecute(r)
}

/*
RecordrpzaaaaPost Create a record:rpz:aaaa object

Creates a new record:rpz:aaaa object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzAaaaAPIRecordrpzaaaaPostRequest
*/
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaPost(ctx context.Context) RecordRpzAaaaAPIRecordrpzaaaaPostRequest {
	return RecordRpzAaaaAPIRecordrpzaaaaPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordRpzAaaaResponse
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaPostExecute(r RecordRpzAaaaAPIRecordrpzaaaaPostRequest) (*CreateRecordRpzAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordRpzAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAaaaAPIService.RecordrpzaaaaPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:aaaa"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzAaaa == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzAaaa is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzAaaa != nil {
		if r.recordRpzAaaa.Extattrs == nil {
			r.recordRpzAaaa.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzAaaa.Extattrs)[k]; !ok {
				(*r.recordRpzAaaa.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzAaaa
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzAaaaAPIRecordrpzaaaaReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordRpzAaaaAPI
	reference  string
}

func (r RecordRpzAaaaAPIRecordrpzaaaaReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordrpzaaaaReferenceDeleteExecute(r)
}

/*
RecordrpzaaaaReferenceDelete Delete a record:rpz:aaaa object

Deletes a specific record:rpz:aaaa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:aaaa object
	@return RecordRpzAaaaAPIRecordrpzaaaaReferenceDeleteRequest
*/
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaReferenceDelete(ctx context.Context, reference string) RecordRpzAaaaAPIRecordrpzaaaaReferenceDeleteRequest {
	return RecordRpzAaaaAPIRecordrpzaaaaReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaReferenceDeleteExecute(r RecordRpzAaaaAPIRecordrpzaaaaReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAaaaAPIService.RecordrpzaaaaReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:aaaa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzAaaaAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest) ReturnFields(returnFields string) RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest) ReturnFields2(returnFields2 string) RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest) Execute() (*GetRecordRpzAaaaResponse, *http.Response, error) {
	return r.ApiService.RecordrpzaaaaReferenceGetExecute(r)
}

/*
RecordrpzaaaaReferenceGet Get a specific record:rpz:aaaa object

Returns a specific record:rpz:aaaa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:aaaa object
	@return RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest
*/
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaReferenceGet(ctx context.Context, reference string) RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest {
	return RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordRpzAaaaResponse
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaReferenceGetExecute(r RecordRpzAaaaAPIRecordrpzaaaaReferenceGetRequest) (*GetRecordRpzAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordRpzAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAaaaAPIService.RecordrpzaaaaReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:aaaa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordRpzAaaaAPI
	reference      string
	recordRpzAaaa  *RecordRpzAaaa
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest) RecordRpzAaaa(recordRpzAaaa RecordRpzAaaa) RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest {
	r.recordRpzAaaa = &recordRpzAaaa
	return r
}

// Enter the field names followed by comma
func (r RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest) ReturnFields(returnFields string) RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest) ReturnFields2(returnFields2 string) RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest) Execute() (*UpdateRecordRpzAaaaResponse, *http.Response, error) {
	return r.ApiService.RecordrpzaaaaReferencePutExecute(r)
}

/*
RecordrpzaaaaReferencePut Update a record:rpz:aaaa object

Updates a specific record:rpz:aaaa object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:aaaa object
	@return RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest
*/
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaReferencePut(ctx context.Context, reference string) RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest {
	return RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordRpzAaaaResponse
func (a *RecordRpzAaaaAPIService) RecordrpzaaaaReferencePutExecute(r RecordRpzAaaaAPIRecordrpzaaaaReferencePutRequest) (*UpdateRecordRpzAaaaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordRpzAaaaResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzAaaaAPIService.RecordrpzaaaaReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:aaaa/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzAaaa == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzAaaa is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzAaaa != nil {
		if r.recordRpzAaaa.Extattrs == nil {
			r.recordRpzAaaa.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzAaaa.Extattrs)[k]; !ok {
				(*r.recordRpzAaaa.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzAaaa
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
