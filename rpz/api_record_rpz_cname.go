/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordRpzCnameAPI interface {
	/*
		RecordrpzcnameGet Retrieve record:rpz:cname objects

		Returns a list of record:rpz:cname objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzCnameAPIRecordrpzcnameGetRequest
	*/
	RecordrpzcnameGet(ctx context.Context) RecordRpzCnameAPIRecordrpzcnameGetRequest

	// RecordrpzcnameGetExecute executes the request
	//  @return ListRecordRpzCnameResponse
	RecordrpzcnameGetExecute(r RecordRpzCnameAPIRecordrpzcnameGetRequest) (*ListRecordRpzCnameResponse, *http.Response, error)
	/*
		RecordrpzcnamePost Create a record:rpz:cname object

		Creates a new record:rpz:cname object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzCnameAPIRecordrpzcnamePostRequest
	*/
	RecordrpzcnamePost(ctx context.Context) RecordRpzCnameAPIRecordrpzcnamePostRequest

	// RecordrpzcnamePostExecute executes the request
	//  @return CreateRecordRpzCnameResponse
	RecordrpzcnamePostExecute(r RecordRpzCnameAPIRecordrpzcnamePostRequest) (*CreateRecordRpzCnameResponse, *http.Response, error)
	/*
		RecordrpzcnameReferenceDelete Delete a record:rpz:cname object

		Deletes a specific record:rpz:cname object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname object
		@return RecordRpzCnameAPIRecordrpzcnameReferenceDeleteRequest
	*/
	RecordrpzcnameReferenceDelete(ctx context.Context, reference string) RecordRpzCnameAPIRecordrpzcnameReferenceDeleteRequest

	// RecordrpzcnameReferenceDeleteExecute executes the request
	RecordrpzcnameReferenceDeleteExecute(r RecordRpzCnameAPIRecordrpzcnameReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordrpzcnameReferenceGet Get a specific record:rpz:cname object

		Returns a specific record:rpz:cname object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname object
		@return RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest
	*/
	RecordrpzcnameReferenceGet(ctx context.Context, reference string) RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest

	// RecordrpzcnameReferenceGetExecute executes the request
	//  @return GetRecordRpzCnameResponse
	RecordrpzcnameReferenceGetExecute(r RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest) (*GetRecordRpzCnameResponse, *http.Response, error)
	/*
		RecordrpzcnameReferencePut Update a record:rpz:cname object

		Updates a specific record:rpz:cname object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname object
		@return RecordRpzCnameAPIRecordrpzcnameReferencePutRequest
	*/
	RecordrpzcnameReferencePut(ctx context.Context, reference string) RecordRpzCnameAPIRecordrpzcnameReferencePutRequest

	// RecordrpzcnameReferencePutExecute executes the request
	//  @return UpdateRecordRpzCnameResponse
	RecordrpzcnameReferencePutExecute(r RecordRpzCnameAPIRecordrpzcnameReferencePutRequest) (*UpdateRecordRpzCnameResponse, *http.Response, error)
}

// RecordRpzCnameAPIService RecordRpzCnameAPI service
type RecordRpzCnameAPIService internal.Service

type RecordRpzCnameAPIRecordrpzcnameGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzCnameAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordRpzCnameAPIRecordrpzcnameGetRequest) ReturnFields(returnFields string) RecordRpzCnameAPIRecordrpzcnameGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameAPIRecordrpzcnameGetRequest) ReturnFields2(returnFields2 string) RecordRpzCnameAPIRecordrpzcnameGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordRpzCnameAPIRecordrpzcnameGetRequest) MaxResults(maxResults int32) RecordRpzCnameAPIRecordrpzcnameGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameAPIRecordrpzcnameGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameAPIRecordrpzcnameGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordRpzCnameAPIRecordrpzcnameGetRequest) Paging(paging int32) RecordRpzCnameAPIRecordrpzcnameGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordRpzCnameAPIRecordrpzcnameGetRequest) PageId(pageId string) RecordRpzCnameAPIRecordrpzcnameGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordRpzCnameAPIRecordrpzcnameGetRequest) Filters(filters map[string]interface{}) RecordRpzCnameAPIRecordrpzcnameGetRequest {
	r.filters = &filters
	return r
}

func (r RecordRpzCnameAPIRecordrpzcnameGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordRpzCnameAPIRecordrpzcnameGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordRpzCnameAPIRecordrpzcnameGetRequest) Execute() (*ListRecordRpzCnameResponse, *http.Response, error) {
	return r.ApiService.RecordrpzcnameGetExecute(r)
}

/*
RecordrpzcnameGet Retrieve record:rpz:cname objects

Returns a list of record:rpz:cname objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzCnameAPIRecordrpzcnameGetRequest
*/
func (a *RecordRpzCnameAPIService) RecordrpzcnameGet(ctx context.Context) RecordRpzCnameAPIRecordrpzcnameGetRequest {
	return RecordRpzCnameAPIRecordrpzcnameGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordRpzCnameResponse
func (a *RecordRpzCnameAPIService) RecordrpzcnameGetExecute(r RecordRpzCnameAPIRecordrpzcnameGetRequest) (*ListRecordRpzCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordRpzCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameAPIService.RecordrpzcnameGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameAPIRecordrpzcnamePostRequest struct {
	ctx            context.Context
	ApiService     RecordRpzCnameAPI
	recordRpzCname *RecordRpzCname
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordRpzCnameAPIRecordrpzcnamePostRequest) RecordRpzCname(recordRpzCname RecordRpzCname) RecordRpzCnameAPIRecordrpzcnamePostRequest {
	r.recordRpzCname = &recordRpzCname
	return r
}

// Enter the field names followed by comma
func (r RecordRpzCnameAPIRecordrpzcnamePostRequest) ReturnFields(returnFields string) RecordRpzCnameAPIRecordrpzcnamePostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameAPIRecordrpzcnamePostRequest) ReturnFields2(returnFields2 string) RecordRpzCnameAPIRecordrpzcnamePostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameAPIRecordrpzcnamePostRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameAPIRecordrpzcnamePostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameAPIRecordrpzcnamePostRequest) Execute() (*CreateRecordRpzCnameResponse, *http.Response, error) {
	return r.ApiService.RecordrpzcnamePostExecute(r)
}

/*
RecordrpzcnamePost Create a record:rpz:cname object

Creates a new record:rpz:cname object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzCnameAPIRecordrpzcnamePostRequest
*/
func (a *RecordRpzCnameAPIService) RecordrpzcnamePost(ctx context.Context) RecordRpzCnameAPIRecordrpzcnamePostRequest {
	return RecordRpzCnameAPIRecordrpzcnamePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordRpzCnameResponse
func (a *RecordRpzCnameAPIService) RecordrpzcnamePostExecute(r RecordRpzCnameAPIRecordrpzcnamePostRequest) (*CreateRecordRpzCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordRpzCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameAPIService.RecordrpzcnamePost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCname == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCname is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCname != nil {
		if r.recordRpzCname.Extattrs == nil {
			r.recordRpzCname.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCname.Extattrs)[k]; !ok {
				(*r.recordRpzCname.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCname
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameAPIRecordrpzcnameReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordRpzCnameAPI
	reference  string
}

func (r RecordRpzCnameAPIRecordrpzcnameReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordrpzcnameReferenceDeleteExecute(r)
}

/*
RecordrpzcnameReferenceDelete Delete a record:rpz:cname object

Deletes a specific record:rpz:cname object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname object
	@return RecordRpzCnameAPIRecordrpzcnameReferenceDeleteRequest
*/
func (a *RecordRpzCnameAPIService) RecordrpzcnameReferenceDelete(ctx context.Context, reference string) RecordRpzCnameAPIRecordrpzcnameReferenceDeleteRequest {
	return RecordRpzCnameAPIRecordrpzcnameReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordRpzCnameAPIService) RecordrpzcnameReferenceDeleteExecute(r RecordRpzCnameAPIRecordrpzcnameReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameAPIService.RecordrpzcnameReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzCnameAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest) ReturnFields(returnFields string) RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest) ReturnFields2(returnFields2 string) RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest) Execute() (*GetRecordRpzCnameResponse, *http.Response, error) {
	return r.ApiService.RecordrpzcnameReferenceGetExecute(r)
}

/*
RecordrpzcnameReferenceGet Get a specific record:rpz:cname object

Returns a specific record:rpz:cname object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname object
	@return RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest
*/
func (a *RecordRpzCnameAPIService) RecordrpzcnameReferenceGet(ctx context.Context, reference string) RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest {
	return RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordRpzCnameResponse
func (a *RecordRpzCnameAPIService) RecordrpzcnameReferenceGetExecute(r RecordRpzCnameAPIRecordrpzcnameReferenceGetRequest) (*GetRecordRpzCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordRpzCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameAPIService.RecordrpzcnameReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameAPIRecordrpzcnameReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordRpzCnameAPI
	reference      string
	recordRpzCname *RecordRpzCname
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordRpzCnameAPIRecordrpzcnameReferencePutRequest) RecordRpzCname(recordRpzCname RecordRpzCname) RecordRpzCnameAPIRecordrpzcnameReferencePutRequest {
	r.recordRpzCname = &recordRpzCname
	return r
}

// Enter the field names followed by comma
func (r RecordRpzCnameAPIRecordrpzcnameReferencePutRequest) ReturnFields(returnFields string) RecordRpzCnameAPIRecordrpzcnameReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameAPIRecordrpzcnameReferencePutRequest) ReturnFields2(returnFields2 string) RecordRpzCnameAPIRecordrpzcnameReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameAPIRecordrpzcnameReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameAPIRecordrpzcnameReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameAPIRecordrpzcnameReferencePutRequest) Execute() (*UpdateRecordRpzCnameResponse, *http.Response, error) {
	return r.ApiService.RecordrpzcnameReferencePutExecute(r)
}

/*
RecordrpzcnameReferencePut Update a record:rpz:cname object

Updates a specific record:rpz:cname object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname object
	@return RecordRpzCnameAPIRecordrpzcnameReferencePutRequest
*/
func (a *RecordRpzCnameAPIService) RecordrpzcnameReferencePut(ctx context.Context, reference string) RecordRpzCnameAPIRecordrpzcnameReferencePutRequest {
	return RecordRpzCnameAPIRecordrpzcnameReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordRpzCnameResponse
func (a *RecordRpzCnameAPIService) RecordrpzcnameReferencePutExecute(r RecordRpzCnameAPIRecordrpzcnameReferencePutRequest) (*UpdateRecordRpzCnameResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordRpzCnameResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameAPIService.RecordrpzcnameReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCname == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCname is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCname != nil {
		if r.recordRpzCname.Extattrs == nil {
			r.recordRpzCname.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCname.Extattrs)[k]; !ok {
				(*r.recordRpzCname.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCname
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
