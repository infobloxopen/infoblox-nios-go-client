/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordRpzCnameIpaddressAPI interface {
	/*
		RecordrpzcnameipaddressGet Retrieve record:rpz:cname:ipaddress objects

		Returns a list of record:rpz:cname:ipaddress objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest
	*/
	RecordrpzcnameipaddressGet(ctx context.Context) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest

	// RecordrpzcnameipaddressGetExecute executes the request
	//  @return ListRecordRpzCnameIpaddressResponse
	RecordrpzcnameipaddressGetExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) (*ListRecordRpzCnameIpaddressResponse, *http.Response, error)
	/*
		RecordrpzcnameipaddressPost Create a record:rpz:cname:ipaddress object

		Creates a new record:rpz:cname:ipaddress object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest
	*/
	RecordrpzcnameipaddressPost(ctx context.Context) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest

	// RecordrpzcnameipaddressPostExecute executes the request
	//  @return CreateRecordRpzCnameIpaddressResponse
	RecordrpzcnameipaddressPostExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest) (*CreateRecordRpzCnameIpaddressResponse, *http.Response, error)
	/*
		RecordrpzcnameipaddressReferenceDelete Delete a record:rpz:cname:ipaddress object

		Deletes a specific record:rpz:cname:ipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:ipaddress object
		@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceDeleteRequest
	*/
	RecordrpzcnameipaddressReferenceDelete(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceDeleteRequest

	// RecordrpzcnameipaddressReferenceDeleteExecute executes the request
	RecordrpzcnameipaddressReferenceDeleteExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordrpzcnameipaddressReferenceGet Get a specific record:rpz:cname:ipaddress object

		Returns a specific record:rpz:cname:ipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:ipaddress object
		@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest
	*/
	RecordrpzcnameipaddressReferenceGet(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest

	// RecordrpzcnameipaddressReferenceGetExecute executes the request
	//  @return GetRecordRpzCnameIpaddressResponse
	RecordrpzcnameipaddressReferenceGetExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest) (*GetRecordRpzCnameIpaddressResponse, *http.Response, error)
	/*
		RecordrpzcnameipaddressReferencePut Update a record:rpz:cname:ipaddress object

		Updates a specific record:rpz:cname:ipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:ipaddress object
		@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest
	*/
	RecordrpzcnameipaddressReferencePut(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest

	// RecordrpzcnameipaddressReferencePutExecute executes the request
	//  @return UpdateRecordRpzCnameIpaddressResponse
	RecordrpzcnameipaddressReferencePutExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest) (*UpdateRecordRpzCnameIpaddressResponse, *http.Response, error)
}

// RecordRpzCnameIpaddressAPIService RecordRpzCnameIpaddressAPI service
type RecordRpzCnameIpaddressAPIService internal.Service

type RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzCnameIpaddressAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) ReturnFields(returnFields string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) ReturnFields2(returnFields2 string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) MaxResults(maxResults int32) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) Paging(paging int32) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) PageId(pageId string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) Filters(filters map[string]interface{}) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest {
	r.filters = &filters
	return r
}

func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) Execute() (*ListRecordRpzCnameIpaddressResponse, *http.Response, error) {
	return r.ApiService.RecordrpzcnameipaddressGetExecute(r)
}

/*
RecordrpzcnameipaddressGet Retrieve record:rpz:cname:ipaddress objects

Returns a list of record:rpz:cname:ipaddress objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressGet(ctx context.Context) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest {
	return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordRpzCnameIpaddressResponse
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressGetExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressGetRequest) (*ListRecordRpzCnameIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordRpzCnameIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.RecordrpzcnameipaddressGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest struct {
	ctx                     context.Context
	ApiService              RecordRpzCnameIpaddressAPI
	recordRpzCnameIpaddress *RecordRpzCnameIpaddress
	returnFields            *string
	returnFields2           *string
	returnAsObject          *int32
}

// Object data to create
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest) RecordRpzCnameIpaddress(recordRpzCnameIpaddress RecordRpzCnameIpaddress) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest {
	r.recordRpzCnameIpaddress = &recordRpzCnameIpaddress
	return r
}

// Enter the field names followed by comma
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest) ReturnFields(returnFields string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest) ReturnFields2(returnFields2 string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest) Execute() (*CreateRecordRpzCnameIpaddressResponse, *http.Response, error) {
	return r.ApiService.RecordrpzcnameipaddressPostExecute(r)
}

/*
RecordrpzcnameipaddressPost Create a record:rpz:cname:ipaddress object

Creates a new record:rpz:cname:ipaddress object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressPost(ctx context.Context) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest {
	return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordRpzCnameIpaddressResponse
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressPostExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressPostRequest) (*CreateRecordRpzCnameIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordRpzCnameIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.RecordrpzcnameipaddressPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCnameIpaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCnameIpaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCnameIpaddress != nil {
		if r.recordRpzCnameIpaddress.Extattrs == nil {
			r.recordRpzCnameIpaddress.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCnameIpaddress.Extattrs)[k]; !ok {
				(*r.recordRpzCnameIpaddress.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCnameIpaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordRpzCnameIpaddressAPI
	reference  string
}

func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordrpzcnameipaddressReferenceDeleteExecute(r)
}

/*
RecordrpzcnameipaddressReferenceDelete Delete a record:rpz:cname:ipaddress object

Deletes a specific record:rpz:cname:ipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:ipaddress object
	@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceDeleteRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressReferenceDelete(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceDeleteRequest {
	return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressReferenceDeleteExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.RecordrpzcnameipaddressReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzCnameIpaddressAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest) ReturnFields(returnFields string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest) ReturnFields2(returnFields2 string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest) Execute() (*GetRecordRpzCnameIpaddressResponse, *http.Response, error) {
	return r.ApiService.RecordrpzcnameipaddressReferenceGetExecute(r)
}

/*
RecordrpzcnameipaddressReferenceGet Get a specific record:rpz:cname:ipaddress object

Returns a specific record:rpz:cname:ipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:ipaddress object
	@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressReferenceGet(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest {
	return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordRpzCnameIpaddressResponse
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressReferenceGetExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferenceGetRequest) (*GetRecordRpzCnameIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordRpzCnameIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.RecordrpzcnameipaddressReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest struct {
	ctx                     context.Context
	ApiService              RecordRpzCnameIpaddressAPI
	reference               string
	recordRpzCnameIpaddress *RecordRpzCnameIpaddress
	returnFields            *string
	returnFields2           *string
	returnAsObject          *int32
}

// Object data to update
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest) RecordRpzCnameIpaddress(recordRpzCnameIpaddress RecordRpzCnameIpaddress) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest {
	r.recordRpzCnameIpaddress = &recordRpzCnameIpaddress
	return r
}

// Enter the field names followed by comma
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest) ReturnFields(returnFields string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest) ReturnFields2(returnFields2 string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest) Execute() (*UpdateRecordRpzCnameIpaddressResponse, *http.Response, error) {
	return r.ApiService.RecordrpzcnameipaddressReferencePutExecute(r)
}

/*
RecordrpzcnameipaddressReferencePut Update a record:rpz:cname:ipaddress object

Updates a specific record:rpz:cname:ipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:ipaddress object
	@return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressReferencePut(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest {
	return RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordRpzCnameIpaddressResponse
func (a *RecordRpzCnameIpaddressAPIService) RecordrpzcnameipaddressReferencePutExecute(r RecordRpzCnameIpaddressAPIRecordrpzcnameipaddressReferencePutRequest) (*UpdateRecordRpzCnameIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordRpzCnameIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.RecordrpzcnameipaddressReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCnameIpaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCnameIpaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCnameIpaddress != nil {
		if r.recordRpzCnameIpaddress.Extattrs == nil {
			r.recordRpzCnameIpaddress.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCnameIpaddress.Extattrs)[k]; !ok {
				(*r.recordRpzCnameIpaddress.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCnameIpaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
