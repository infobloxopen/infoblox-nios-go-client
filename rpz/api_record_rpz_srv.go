/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordRpzSrvAPI interface {
	/*
		RecordrpzsrvGet Retrieve record:rpz:srv objects

		Returns a list of record:rpz:srv objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzSrvAPIRecordrpzsrvGetRequest
	*/
	RecordrpzsrvGet(ctx context.Context) RecordRpzSrvAPIRecordrpzsrvGetRequest

	// RecordrpzsrvGetExecute executes the request
	//  @return ListRecordRpzSrvResponse
	RecordrpzsrvGetExecute(r RecordRpzSrvAPIRecordrpzsrvGetRequest) (*ListRecordRpzSrvResponse, *http.Response, error)
	/*
		RecordrpzsrvPost Create a record:rpz:srv object

		Creates a new record:rpz:srv object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzSrvAPIRecordrpzsrvPostRequest
	*/
	RecordrpzsrvPost(ctx context.Context) RecordRpzSrvAPIRecordrpzsrvPostRequest

	// RecordrpzsrvPostExecute executes the request
	//  @return CreateRecordRpzSrvResponse
	RecordrpzsrvPostExecute(r RecordRpzSrvAPIRecordrpzsrvPostRequest) (*CreateRecordRpzSrvResponse, *http.Response, error)
	/*
		RecordrpzsrvReferenceDelete Delete a record:rpz:srv object

		Deletes a specific record:rpz:srv object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:srv object
		@return RecordRpzSrvAPIRecordrpzsrvReferenceDeleteRequest
	*/
	RecordrpzsrvReferenceDelete(ctx context.Context, reference string) RecordRpzSrvAPIRecordrpzsrvReferenceDeleteRequest

	// RecordrpzsrvReferenceDeleteExecute executes the request
	RecordrpzsrvReferenceDeleteExecute(r RecordRpzSrvAPIRecordrpzsrvReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordrpzsrvReferenceGet Get a specific record:rpz:srv object

		Returns a specific record:rpz:srv object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:srv object
		@return RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest
	*/
	RecordrpzsrvReferenceGet(ctx context.Context, reference string) RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest

	// RecordrpzsrvReferenceGetExecute executes the request
	//  @return GetRecordRpzSrvResponse
	RecordrpzsrvReferenceGetExecute(r RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest) (*GetRecordRpzSrvResponse, *http.Response, error)
	/*
		RecordrpzsrvReferencePut Update a record:rpz:srv object

		Updates a specific record:rpz:srv object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:srv object
		@return RecordRpzSrvAPIRecordrpzsrvReferencePutRequest
	*/
	RecordrpzsrvReferencePut(ctx context.Context, reference string) RecordRpzSrvAPIRecordrpzsrvReferencePutRequest

	// RecordrpzsrvReferencePutExecute executes the request
	//  @return UpdateRecordRpzSrvResponse
	RecordrpzsrvReferencePutExecute(r RecordRpzSrvAPIRecordrpzsrvReferencePutRequest) (*UpdateRecordRpzSrvResponse, *http.Response, error)
}

// RecordRpzSrvAPIService RecordRpzSrvAPI service
type RecordRpzSrvAPIService internal.Service

type RecordRpzSrvAPIRecordrpzsrvGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzSrvAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordRpzSrvAPIRecordrpzsrvGetRequest) ReturnFields(returnFields string) RecordRpzSrvAPIRecordrpzsrvGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzSrvAPIRecordrpzsrvGetRequest) ReturnFields2(returnFields2 string) RecordRpzSrvAPIRecordrpzsrvGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordRpzSrvAPIRecordrpzsrvGetRequest) MaxResults(maxResults int32) RecordRpzSrvAPIRecordrpzsrvGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzSrvAPIRecordrpzsrvGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzSrvAPIRecordrpzsrvGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordRpzSrvAPIRecordrpzsrvGetRequest) Paging(paging int32) RecordRpzSrvAPIRecordrpzsrvGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordRpzSrvAPIRecordrpzsrvGetRequest) PageId(pageId string) RecordRpzSrvAPIRecordrpzsrvGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordRpzSrvAPIRecordrpzsrvGetRequest) Filters(filters map[string]interface{}) RecordRpzSrvAPIRecordrpzsrvGetRequest {
	r.filters = &filters
	return r
}

func (r RecordRpzSrvAPIRecordrpzsrvGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordRpzSrvAPIRecordrpzsrvGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordRpzSrvAPIRecordrpzsrvGetRequest) Execute() (*ListRecordRpzSrvResponse, *http.Response, error) {
	return r.ApiService.RecordrpzsrvGetExecute(r)
}

/*
RecordrpzsrvGet Retrieve record:rpz:srv objects

Returns a list of record:rpz:srv objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzSrvAPIRecordrpzsrvGetRequest
*/
func (a *RecordRpzSrvAPIService) RecordrpzsrvGet(ctx context.Context) RecordRpzSrvAPIRecordrpzsrvGetRequest {
	return RecordRpzSrvAPIRecordrpzsrvGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordRpzSrvResponse
func (a *RecordRpzSrvAPIService) RecordrpzsrvGetExecute(r RecordRpzSrvAPIRecordrpzsrvGetRequest) (*ListRecordRpzSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordRpzSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzSrvAPIService.RecordrpzsrvGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:srv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzSrvAPIRecordrpzsrvPostRequest struct {
	ctx            context.Context
	ApiService     RecordRpzSrvAPI
	recordRpzSrv   *RecordRpzSrv
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordRpzSrvAPIRecordrpzsrvPostRequest) RecordRpzSrv(recordRpzSrv RecordRpzSrv) RecordRpzSrvAPIRecordrpzsrvPostRequest {
	r.recordRpzSrv = &recordRpzSrv
	return r
}

// Enter the field names followed by comma
func (r RecordRpzSrvAPIRecordrpzsrvPostRequest) ReturnFields(returnFields string) RecordRpzSrvAPIRecordrpzsrvPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzSrvAPIRecordrpzsrvPostRequest) ReturnFields2(returnFields2 string) RecordRpzSrvAPIRecordrpzsrvPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzSrvAPIRecordrpzsrvPostRequest) ReturnAsObject(returnAsObject int32) RecordRpzSrvAPIRecordrpzsrvPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzSrvAPIRecordrpzsrvPostRequest) Execute() (*CreateRecordRpzSrvResponse, *http.Response, error) {
	return r.ApiService.RecordrpzsrvPostExecute(r)
}

/*
RecordrpzsrvPost Create a record:rpz:srv object

Creates a new record:rpz:srv object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzSrvAPIRecordrpzsrvPostRequest
*/
func (a *RecordRpzSrvAPIService) RecordrpzsrvPost(ctx context.Context) RecordRpzSrvAPIRecordrpzsrvPostRequest {
	return RecordRpzSrvAPIRecordrpzsrvPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordRpzSrvResponse
func (a *RecordRpzSrvAPIService) RecordrpzsrvPostExecute(r RecordRpzSrvAPIRecordrpzsrvPostRequest) (*CreateRecordRpzSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordRpzSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzSrvAPIService.RecordrpzsrvPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:srv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzSrv == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzSrv is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzSrv != nil {
		if r.recordRpzSrv.Extattrs == nil {
			r.recordRpzSrv.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzSrv.Extattrs)[k]; !ok {
				(*r.recordRpzSrv.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzSrv
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzSrvAPIRecordrpzsrvReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordRpzSrvAPI
	reference  string
}

func (r RecordRpzSrvAPIRecordrpzsrvReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordrpzsrvReferenceDeleteExecute(r)
}

/*
RecordrpzsrvReferenceDelete Delete a record:rpz:srv object

Deletes a specific record:rpz:srv object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:srv object
	@return RecordRpzSrvAPIRecordrpzsrvReferenceDeleteRequest
*/
func (a *RecordRpzSrvAPIService) RecordrpzsrvReferenceDelete(ctx context.Context, reference string) RecordRpzSrvAPIRecordrpzsrvReferenceDeleteRequest {
	return RecordRpzSrvAPIRecordrpzsrvReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordRpzSrvAPIService) RecordrpzsrvReferenceDeleteExecute(r RecordRpzSrvAPIRecordrpzsrvReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzSrvAPIService.RecordrpzsrvReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:srv/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzSrvAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest) ReturnFields(returnFields string) RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest) ReturnFields2(returnFields2 string) RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest) Execute() (*GetRecordRpzSrvResponse, *http.Response, error) {
	return r.ApiService.RecordrpzsrvReferenceGetExecute(r)
}

/*
RecordrpzsrvReferenceGet Get a specific record:rpz:srv object

Returns a specific record:rpz:srv object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:srv object
	@return RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest
*/
func (a *RecordRpzSrvAPIService) RecordrpzsrvReferenceGet(ctx context.Context, reference string) RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest {
	return RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordRpzSrvResponse
func (a *RecordRpzSrvAPIService) RecordrpzsrvReferenceGetExecute(r RecordRpzSrvAPIRecordrpzsrvReferenceGetRequest) (*GetRecordRpzSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordRpzSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzSrvAPIService.RecordrpzsrvReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:srv/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzSrvAPIRecordrpzsrvReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordRpzSrvAPI
	reference      string
	recordRpzSrv   *RecordRpzSrv
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordRpzSrvAPIRecordrpzsrvReferencePutRequest) RecordRpzSrv(recordRpzSrv RecordRpzSrv) RecordRpzSrvAPIRecordrpzsrvReferencePutRequest {
	r.recordRpzSrv = &recordRpzSrv
	return r
}

// Enter the field names followed by comma
func (r RecordRpzSrvAPIRecordrpzsrvReferencePutRequest) ReturnFields(returnFields string) RecordRpzSrvAPIRecordrpzsrvReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzSrvAPIRecordrpzsrvReferencePutRequest) ReturnFields2(returnFields2 string) RecordRpzSrvAPIRecordrpzsrvReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzSrvAPIRecordrpzsrvReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordRpzSrvAPIRecordrpzsrvReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzSrvAPIRecordrpzsrvReferencePutRequest) Execute() (*UpdateRecordRpzSrvResponse, *http.Response, error) {
	return r.ApiService.RecordrpzsrvReferencePutExecute(r)
}

/*
RecordrpzsrvReferencePut Update a record:rpz:srv object

Updates a specific record:rpz:srv object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:srv object
	@return RecordRpzSrvAPIRecordrpzsrvReferencePutRequest
*/
func (a *RecordRpzSrvAPIService) RecordrpzsrvReferencePut(ctx context.Context, reference string) RecordRpzSrvAPIRecordrpzsrvReferencePutRequest {
	return RecordRpzSrvAPIRecordrpzsrvReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordRpzSrvResponse
func (a *RecordRpzSrvAPIService) RecordrpzsrvReferencePutExecute(r RecordRpzSrvAPIRecordrpzsrvReferencePutRequest) (*UpdateRecordRpzSrvResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordRpzSrvResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzSrvAPIService.RecordrpzsrvReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:srv/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzSrv == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzSrv is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzSrv != nil {
		if r.recordRpzSrv.Extattrs == nil {
			r.recordRpzSrv.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzSrv.Extattrs)[k]; !ok {
				(*r.recordRpzSrv.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzSrv
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
