/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordRpzTxtAPI interface {
	/*
		RecordrpztxtGet Retrieve record:rpz:txt objects

		Returns a list of record:rpz:txt objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzTxtAPIRecordrpztxtGetRequest
	*/
	RecordrpztxtGet(ctx context.Context) RecordRpzTxtAPIRecordrpztxtGetRequest

	// RecordrpztxtGetExecute executes the request
	//  @return ListRecordRpzTxtResponse
	RecordrpztxtGetExecute(r RecordRpzTxtAPIRecordrpztxtGetRequest) (*ListRecordRpzTxtResponse, *http.Response, error)
	/*
		RecordrpztxtPost Create a record:rpz:txt object

		Creates a new record:rpz:txt object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzTxtAPIRecordrpztxtPostRequest
	*/
	RecordrpztxtPost(ctx context.Context) RecordRpzTxtAPIRecordrpztxtPostRequest

	// RecordrpztxtPostExecute executes the request
	//  @return CreateRecordRpzTxtResponse
	RecordrpztxtPostExecute(r RecordRpzTxtAPIRecordrpztxtPostRequest) (*CreateRecordRpzTxtResponse, *http.Response, error)
	/*
		RecordrpztxtReferenceDelete Delete a record:rpz:txt object

		Deletes a specific record:rpz:txt object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:txt object
		@return RecordRpzTxtAPIRecordrpztxtReferenceDeleteRequest
	*/
	RecordrpztxtReferenceDelete(ctx context.Context, reference string) RecordRpzTxtAPIRecordrpztxtReferenceDeleteRequest

	// RecordrpztxtReferenceDeleteExecute executes the request
	RecordrpztxtReferenceDeleteExecute(r RecordRpzTxtAPIRecordrpztxtReferenceDeleteRequest) (*http.Response, error)
	/*
		RecordrpztxtReferenceGet Get a specific record:rpz:txt object

		Returns a specific record:rpz:txt object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:txt object
		@return RecordRpzTxtAPIRecordrpztxtReferenceGetRequest
	*/
	RecordrpztxtReferenceGet(ctx context.Context, reference string) RecordRpzTxtAPIRecordrpztxtReferenceGetRequest

	// RecordrpztxtReferenceGetExecute executes the request
	//  @return GetRecordRpzTxtResponse
	RecordrpztxtReferenceGetExecute(r RecordRpzTxtAPIRecordrpztxtReferenceGetRequest) (*GetRecordRpzTxtResponse, *http.Response, error)
	/*
		RecordrpztxtReferencePut Update a record:rpz:txt object

		Updates a specific record:rpz:txt object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:txt object
		@return RecordRpzTxtAPIRecordrpztxtReferencePutRequest
	*/
	RecordrpztxtReferencePut(ctx context.Context, reference string) RecordRpzTxtAPIRecordrpztxtReferencePutRequest

	// RecordrpztxtReferencePutExecute executes the request
	//  @return UpdateRecordRpzTxtResponse
	RecordrpztxtReferencePutExecute(r RecordRpzTxtAPIRecordrpztxtReferencePutRequest) (*UpdateRecordRpzTxtResponse, *http.Response, error)
}

// RecordRpzTxtAPIService RecordRpzTxtAPI service
type RecordRpzTxtAPIService internal.Service

type RecordRpzTxtAPIRecordrpztxtGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzTxtAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordRpzTxtAPIRecordrpztxtGetRequest) ReturnFields(returnFields string) RecordRpzTxtAPIRecordrpztxtGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzTxtAPIRecordrpztxtGetRequest) ReturnFields2(returnFields2 string) RecordRpzTxtAPIRecordrpztxtGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordRpzTxtAPIRecordrpztxtGetRequest) MaxResults(maxResults int32) RecordRpzTxtAPIRecordrpztxtGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzTxtAPIRecordrpztxtGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzTxtAPIRecordrpztxtGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordRpzTxtAPIRecordrpztxtGetRequest) Paging(paging int32) RecordRpzTxtAPIRecordrpztxtGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordRpzTxtAPIRecordrpztxtGetRequest) PageId(pageId string) RecordRpzTxtAPIRecordrpztxtGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordRpzTxtAPIRecordrpztxtGetRequest) Filters(filters map[string]interface{}) RecordRpzTxtAPIRecordrpztxtGetRequest {
	r.filters = &filters
	return r
}

func (r RecordRpzTxtAPIRecordrpztxtGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordRpzTxtAPIRecordrpztxtGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordRpzTxtAPIRecordrpztxtGetRequest) Execute() (*ListRecordRpzTxtResponse, *http.Response, error) {
	return r.ApiService.RecordrpztxtGetExecute(r)
}

/*
RecordrpztxtGet Retrieve record:rpz:txt objects

Returns a list of record:rpz:txt objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzTxtAPIRecordrpztxtGetRequest
*/
func (a *RecordRpzTxtAPIService) RecordrpztxtGet(ctx context.Context) RecordRpzTxtAPIRecordrpztxtGetRequest {
	return RecordRpzTxtAPIRecordrpztxtGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordRpzTxtResponse
func (a *RecordRpzTxtAPIService) RecordrpztxtGetExecute(r RecordRpzTxtAPIRecordrpztxtGetRequest) (*ListRecordRpzTxtResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordRpzTxtResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzTxtAPIService.RecordrpztxtGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:txt"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzTxtAPIRecordrpztxtPostRequest struct {
	ctx            context.Context
	ApiService     RecordRpzTxtAPI
	recordRpzTxt   *RecordRpzTxt
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r RecordRpzTxtAPIRecordrpztxtPostRequest) RecordRpzTxt(recordRpzTxt RecordRpzTxt) RecordRpzTxtAPIRecordrpztxtPostRequest {
	r.recordRpzTxt = &recordRpzTxt
	return r
}

// Enter the field names followed by comma
func (r RecordRpzTxtAPIRecordrpztxtPostRequest) ReturnFields(returnFields string) RecordRpzTxtAPIRecordrpztxtPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzTxtAPIRecordrpztxtPostRequest) ReturnFields2(returnFields2 string) RecordRpzTxtAPIRecordrpztxtPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzTxtAPIRecordrpztxtPostRequest) ReturnAsObject(returnAsObject int32) RecordRpzTxtAPIRecordrpztxtPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzTxtAPIRecordrpztxtPostRequest) Execute() (*CreateRecordRpzTxtResponse, *http.Response, error) {
	return r.ApiService.RecordrpztxtPostExecute(r)
}

/*
RecordrpztxtPost Create a record:rpz:txt object

Creates a new record:rpz:txt object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzTxtAPIRecordrpztxtPostRequest
*/
func (a *RecordRpzTxtAPIService) RecordrpztxtPost(ctx context.Context) RecordRpzTxtAPIRecordrpztxtPostRequest {
	return RecordRpzTxtAPIRecordrpztxtPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordRpzTxtResponse
func (a *RecordRpzTxtAPIService) RecordrpztxtPostExecute(r RecordRpzTxtAPIRecordrpztxtPostRequest) (*CreateRecordRpzTxtResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordRpzTxtResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzTxtAPIService.RecordrpztxtPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:txt"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzTxt == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzTxt is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzTxt != nil {
		if r.recordRpzTxt.Extattrs == nil {
			r.recordRpzTxt.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzTxt.Extattrs)[k]; !ok {
				(*r.recordRpzTxt.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzTxt
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzTxtAPIRecordrpztxtReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordRpzTxtAPI
	reference  string
}

func (r RecordRpzTxtAPIRecordrpztxtReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordrpztxtReferenceDeleteExecute(r)
}

/*
RecordrpztxtReferenceDelete Delete a record:rpz:txt object

Deletes a specific record:rpz:txt object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:txt object
	@return RecordRpzTxtAPIRecordrpztxtReferenceDeleteRequest
*/
func (a *RecordRpzTxtAPIService) RecordrpztxtReferenceDelete(ctx context.Context, reference string) RecordRpzTxtAPIRecordrpztxtReferenceDeleteRequest {
	return RecordRpzTxtAPIRecordrpztxtReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordRpzTxtAPIService) RecordrpztxtReferenceDeleteExecute(r RecordRpzTxtAPIRecordrpztxtReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzTxtAPIService.RecordrpztxtReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:txt/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordRpzTxtAPIRecordrpztxtReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordRpzTxtAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordRpzTxtAPIRecordrpztxtReferenceGetRequest) ReturnFields(returnFields string) RecordRpzTxtAPIRecordrpztxtReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzTxtAPIRecordrpztxtReferenceGetRequest) ReturnFields2(returnFields2 string) RecordRpzTxtAPIRecordrpztxtReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzTxtAPIRecordrpztxtReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordRpzTxtAPIRecordrpztxtReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzTxtAPIRecordrpztxtReferenceGetRequest) Execute() (*GetRecordRpzTxtResponse, *http.Response, error) {
	return r.ApiService.RecordrpztxtReferenceGetExecute(r)
}

/*
RecordrpztxtReferenceGet Get a specific record:rpz:txt object

Returns a specific record:rpz:txt object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:txt object
	@return RecordRpzTxtAPIRecordrpztxtReferenceGetRequest
*/
func (a *RecordRpzTxtAPIService) RecordrpztxtReferenceGet(ctx context.Context, reference string) RecordRpzTxtAPIRecordrpztxtReferenceGetRequest {
	return RecordRpzTxtAPIRecordrpztxtReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordRpzTxtResponse
func (a *RecordRpzTxtAPIService) RecordrpztxtReferenceGetExecute(r RecordRpzTxtAPIRecordrpztxtReferenceGetRequest) (*GetRecordRpzTxtResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordRpzTxtResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzTxtAPIService.RecordrpztxtReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:txt/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzTxtAPIRecordrpztxtReferencePutRequest struct {
	ctx            context.Context
	ApiService     RecordRpzTxtAPI
	reference      string
	recordRpzTxt   *RecordRpzTxt
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r RecordRpzTxtAPIRecordrpztxtReferencePutRequest) RecordRpzTxt(recordRpzTxt RecordRpzTxt) RecordRpzTxtAPIRecordrpztxtReferencePutRequest {
	r.recordRpzTxt = &recordRpzTxt
	return r
}

// Enter the field names followed by comma
func (r RecordRpzTxtAPIRecordrpztxtReferencePutRequest) ReturnFields(returnFields string) RecordRpzTxtAPIRecordrpztxtReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzTxtAPIRecordrpztxtReferencePutRequest) ReturnFields2(returnFields2 string) RecordRpzTxtAPIRecordrpztxtReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzTxtAPIRecordrpztxtReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordRpzTxtAPIRecordrpztxtReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzTxtAPIRecordrpztxtReferencePutRequest) Execute() (*UpdateRecordRpzTxtResponse, *http.Response, error) {
	return r.ApiService.RecordrpztxtReferencePutExecute(r)
}

/*
RecordrpztxtReferencePut Update a record:rpz:txt object

Updates a specific record:rpz:txt object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:txt object
	@return RecordRpzTxtAPIRecordrpztxtReferencePutRequest
*/
func (a *RecordRpzTxtAPIService) RecordrpztxtReferencePut(ctx context.Context, reference string) RecordRpzTxtAPIRecordrpztxtReferencePutRequest {
	return RecordRpzTxtAPIRecordrpztxtReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordRpzTxtResponse
func (a *RecordRpzTxtAPIService) RecordrpztxtReferencePutExecute(r RecordRpzTxtAPIRecordrpztxtReferencePutRequest) (*UpdateRecordRpzTxtResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordRpzTxtResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzTxtAPIService.RecordrpztxtReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:txt/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzTxt == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzTxt is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzTxt != nil {
		if r.recordRpzTxt.Extattrs == nil {
			r.recordRpzTxt.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzTxt.Extattrs)[k]; !ok {
				(*r.recordRpzTxt.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzTxt
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
