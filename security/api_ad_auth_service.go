/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type AdAuthServiceAPI interface {
	/*
		Get Retrieve ad_auth_service objects

		Returns a list of ad_auth_service objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AdAuthServiceAPIGetRequest
	*/
	Get(ctx context.Context) AdAuthServiceAPIGetRequest

	// GetExecute executes the request
	//  @return ListAdAuthServiceResponse
	GetExecute(r AdAuthServiceAPIGetRequest) (*ListAdAuthServiceResponse, *http.Response, error)
	/*
		Post Create a ad_auth_service object

		Creates a new ad_auth_service object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AdAuthServiceAPIPostRequest
	*/
	Post(ctx context.Context) AdAuthServiceAPIPostRequest

	// PostExecute executes the request
	//  @return CreateAdAuthServiceResponse
	PostExecute(r AdAuthServiceAPIPostRequest) (*CreateAdAuthServiceResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a ad_auth_service object

		Deletes a specific ad_auth_service object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ad_auth_service object
		@return AdAuthServiceAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) AdAuthServiceAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r AdAuthServiceAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific ad_auth_service object

		Returns a specific ad_auth_service object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ad_auth_service object
		@return AdAuthServiceAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) AdAuthServiceAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetAdAuthServiceResponse
	ReferenceGetExecute(r AdAuthServiceAPIReferenceGetRequest) (*GetAdAuthServiceResponse, *http.Response, error)
	/*
		ReferencePut Update a ad_auth_service object

		Updates a specific ad_auth_service object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ad_auth_service object
		@return AdAuthServiceAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) AdAuthServiceAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateAdAuthServiceResponse
	ReferencePutExecute(r AdAuthServiceAPIReferencePutRequest) (*UpdateAdAuthServiceResponse, *http.Response, error)
}

// AdAuthServiceAPIService AdAuthServiceAPI service
type AdAuthServiceAPIService internal.Service

type AdAuthServiceAPIGetRequest struct {
	ctx            context.Context
	ApiService     AdAuthServiceAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r AdAuthServiceAPIGetRequest) ReturnFields(returnFields string) AdAuthServiceAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AdAuthServiceAPIGetRequest) ReturnFields2(returnFields2 string) AdAuthServiceAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r AdAuthServiceAPIGetRequest) MaxResults(maxResults int32) AdAuthServiceAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r AdAuthServiceAPIGetRequest) ReturnAsObject(returnAsObject int32) AdAuthServiceAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r AdAuthServiceAPIGetRequest) Paging(paging int32) AdAuthServiceAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r AdAuthServiceAPIGetRequest) PageId(pageId string) AdAuthServiceAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r AdAuthServiceAPIGetRequest) Filters(filters map[string]interface{}) AdAuthServiceAPIGetRequest {
	r.filters = &filters
	return r
}

func (r AdAuthServiceAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) AdAuthServiceAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r AdAuthServiceAPIGetRequest) Execute() (*ListAdAuthServiceResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve ad_auth_service objects

Returns a list of ad_auth_service objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AdAuthServiceAPIGetRequest
*/
func (a *AdAuthServiceAPIService) Get(ctx context.Context) AdAuthServiceAPIGetRequest {
	return AdAuthServiceAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListAdAuthServiceResponse
func (a *AdAuthServiceAPIService) GetExecute(r AdAuthServiceAPIGetRequest) (*ListAdAuthServiceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListAdAuthServiceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AdAuthServiceAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ad_auth_service"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdAuthServiceAPIPostRequest struct {
	ctx            context.Context
	ApiService     AdAuthServiceAPI
	adAuthService  *AdAuthService
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r AdAuthServiceAPIPostRequest) AdAuthService(adAuthService AdAuthService) AdAuthServiceAPIPostRequest {
	r.adAuthService = &adAuthService
	return r
}

// Enter the field names followed by comma
func (r AdAuthServiceAPIPostRequest) ReturnFields(returnFields string) AdAuthServiceAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AdAuthServiceAPIPostRequest) ReturnFields2(returnFields2 string) AdAuthServiceAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r AdAuthServiceAPIPostRequest) ReturnAsObject(returnAsObject int32) AdAuthServiceAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AdAuthServiceAPIPostRequest) Execute() (*CreateAdAuthServiceResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a ad_auth_service object

Creates a new ad_auth_service object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AdAuthServiceAPIPostRequest
*/
func (a *AdAuthServiceAPIService) Post(ctx context.Context) AdAuthServiceAPIPostRequest {
	return AdAuthServiceAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateAdAuthServiceResponse
func (a *AdAuthServiceAPIService) PostExecute(r AdAuthServiceAPIPostRequest) (*CreateAdAuthServiceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateAdAuthServiceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AdAuthServiceAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ad_auth_service"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.adAuthService == nil {
		return localVarReturnValue, nil, internal.ReportError("adAuthService is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adAuthService
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdAuthServiceAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService AdAuthServiceAPI
	reference  string
}

func (r AdAuthServiceAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a ad_auth_service object

Deletes a specific ad_auth_service object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ad_auth_service object
	@return AdAuthServiceAPIReferenceDeleteRequest
*/
func (a *AdAuthServiceAPIService) ReferenceDelete(ctx context.Context, reference string) AdAuthServiceAPIReferenceDeleteRequest {
	return AdAuthServiceAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *AdAuthServiceAPIService) ReferenceDeleteExecute(r AdAuthServiceAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AdAuthServiceAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ad_auth_service/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AdAuthServiceAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     AdAuthServiceAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r AdAuthServiceAPIReferenceGetRequest) ReturnFields(returnFields string) AdAuthServiceAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AdAuthServiceAPIReferenceGetRequest) ReturnFields2(returnFields2 string) AdAuthServiceAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r AdAuthServiceAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) AdAuthServiceAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AdAuthServiceAPIReferenceGetRequest) Execute() (*GetAdAuthServiceResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific ad_auth_service object

Returns a specific ad_auth_service object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ad_auth_service object
	@return AdAuthServiceAPIReferenceGetRequest
*/
func (a *AdAuthServiceAPIService) ReferenceGet(ctx context.Context, reference string) AdAuthServiceAPIReferenceGetRequest {
	return AdAuthServiceAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetAdAuthServiceResponse
func (a *AdAuthServiceAPIService) ReferenceGetExecute(r AdAuthServiceAPIReferenceGetRequest) (*GetAdAuthServiceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetAdAuthServiceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AdAuthServiceAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ad_auth_service/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdAuthServiceAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     AdAuthServiceAPI
	reference      string
	adAuthService  *AdAuthService
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r AdAuthServiceAPIReferencePutRequest) AdAuthService(adAuthService AdAuthService) AdAuthServiceAPIReferencePutRequest {
	r.adAuthService = &adAuthService
	return r
}

// Enter the field names followed by comma
func (r AdAuthServiceAPIReferencePutRequest) ReturnFields(returnFields string) AdAuthServiceAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AdAuthServiceAPIReferencePutRequest) ReturnFields2(returnFields2 string) AdAuthServiceAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r AdAuthServiceAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) AdAuthServiceAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AdAuthServiceAPIReferencePutRequest) Execute() (*UpdateAdAuthServiceResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a ad_auth_service object

Updates a specific ad_auth_service object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ad_auth_service object
	@return AdAuthServiceAPIReferencePutRequest
*/
func (a *AdAuthServiceAPIService) ReferencePut(ctx context.Context, reference string) AdAuthServiceAPIReferencePutRequest {
	return AdAuthServiceAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateAdAuthServiceResponse
func (a *AdAuthServiceAPIService) ReferencePutExecute(r AdAuthServiceAPIReferencePutRequest) (*UpdateAdAuthServiceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateAdAuthServiceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AdAuthServiceAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ad_auth_service/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.adAuthService == nil {
		return localVarReturnValue, nil, internal.ReportError("adAuthService is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adAuthService
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
