/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type HsmThaleslunagroupAPI interface {
	/*
		HsmthaleslunagroupGet Retrieve hsm:thaleslunagroup objects

		Returns a list of hsm:thaleslunagroup objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest
	*/
	HsmthaleslunagroupGet(ctx context.Context) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest

	// HsmthaleslunagroupGetExecute executes the request
	//  @return ListHsmThaleslunagroupResponse
	HsmthaleslunagroupGetExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) (*ListHsmThaleslunagroupResponse, *http.Response, error)
	/*
		HsmthaleslunagroupPost Create a hsm:thaleslunagroup object

		Creates a new hsm:thaleslunagroup object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest
	*/
	HsmthaleslunagroupPost(ctx context.Context) HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest

	// HsmthaleslunagroupPostExecute executes the request
	//  @return CreateHsmThaleslunagroupResponse
	HsmthaleslunagroupPostExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest) (*CreateHsmThaleslunagroupResponse, *http.Response, error)
	/*
		HsmthaleslunagroupReferenceDelete Delete a hsm:thaleslunagroup object

		Deletes a specific hsm:thaleslunagroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the hsm:thaleslunagroup object
		@return HsmThaleslunagroupAPIHsmthaleslunagroupReferenceDeleteRequest
	*/
	HsmthaleslunagroupReferenceDelete(ctx context.Context, reference string) HsmThaleslunagroupAPIHsmthaleslunagroupReferenceDeleteRequest

	// HsmthaleslunagroupReferenceDeleteExecute executes the request
	HsmthaleslunagroupReferenceDeleteExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupReferenceDeleteRequest) (*http.Response, error)
	/*
		HsmthaleslunagroupReferenceGet Get a specific hsm:thaleslunagroup object

		Returns a specific hsm:thaleslunagroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the hsm:thaleslunagroup object
		@return HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest
	*/
	HsmthaleslunagroupReferenceGet(ctx context.Context, reference string) HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest

	// HsmthaleslunagroupReferenceGetExecute executes the request
	//  @return GetHsmThaleslunagroupResponse
	HsmthaleslunagroupReferenceGetExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest) (*GetHsmThaleslunagroupResponse, *http.Response, error)
	/*
		HsmthaleslunagroupReferencePut Update a hsm:thaleslunagroup object

		Updates a specific hsm:thaleslunagroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the hsm:thaleslunagroup object
		@return HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest
	*/
	HsmthaleslunagroupReferencePut(ctx context.Context, reference string) HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest

	// HsmthaleslunagroupReferencePutExecute executes the request
	//  @return UpdateHsmThaleslunagroupResponse
	HsmthaleslunagroupReferencePutExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest) (*UpdateHsmThaleslunagroupResponse, *http.Response, error)
}

// HsmThaleslunagroupAPIService HsmThaleslunagroupAPI service
type HsmThaleslunagroupAPIService internal.Service

type HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest struct {
	ctx            context.Context
	ApiService     HsmThaleslunagroupAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) ReturnFields(returnFields string) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) ReturnFields2(returnFields2 string) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) MaxResults(maxResults int32) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) ReturnAsObject(returnAsObject int32) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) Paging(paging int32) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) PageId(pageId string) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest {
	r.pageId = &pageId
	return r
}

func (r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) Filters(filters map[string]interface{}) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest {
	r.filters = &filters
	return r
}

func (r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) Extattrfilter(extattrfilter map[string]interface{}) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) Execute() (*ListHsmThaleslunagroupResponse, *http.Response, error) {
	return r.ApiService.HsmthaleslunagroupGetExecute(r)
}

/*
HsmthaleslunagroupGet Retrieve hsm:thaleslunagroup objects

Returns a list of hsm:thaleslunagroup objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest
*/
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupGet(ctx context.Context) HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest {
	return HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListHsmThaleslunagroupResponse
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupGetExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupGetRequest) (*ListHsmThaleslunagroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListHsmThaleslunagroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HsmThaleslunagroupAPIService.HsmthaleslunagroupGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hsm:thaleslunagroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest struct {
	ctx                context.Context
	ApiService         HsmThaleslunagroupAPI
	hsmThaleslunagroup *HsmThaleslunagroup
	returnFields       *string
	returnFields2      *string
	returnAsObject     *int32
}

// Object data to create
func (r HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest) HsmThaleslunagroup(hsmThaleslunagroup HsmThaleslunagroup) HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest {
	r.hsmThaleslunagroup = &hsmThaleslunagroup
	return r
}

// Enter the field names followed by comma
func (r HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest) ReturnFields(returnFields string) HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest) ReturnFields2(returnFields2 string) HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest) ReturnAsObject(returnAsObject int32) HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest) Execute() (*CreateHsmThaleslunagroupResponse, *http.Response, error) {
	return r.ApiService.HsmthaleslunagroupPostExecute(r)
}

/*
HsmthaleslunagroupPost Create a hsm:thaleslunagroup object

Creates a new hsm:thaleslunagroup object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest
*/
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupPost(ctx context.Context) HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest {
	return HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateHsmThaleslunagroupResponse
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupPostExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupPostRequest) (*CreateHsmThaleslunagroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateHsmThaleslunagroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HsmThaleslunagroupAPIService.HsmthaleslunagroupPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hsm:thaleslunagroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hsmThaleslunagroup == nil {
		return localVarReturnValue, nil, internal.ReportError("hsmThaleslunagroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hsmThaleslunagroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type HsmThaleslunagroupAPIHsmthaleslunagroupReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService HsmThaleslunagroupAPI
	reference  string
}

func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.HsmthaleslunagroupReferenceDeleteExecute(r)
}

/*
HsmthaleslunagroupReferenceDelete Delete a hsm:thaleslunagroup object

Deletes a specific hsm:thaleslunagroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the hsm:thaleslunagroup object
	@return HsmThaleslunagroupAPIHsmthaleslunagroupReferenceDeleteRequest
*/
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupReferenceDelete(ctx context.Context, reference string) HsmThaleslunagroupAPIHsmthaleslunagroupReferenceDeleteRequest {
	return HsmThaleslunagroupAPIHsmthaleslunagroupReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupReferenceDeleteExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HsmThaleslunagroupAPIService.HsmthaleslunagroupReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hsm:thaleslunagroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest struct {
	ctx            context.Context
	ApiService     HsmThaleslunagroupAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest) ReturnFields(returnFields string) HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest) ReturnFields2(returnFields2 string) HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest) ReturnAsObject(returnAsObject int32) HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest) Execute() (*GetHsmThaleslunagroupResponse, *http.Response, error) {
	return r.ApiService.HsmthaleslunagroupReferenceGetExecute(r)
}

/*
HsmthaleslunagroupReferenceGet Get a specific hsm:thaleslunagroup object

Returns a specific hsm:thaleslunagroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the hsm:thaleslunagroup object
	@return HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest
*/
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupReferenceGet(ctx context.Context, reference string) HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest {
	return HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetHsmThaleslunagroupResponse
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupReferenceGetExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupReferenceGetRequest) (*GetHsmThaleslunagroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetHsmThaleslunagroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HsmThaleslunagroupAPIService.HsmthaleslunagroupReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hsm:thaleslunagroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest struct {
	ctx                context.Context
	ApiService         HsmThaleslunagroupAPI
	reference          string
	hsmThaleslunagroup *HsmThaleslunagroup
	returnFields       *string
	returnFields2      *string
	returnAsObject     *int32
}

// Object data to update
func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest) HsmThaleslunagroup(hsmThaleslunagroup HsmThaleslunagroup) HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest {
	r.hsmThaleslunagroup = &hsmThaleslunagroup
	return r
}

// Enter the field names followed by comma
func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest) ReturnFields(returnFields string) HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest) ReturnFields2(returnFields2 string) HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest) ReturnAsObject(returnAsObject int32) HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest) Execute() (*UpdateHsmThaleslunagroupResponse, *http.Response, error) {
	return r.ApiService.HsmthaleslunagroupReferencePutExecute(r)
}

/*
HsmthaleslunagroupReferencePut Update a hsm:thaleslunagroup object

Updates a specific hsm:thaleslunagroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the hsm:thaleslunagroup object
	@return HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest
*/
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupReferencePut(ctx context.Context, reference string) HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest {
	return HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateHsmThaleslunagroupResponse
func (a *HsmThaleslunagroupAPIService) HsmthaleslunagroupReferencePutExecute(r HsmThaleslunagroupAPIHsmthaleslunagroupReferencePutRequest) (*UpdateHsmThaleslunagroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateHsmThaleslunagroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HsmThaleslunagroupAPIService.HsmthaleslunagroupReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hsm:thaleslunagroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hsmThaleslunagroup == nil {
		return localVarReturnValue, nil, internal.ReportError("hsmThaleslunagroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hsmThaleslunagroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
