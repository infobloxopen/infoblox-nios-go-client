/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type TacacsplusAuthserviceAPI interface {
	/*
		TacacsplusauthserviceGet Retrieve tacacsplus:authservice objects

		Returns a list of tacacsplus:authservice objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest
	*/
	TacacsplusauthserviceGet(ctx context.Context) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest

	// TacacsplusauthserviceGetExecute executes the request
	//  @return ListTacacsplusAuthserviceResponse
	TacacsplusauthserviceGetExecute(r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) (*ListTacacsplusAuthserviceResponse, *http.Response, error)
	/*
		TacacsplusauthservicePost Create a tacacsplus:authservice object

		Creates a new tacacsplus:authservice object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return TacacsplusAuthserviceAPITacacsplusauthservicePostRequest
	*/
	TacacsplusauthservicePost(ctx context.Context) TacacsplusAuthserviceAPITacacsplusauthservicePostRequest

	// TacacsplusauthservicePostExecute executes the request
	//  @return CreateTacacsplusAuthserviceResponse
	TacacsplusauthservicePostExecute(r TacacsplusAuthserviceAPITacacsplusauthservicePostRequest) (*CreateTacacsplusAuthserviceResponse, *http.Response, error)
	/*
		TacacsplusauthserviceReferenceDelete Delete a tacacsplus:authservice object

		Deletes a specific tacacsplus:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the tacacsplus:authservice object
		@return TacacsplusAuthserviceAPITacacsplusauthserviceReferenceDeleteRequest
	*/
	TacacsplusauthserviceReferenceDelete(ctx context.Context, reference string) TacacsplusAuthserviceAPITacacsplusauthserviceReferenceDeleteRequest

	// TacacsplusauthserviceReferenceDeleteExecute executes the request
	TacacsplusauthserviceReferenceDeleteExecute(r TacacsplusAuthserviceAPITacacsplusauthserviceReferenceDeleteRequest) (*http.Response, error)
	/*
		TacacsplusauthserviceReferenceGet Get a specific tacacsplus:authservice object

		Returns a specific tacacsplus:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the tacacsplus:authservice object
		@return TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest
	*/
	TacacsplusauthserviceReferenceGet(ctx context.Context, reference string) TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest

	// TacacsplusauthserviceReferenceGetExecute executes the request
	//  @return GetTacacsplusAuthserviceResponse
	TacacsplusauthserviceReferenceGetExecute(r TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest) (*GetTacacsplusAuthserviceResponse, *http.Response, error)
	/*
		TacacsplusauthserviceReferencePut Update a tacacsplus:authservice object

		Updates a specific tacacsplus:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the tacacsplus:authservice object
		@return TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest
	*/
	TacacsplusauthserviceReferencePut(ctx context.Context, reference string) TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest

	// TacacsplusauthserviceReferencePutExecute executes the request
	//  @return UpdateTacacsplusAuthserviceResponse
	TacacsplusauthserviceReferencePutExecute(r TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest) (*UpdateTacacsplusAuthserviceResponse, *http.Response, error)
}

// TacacsplusAuthserviceAPIService TacacsplusAuthserviceAPI service
type TacacsplusAuthserviceAPIService internal.Service

type TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest struct {
	ctx            context.Context
	ApiService     TacacsplusAuthserviceAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) ReturnFields(returnFields string) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) ReturnFields2(returnFields2 string) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) MaxResults(maxResults int32) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) ReturnAsObject(returnAsObject int32) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) Paging(paging int32) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) PageId(pageId string) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest {
	r.pageId = &pageId
	return r
}

func (r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) Filters(filters map[string]interface{}) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest {
	r.filters = &filters
	return r
}

func (r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) Extattrfilter(extattrfilter map[string]interface{}) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) Execute() (*ListTacacsplusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.TacacsplusauthserviceGetExecute(r)
}

/*
TacacsplusauthserviceGet Retrieve tacacsplus:authservice objects

Returns a list of tacacsplus:authservice objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest
*/
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthserviceGet(ctx context.Context) TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest {
	return TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListTacacsplusAuthserviceResponse
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthserviceGetExecute(r TacacsplusAuthserviceAPITacacsplusauthserviceGetRequest) (*ListTacacsplusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListTacacsplusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.TacacsplusauthserviceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type TacacsplusAuthserviceAPITacacsplusauthservicePostRequest struct {
	ctx                   context.Context
	ApiService            TacacsplusAuthserviceAPI
	tacacsplusAuthservice *TacacsplusAuthservice
	returnFields          *string
	returnFields2         *string
	returnAsObject        *int32
}

// Object data to create
func (r TacacsplusAuthserviceAPITacacsplusauthservicePostRequest) TacacsplusAuthservice(tacacsplusAuthservice TacacsplusAuthservice) TacacsplusAuthserviceAPITacacsplusauthservicePostRequest {
	r.tacacsplusAuthservice = &tacacsplusAuthservice
	return r
}

// Enter the field names followed by comma
func (r TacacsplusAuthserviceAPITacacsplusauthservicePostRequest) ReturnFields(returnFields string) TacacsplusAuthserviceAPITacacsplusauthservicePostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TacacsplusAuthserviceAPITacacsplusauthservicePostRequest) ReturnFields2(returnFields2 string) TacacsplusAuthserviceAPITacacsplusauthservicePostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r TacacsplusAuthserviceAPITacacsplusauthservicePostRequest) ReturnAsObject(returnAsObject int32) TacacsplusAuthserviceAPITacacsplusauthservicePostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r TacacsplusAuthserviceAPITacacsplusauthservicePostRequest) Execute() (*CreateTacacsplusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.TacacsplusauthservicePostExecute(r)
}

/*
TacacsplusauthservicePost Create a tacacsplus:authservice object

Creates a new tacacsplus:authservice object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TacacsplusAuthserviceAPITacacsplusauthservicePostRequest
*/
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthservicePost(ctx context.Context) TacacsplusAuthserviceAPITacacsplusauthservicePostRequest {
	return TacacsplusAuthserviceAPITacacsplusauthservicePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateTacacsplusAuthserviceResponse
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthservicePostExecute(r TacacsplusAuthserviceAPITacacsplusauthservicePostRequest) (*CreateTacacsplusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateTacacsplusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.TacacsplusauthservicePost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tacacsplusAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("tacacsplusAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tacacsplusAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type TacacsplusAuthserviceAPITacacsplusauthserviceReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService TacacsplusAuthserviceAPI
	reference  string
}

func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.TacacsplusauthserviceReferenceDeleteExecute(r)
}

/*
TacacsplusauthserviceReferenceDelete Delete a tacacsplus:authservice object

Deletes a specific tacacsplus:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the tacacsplus:authservice object
	@return TacacsplusAuthserviceAPITacacsplusauthserviceReferenceDeleteRequest
*/
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthserviceReferenceDelete(ctx context.Context, reference string) TacacsplusAuthserviceAPITacacsplusauthserviceReferenceDeleteRequest {
	return TacacsplusAuthserviceAPITacacsplusauthserviceReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthserviceReferenceDeleteExecute(r TacacsplusAuthserviceAPITacacsplusauthserviceReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.TacacsplusauthserviceReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest struct {
	ctx            context.Context
	ApiService     TacacsplusAuthserviceAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest) ReturnFields(returnFields string) TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest) ReturnFields2(returnFields2 string) TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest) ReturnAsObject(returnAsObject int32) TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest) Execute() (*GetTacacsplusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.TacacsplusauthserviceReferenceGetExecute(r)
}

/*
TacacsplusauthserviceReferenceGet Get a specific tacacsplus:authservice object

Returns a specific tacacsplus:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the tacacsplus:authservice object
	@return TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest
*/
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthserviceReferenceGet(ctx context.Context, reference string) TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest {
	return TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetTacacsplusAuthserviceResponse
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthserviceReferenceGetExecute(r TacacsplusAuthserviceAPITacacsplusauthserviceReferenceGetRequest) (*GetTacacsplusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetTacacsplusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.TacacsplusauthserviceReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest struct {
	ctx                   context.Context
	ApiService            TacacsplusAuthserviceAPI
	reference             string
	tacacsplusAuthservice *TacacsplusAuthservice
	returnFields          *string
	returnFields2         *string
	returnAsObject        *int32
}

// Object data to update
func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest) TacacsplusAuthservice(tacacsplusAuthservice TacacsplusAuthservice) TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest {
	r.tacacsplusAuthservice = &tacacsplusAuthservice
	return r
}

// Enter the field names followed by comma
func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest) ReturnFields(returnFields string) TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest) ReturnFields2(returnFields2 string) TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest) ReturnAsObject(returnAsObject int32) TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest) Execute() (*UpdateTacacsplusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.TacacsplusauthserviceReferencePutExecute(r)
}

/*
TacacsplusauthserviceReferencePut Update a tacacsplus:authservice object

Updates a specific tacacsplus:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the tacacsplus:authservice object
	@return TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest
*/
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthserviceReferencePut(ctx context.Context, reference string) TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest {
	return TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateTacacsplusAuthserviceResponse
func (a *TacacsplusAuthserviceAPIService) TacacsplusauthserviceReferencePutExecute(r TacacsplusAuthserviceAPITacacsplusauthserviceReferencePutRequest) (*UpdateTacacsplusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateTacacsplusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.TacacsplusauthserviceReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tacacsplusAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("tacacsplusAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tacacsplusAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
