/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SmartfolderGlobalAPI interface {
	/*
		SmartfolderglobalGet Retrieve smartfolder:global objects

		Returns a list of smartfolder:global objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SmartfolderGlobalAPISmartfolderglobalGetRequest
	*/
	SmartfolderglobalGet(ctx context.Context) SmartfolderGlobalAPISmartfolderglobalGetRequest

	// SmartfolderglobalGetExecute executes the request
	//  @return ListSmartfolderGlobalResponse
	SmartfolderglobalGetExecute(r SmartfolderGlobalAPISmartfolderglobalGetRequest) (*ListSmartfolderGlobalResponse, *http.Response, error)
	/*
		SmartfolderglobalPost Create a smartfolder:global object

		Creates a new smartfolder:global object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SmartfolderGlobalAPISmartfolderglobalPostRequest
	*/
	SmartfolderglobalPost(ctx context.Context) SmartfolderGlobalAPISmartfolderglobalPostRequest

	// SmartfolderglobalPostExecute executes the request
	//  @return CreateSmartfolderGlobalResponse
	SmartfolderglobalPostExecute(r SmartfolderGlobalAPISmartfolderglobalPostRequest) (*CreateSmartfolderGlobalResponse, *http.Response, error)
	/*
		SmartfolderglobalReferenceDelete Delete a smartfolder:global object

		Deletes a specific smartfolder:global object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the smartfolder:global object
		@return SmartfolderGlobalAPISmartfolderglobalReferenceDeleteRequest
	*/
	SmartfolderglobalReferenceDelete(ctx context.Context, reference string) SmartfolderGlobalAPISmartfolderglobalReferenceDeleteRequest

	// SmartfolderglobalReferenceDeleteExecute executes the request
	SmartfolderglobalReferenceDeleteExecute(r SmartfolderGlobalAPISmartfolderglobalReferenceDeleteRequest) (*http.Response, error)
	/*
		SmartfolderglobalReferenceGet Get a specific smartfolder:global object

		Returns a specific smartfolder:global object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the smartfolder:global object
		@return SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest
	*/
	SmartfolderglobalReferenceGet(ctx context.Context, reference string) SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest

	// SmartfolderglobalReferenceGetExecute executes the request
	//  @return GetSmartfolderGlobalResponse
	SmartfolderglobalReferenceGetExecute(r SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest) (*GetSmartfolderGlobalResponse, *http.Response, error)
	/*
		SmartfolderglobalReferencePut Update a smartfolder:global object

		Updates a specific smartfolder:global object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the smartfolder:global object
		@return SmartfolderGlobalAPISmartfolderglobalReferencePutRequest
	*/
	SmartfolderglobalReferencePut(ctx context.Context, reference string) SmartfolderGlobalAPISmartfolderglobalReferencePutRequest

	// SmartfolderglobalReferencePutExecute executes the request
	//  @return UpdateSmartfolderGlobalResponse
	SmartfolderglobalReferencePutExecute(r SmartfolderGlobalAPISmartfolderglobalReferencePutRequest) (*UpdateSmartfolderGlobalResponse, *http.Response, error)
}

// SmartfolderGlobalAPIService SmartfolderGlobalAPI service
type SmartfolderGlobalAPIService internal.Service

type SmartfolderGlobalAPISmartfolderglobalGetRequest struct {
	ctx            context.Context
	ApiService     SmartfolderGlobalAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r SmartfolderGlobalAPISmartfolderglobalGetRequest) ReturnFields(returnFields string) SmartfolderGlobalAPISmartfolderglobalGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderGlobalAPISmartfolderglobalGetRequest) ReturnFields2(returnFields2 string) SmartfolderGlobalAPISmartfolderglobalGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r SmartfolderGlobalAPISmartfolderglobalGetRequest) MaxResults(maxResults int32) SmartfolderGlobalAPISmartfolderglobalGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderGlobalAPISmartfolderglobalGetRequest) ReturnAsObject(returnAsObject int32) SmartfolderGlobalAPISmartfolderglobalGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SmartfolderGlobalAPISmartfolderglobalGetRequest) Paging(paging int32) SmartfolderGlobalAPISmartfolderglobalGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SmartfolderGlobalAPISmartfolderglobalGetRequest) PageId(pageId string) SmartfolderGlobalAPISmartfolderglobalGetRequest {
	r.pageId = &pageId
	return r
}

func (r SmartfolderGlobalAPISmartfolderglobalGetRequest) Filters(filters map[string]interface{}) SmartfolderGlobalAPISmartfolderglobalGetRequest {
	r.filters = &filters
	return r
}

func (r SmartfolderGlobalAPISmartfolderglobalGetRequest) Extattrfilter(extattrfilter map[string]interface{}) SmartfolderGlobalAPISmartfolderglobalGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SmartfolderGlobalAPISmartfolderglobalGetRequest) Execute() (*ListSmartfolderGlobalResponse, *http.Response, error) {
	return r.ApiService.SmartfolderglobalGetExecute(r)
}

/*
SmartfolderglobalGet Retrieve smartfolder:global objects

Returns a list of smartfolder:global objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SmartfolderGlobalAPISmartfolderglobalGetRequest
*/
func (a *SmartfolderGlobalAPIService) SmartfolderglobalGet(ctx context.Context) SmartfolderGlobalAPISmartfolderglobalGetRequest {
	return SmartfolderGlobalAPISmartfolderglobalGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSmartfolderGlobalResponse
func (a *SmartfolderGlobalAPIService) SmartfolderglobalGetExecute(r SmartfolderGlobalAPISmartfolderglobalGetRequest) (*ListSmartfolderGlobalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSmartfolderGlobalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.SmartfolderglobalGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartfolderGlobalAPISmartfolderglobalPostRequest struct {
	ctx               context.Context
	ApiService        SmartfolderGlobalAPI
	smartfolderGlobal *SmartfolderGlobal
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to create
func (r SmartfolderGlobalAPISmartfolderglobalPostRequest) SmartfolderGlobal(smartfolderGlobal SmartfolderGlobal) SmartfolderGlobalAPISmartfolderglobalPostRequest {
	r.smartfolderGlobal = &smartfolderGlobal
	return r
}

// Enter the field names followed by comma
func (r SmartfolderGlobalAPISmartfolderglobalPostRequest) ReturnFields(returnFields string) SmartfolderGlobalAPISmartfolderglobalPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderGlobalAPISmartfolderglobalPostRequest) ReturnFields2(returnFields2 string) SmartfolderGlobalAPISmartfolderglobalPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderGlobalAPISmartfolderglobalPostRequest) ReturnAsObject(returnAsObject int32) SmartfolderGlobalAPISmartfolderglobalPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SmartfolderGlobalAPISmartfolderglobalPostRequest) Execute() (*CreateSmartfolderGlobalResponse, *http.Response, error) {
	return r.ApiService.SmartfolderglobalPostExecute(r)
}

/*
SmartfolderglobalPost Create a smartfolder:global object

Creates a new smartfolder:global object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SmartfolderGlobalAPISmartfolderglobalPostRequest
*/
func (a *SmartfolderGlobalAPIService) SmartfolderglobalPost(ctx context.Context) SmartfolderGlobalAPISmartfolderglobalPostRequest {
	return SmartfolderGlobalAPISmartfolderglobalPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSmartfolderGlobalResponse
func (a *SmartfolderGlobalAPIService) SmartfolderglobalPostExecute(r SmartfolderGlobalAPISmartfolderglobalPostRequest) (*CreateSmartfolderGlobalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSmartfolderGlobalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.SmartfolderglobalPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smartfolderGlobal == nil {
		return localVarReturnValue, nil, internal.ReportError("smartfolderGlobal is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smartfolderGlobal
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartfolderGlobalAPISmartfolderglobalReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService SmartfolderGlobalAPI
	reference  string
}

func (r SmartfolderGlobalAPISmartfolderglobalReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SmartfolderglobalReferenceDeleteExecute(r)
}

/*
SmartfolderglobalReferenceDelete Delete a smartfolder:global object

Deletes a specific smartfolder:global object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the smartfolder:global object
	@return SmartfolderGlobalAPISmartfolderglobalReferenceDeleteRequest
*/
func (a *SmartfolderGlobalAPIService) SmartfolderglobalReferenceDelete(ctx context.Context, reference string) SmartfolderGlobalAPISmartfolderglobalReferenceDeleteRequest {
	return SmartfolderGlobalAPISmartfolderglobalReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SmartfolderGlobalAPIService) SmartfolderglobalReferenceDeleteExecute(r SmartfolderGlobalAPISmartfolderglobalReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.SmartfolderglobalReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest struct {
	ctx            context.Context
	ApiService     SmartfolderGlobalAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest) ReturnFields(returnFields string) SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest) ReturnFields2(returnFields2 string) SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest) ReturnAsObject(returnAsObject int32) SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest) Execute() (*GetSmartfolderGlobalResponse, *http.Response, error) {
	return r.ApiService.SmartfolderglobalReferenceGetExecute(r)
}

/*
SmartfolderglobalReferenceGet Get a specific smartfolder:global object

Returns a specific smartfolder:global object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the smartfolder:global object
	@return SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest
*/
func (a *SmartfolderGlobalAPIService) SmartfolderglobalReferenceGet(ctx context.Context, reference string) SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest {
	return SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSmartfolderGlobalResponse
func (a *SmartfolderGlobalAPIService) SmartfolderglobalReferenceGetExecute(r SmartfolderGlobalAPISmartfolderglobalReferenceGetRequest) (*GetSmartfolderGlobalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSmartfolderGlobalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.SmartfolderglobalReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartfolderGlobalAPISmartfolderglobalReferencePutRequest struct {
	ctx               context.Context
	ApiService        SmartfolderGlobalAPI
	reference         string
	smartfolderGlobal *SmartfolderGlobal
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to update
func (r SmartfolderGlobalAPISmartfolderglobalReferencePutRequest) SmartfolderGlobal(smartfolderGlobal SmartfolderGlobal) SmartfolderGlobalAPISmartfolderglobalReferencePutRequest {
	r.smartfolderGlobal = &smartfolderGlobal
	return r
}

// Enter the field names followed by comma
func (r SmartfolderGlobalAPISmartfolderglobalReferencePutRequest) ReturnFields(returnFields string) SmartfolderGlobalAPISmartfolderglobalReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderGlobalAPISmartfolderglobalReferencePutRequest) ReturnFields2(returnFields2 string) SmartfolderGlobalAPISmartfolderglobalReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderGlobalAPISmartfolderglobalReferencePutRequest) ReturnAsObject(returnAsObject int32) SmartfolderGlobalAPISmartfolderglobalReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SmartfolderGlobalAPISmartfolderglobalReferencePutRequest) Execute() (*UpdateSmartfolderGlobalResponse, *http.Response, error) {
	return r.ApiService.SmartfolderglobalReferencePutExecute(r)
}

/*
SmartfolderglobalReferencePut Update a smartfolder:global object

Updates a specific smartfolder:global object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the smartfolder:global object
	@return SmartfolderGlobalAPISmartfolderglobalReferencePutRequest
*/
func (a *SmartfolderGlobalAPIService) SmartfolderglobalReferencePut(ctx context.Context, reference string) SmartfolderGlobalAPISmartfolderglobalReferencePutRequest {
	return SmartfolderGlobalAPISmartfolderglobalReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSmartfolderGlobalResponse
func (a *SmartfolderGlobalAPIService) SmartfolderglobalReferencePutExecute(r SmartfolderGlobalAPISmartfolderglobalReferencePutRequest) (*UpdateSmartfolderGlobalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSmartfolderGlobalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.SmartfolderglobalReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smartfolderGlobal == nil {
		return localVarReturnValue, nil, internal.ReportError("smartfolderGlobal is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smartfolderGlobal
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
