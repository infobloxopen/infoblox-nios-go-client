/*
IbClient

Testing RecordaAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package tests

import (
	"context"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/v2.12.3/dns"
)

var readableAttributes = "aws_rte53_record_info,cloud_info,comment,creation_time,creator,ddns_principal,ddns_protected,disable,discovered_data,dns_name,extattrs,forbid_reclamation,ipv4addr,last_queried,ms_ad_user_data,name,reclaimable,shared_record_group,ttl,use_ttl,view,zone"

func TestCreateARecord(t *testing.T) {
	apiClient := dns.NewAPIClient()
	RecordA := dns.RecordA{
		Comment:  dns.PtrString("Test comment"),
		Name:     dns.PtrString("example_test.example.com"),
		Ipv4addr: dns.PtrString("192.168.1.1"),
	}
	resp, httpRes, err := apiClient.RecordaAPI.Post(context.Background()).RecordA(RecordA).ReturnFields2(readableAttributes).Execute()

	if err != nil {
		t.Errorf("Error: %v", err)
	}
	require.Nil(t, err)
	require.NotNil(t, resp)
	assert.Equal(t, 201, httpRes.StatusCode)
}

func TestGetARecords(t *testing.T) {
	apiClient := dns.NewAPIClient()
	resp, httpRes, err := apiClient.RecordaAPI.Get(context.Background()).ReturnFields2("comment").
		Filters(
			map[string]interface{}{
				"*Site":    "Site1",
				"comment~": "test*",
			},
		).Execute()

	if err != nil {
		t.Errorf("Error: %v", err)
	}

	assert.NotEmpty(t, resp)
	assert.Equal(t, 200, httpRes.StatusCode)
}

func TestGetARecordByReference(t *testing.T) {

	apiClient := dns.NewAPIClient()
	recordaReference := "ZG5zLmJpbmRfYSQuX2RlZmF1bHQuY29tLmV4YW1wbGUsdGVzdG1pbGxpb24xMiwxOTIuMTY4LjEuMQ:testmillion12.example.com/default"

	resp, _, err := apiClient.RecordaAPI.ReferenceGet(context.Background(), recordaReference).ReturnAsObject(1).Execute()

	assert.NotEmpty(t, resp)
	assert.Nil(t, err)
}

func TestUpdateARecord(t *testing.T) {
	apiClient := dns.NewAPIClient()
	RecordA := dns.RecordA{
		//Name:    "test8.example.com",
		Comment: dns.PtrString("Excuse Me ! This is newly updated comment"),
	}
	recordaReference := "ZG5zLmJpbmRfYSQuX2RlZmF1bHQuY29tLmV4YW1wbGUsdGVzdG1pbGxpb24xMiwxOTIuMTY4LjEuMQ:testmillion12.example.com/default"

	resp, httpRes, err := apiClient.RecordaAPI.ReferencePut(context.Background(), recordaReference).RecordA(RecordA).ReturnFields2("comment").ReturnAsObject(1).Execute()

	assert.NotEmpty(t, resp)
	assert.Equal(t, 200, httpRes.StatusCode)
	assert.Nil(t, err)
}

func TestDeleteARecord(t *testing.T) {
	apiClient := dns.NewAPIClient()
	recordaReference := "ZG5zLmJpbmRfYSQuX2RlZmF1bHQuY29tLmV4YW1wbGUsdGVzdG1pbGxpb24xMiwxOTIuMTY4LjEuMQ:testmillion12.example.com/default"

	resp, err := apiClient.RecordaAPI.ReferenceDelete(context.Background(), recordaReference).Execute()

	assert.NotEmpty(t, resp)
	assert.Nil(t, err)
	fmt.Println(resp)
}
