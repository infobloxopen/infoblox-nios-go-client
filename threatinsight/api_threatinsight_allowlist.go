/*
Infoblox THREATINSIGHT API

OpenAPI specification for Infoblox NIOS WAPI THREATINSIGHT objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatinsight

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type ThreatinsightAllowlistAPI interface {
	/*
		ThreatinsightallowlistGet Retrieve threatinsight:allowlist objects

		Returns a list of threatinsight:allowlist objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest
	*/
	ThreatinsightallowlistGet(ctx context.Context) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest

	// ThreatinsightallowlistGetExecute executes the request
	//  @return ListThreatinsightAllowlistResponse
	ThreatinsightallowlistGetExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) (*ListThreatinsightAllowlistResponse, *http.Response, error)
	/*
		ThreatinsightallowlistPost Create a threatinsight:allowlist object

		Creates a new threatinsight:allowlist object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest
	*/
	ThreatinsightallowlistPost(ctx context.Context) ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest

	// ThreatinsightallowlistPostExecute executes the request
	//  @return CreateThreatinsightAllowlistResponse
	ThreatinsightallowlistPostExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest) (*CreateThreatinsightAllowlistResponse, *http.Response, error)
	/*
		ThreatinsightallowlistReferenceDelete Delete a threatinsight:allowlist object

		Deletes a specific threatinsight:allowlist object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatinsight:allowlist object
		@return ThreatinsightAllowlistAPIThreatinsightallowlistReferenceDeleteRequest
	*/
	ThreatinsightallowlistReferenceDelete(ctx context.Context, reference string) ThreatinsightAllowlistAPIThreatinsightallowlistReferenceDeleteRequest

	// ThreatinsightallowlistReferenceDeleteExecute executes the request
	ThreatinsightallowlistReferenceDeleteExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistReferenceDeleteRequest) (*http.Response, error)
	/*
		ThreatinsightallowlistReferenceGet Get a specific threatinsight:allowlist object

		Returns a specific threatinsight:allowlist object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatinsight:allowlist object
		@return ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest
	*/
	ThreatinsightallowlistReferenceGet(ctx context.Context, reference string) ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest

	// ThreatinsightallowlistReferenceGetExecute executes the request
	//  @return GetThreatinsightAllowlistResponse
	ThreatinsightallowlistReferenceGetExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest) (*GetThreatinsightAllowlistResponse, *http.Response, error)
	/*
		ThreatinsightallowlistReferencePut Update a threatinsight:allowlist object

		Updates a specific threatinsight:allowlist object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatinsight:allowlist object
		@return ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest
	*/
	ThreatinsightallowlistReferencePut(ctx context.Context, reference string) ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest

	// ThreatinsightallowlistReferencePutExecute executes the request
	//  @return UpdateThreatinsightAllowlistResponse
	ThreatinsightallowlistReferencePutExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest) (*UpdateThreatinsightAllowlistResponse, *http.Response, error)
}

// ThreatinsightAllowlistAPIService ThreatinsightAllowlistAPI service
type ThreatinsightAllowlistAPIService internal.Service

type ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest struct {
	ctx            context.Context
	ApiService     ThreatinsightAllowlistAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) ReturnFields(returnFields string) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) ReturnFields2(returnFields2 string) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) MaxResults(maxResults int32) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) ReturnAsObject(returnAsObject int32) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) Paging(paging int32) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) PageId(pageId string) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest {
	r.pageId = &pageId
	return r
}

func (r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) Filters(filters map[string]interface{}) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest {
	r.filters = &filters
	return r
}

func (r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) Extattrfilter(extattrfilter map[string]interface{}) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) Execute() (*ListThreatinsightAllowlistResponse, *http.Response, error) {
	return r.ApiService.ThreatinsightallowlistGetExecute(r)
}

/*
ThreatinsightallowlistGet Retrieve threatinsight:allowlist objects

Returns a list of threatinsight:allowlist objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest
*/
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistGet(ctx context.Context) ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest {
	return ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListThreatinsightAllowlistResponse
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistGetExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistGetRequest) (*ListThreatinsightAllowlistResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListThreatinsightAllowlistResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.ThreatinsightallowlistGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest struct {
	ctx                    context.Context
	ApiService             ThreatinsightAllowlistAPI
	threatinsightAllowlist *ThreatinsightAllowlist
	returnFields           *string
	returnFields2          *string
	returnAsObject         *int32
}

// Object data to create
func (r ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest) ThreatinsightAllowlist(threatinsightAllowlist ThreatinsightAllowlist) ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest {
	r.threatinsightAllowlist = &threatinsightAllowlist
	return r
}

// Enter the field names followed by comma
func (r ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest) ReturnFields(returnFields string) ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest) ReturnFields2(returnFields2 string) ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest) ReturnAsObject(returnAsObject int32) ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest) Execute() (*CreateThreatinsightAllowlistResponse, *http.Response, error) {
	return r.ApiService.ThreatinsightallowlistPostExecute(r)
}

/*
ThreatinsightallowlistPost Create a threatinsight:allowlist object

Creates a new threatinsight:allowlist object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest
*/
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistPost(ctx context.Context) ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest {
	return ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateThreatinsightAllowlistResponse
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistPostExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistPostRequest) (*CreateThreatinsightAllowlistResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateThreatinsightAllowlistResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.ThreatinsightallowlistPost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatinsightAllowlist == nil {
		return localVarReturnValue, nil, internal.ReportError("threatinsightAllowlist is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatinsightAllowlist
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatinsightAllowlistAPIThreatinsightallowlistReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService ThreatinsightAllowlistAPI
	reference  string
}

func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ThreatinsightallowlistReferenceDeleteExecute(r)
}

/*
ThreatinsightallowlistReferenceDelete Delete a threatinsight:allowlist object

Deletes a specific threatinsight:allowlist object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatinsight:allowlist object
	@return ThreatinsightAllowlistAPIThreatinsightallowlistReferenceDeleteRequest
*/
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistReferenceDelete(ctx context.Context, reference string) ThreatinsightAllowlistAPIThreatinsightallowlistReferenceDeleteRequest {
	return ThreatinsightAllowlistAPIThreatinsightallowlistReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistReferenceDeleteExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.ThreatinsightallowlistReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest struct {
	ctx            context.Context
	ApiService     ThreatinsightAllowlistAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest) ReturnFields(returnFields string) ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest) ReturnFields2(returnFields2 string) ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest) ReturnAsObject(returnAsObject int32) ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest) Execute() (*GetThreatinsightAllowlistResponse, *http.Response, error) {
	return r.ApiService.ThreatinsightallowlistReferenceGetExecute(r)
}

/*
ThreatinsightallowlistReferenceGet Get a specific threatinsight:allowlist object

Returns a specific threatinsight:allowlist object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatinsight:allowlist object
	@return ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest
*/
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistReferenceGet(ctx context.Context, reference string) ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest {
	return ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetThreatinsightAllowlistResponse
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistReferenceGetExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistReferenceGetRequest) (*GetThreatinsightAllowlistResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetThreatinsightAllowlistResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.ThreatinsightallowlistReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest struct {
	ctx                    context.Context
	ApiService             ThreatinsightAllowlistAPI
	reference              string
	threatinsightAllowlist *ThreatinsightAllowlist
	returnFields           *string
	returnFields2          *string
	returnAsObject         *int32
}

// Object data to update
func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest) ThreatinsightAllowlist(threatinsightAllowlist ThreatinsightAllowlist) ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest {
	r.threatinsightAllowlist = &threatinsightAllowlist
	return r
}

// Enter the field names followed by comma
func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest) ReturnFields(returnFields string) ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest) ReturnFields2(returnFields2 string) ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest) ReturnAsObject(returnAsObject int32) ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest) Execute() (*UpdateThreatinsightAllowlistResponse, *http.Response, error) {
	return r.ApiService.ThreatinsightallowlistReferencePutExecute(r)
}

/*
ThreatinsightallowlistReferencePut Update a threatinsight:allowlist object

Updates a specific threatinsight:allowlist object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatinsight:allowlist object
	@return ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest
*/
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistReferencePut(ctx context.Context, reference string) ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest {
	return ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateThreatinsightAllowlistResponse
func (a *ThreatinsightAllowlistAPIService) ThreatinsightallowlistReferencePutExecute(r ThreatinsightAllowlistAPIThreatinsightallowlistReferencePutRequest) (*UpdateThreatinsightAllowlistResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateThreatinsightAllowlistResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.ThreatinsightallowlistReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatinsightAllowlist == nil {
		return localVarReturnValue, nil, internal.ReportError("threatinsightAllowlist is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatinsightAllowlist
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
