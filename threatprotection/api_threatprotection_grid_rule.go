/*
Infoblox THREATPROTECTION API

OpenAPI specification for Infoblox NIOS WAPI THREATPROTECTION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatprotection

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type ThreatprotectionGridRuleAPI interface {
	/*
		ThreatprotectiongridruleGet Retrieve threatprotection:grid:rule objects

		Returns a list of threatprotection:grid:rule objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest
	*/
	ThreatprotectiongridruleGet(ctx context.Context) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest

	// ThreatprotectiongridruleGetExecute executes the request
	//  @return ListThreatprotectionGridRuleResponse
	ThreatprotectiongridruleGetExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) (*ListThreatprotectionGridRuleResponse, *http.Response, error)
	/*
		ThreatprotectiongridrulePost Create a threatprotection:grid:rule object

		Creates a new threatprotection:grid:rule object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest
	*/
	ThreatprotectiongridrulePost(ctx context.Context) ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest

	// ThreatprotectiongridrulePostExecute executes the request
	//  @return CreateThreatprotectionGridRuleResponse
	ThreatprotectiongridrulePostExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest) (*CreateThreatprotectionGridRuleResponse, *http.Response, error)
	/*
		ThreatprotectiongridruleReferenceDelete Delete a threatprotection:grid:rule object

		Deletes a specific threatprotection:grid:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:grid:rule object
		@return ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceDeleteRequest
	*/
	ThreatprotectiongridruleReferenceDelete(ctx context.Context, reference string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceDeleteRequest

	// ThreatprotectiongridruleReferenceDeleteExecute executes the request
	ThreatprotectiongridruleReferenceDeleteExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceDeleteRequest) (*http.Response, error)
	/*
		ThreatprotectiongridruleReferenceGet Get a specific threatprotection:grid:rule object

		Returns a specific threatprotection:grid:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:grid:rule object
		@return ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest
	*/
	ThreatprotectiongridruleReferenceGet(ctx context.Context, reference string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest

	// ThreatprotectiongridruleReferenceGetExecute executes the request
	//  @return GetThreatprotectionGridRuleResponse
	ThreatprotectiongridruleReferenceGetExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest) (*GetThreatprotectionGridRuleResponse, *http.Response, error)
	/*
		ThreatprotectiongridruleReferencePut Update a threatprotection:grid:rule object

		Updates a specific threatprotection:grid:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:grid:rule object
		@return ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest
	*/
	ThreatprotectiongridruleReferencePut(ctx context.Context, reference string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest

	// ThreatprotectiongridruleReferencePutExecute executes the request
	//  @return UpdateThreatprotectionGridRuleResponse
	ThreatprotectiongridruleReferencePutExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest) (*UpdateThreatprotectionGridRuleResponse, *http.Response, error)
}

// ThreatprotectionGridRuleAPIService ThreatprotectionGridRuleAPI service
type ThreatprotectionGridRuleAPIService internal.Service

type ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest struct {
	ctx            context.Context
	ApiService     ThreatprotectionGridRuleAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) ReturnFields(returnFields string) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) ReturnFields2(returnFields2 string) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) MaxResults(maxResults int32) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) Paging(paging int32) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) PageId(pageId string) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest {
	r.pageId = &pageId
	return r
}

func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) Filters(filters map[string]interface{}) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest {
	r.filters = &filters
	return r
}

func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) Extattrfilter(extattrfilter map[string]interface{}) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) Execute() (*ListThreatprotectionGridRuleResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectiongridruleGetExecute(r)
}

/*
ThreatprotectiongridruleGet Retrieve threatprotection:grid:rule objects

Returns a list of threatprotection:grid:rule objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest
*/
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridruleGet(ctx context.Context) ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest {
	return ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListThreatprotectionGridRuleResponse
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridruleGetExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridruleGetRequest) (*ListThreatprotectionGridRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListThreatprotectionGridRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.ThreatprotectiongridruleGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest struct {
	ctx                      context.Context
	ApiService               ThreatprotectionGridRuleAPI
	threatprotectionGridRule *ThreatprotectionGridRule
	returnFields             *string
	returnFields2            *string
	returnAsObject           *int32
}

// Object data to create
func (r ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest) ThreatprotectionGridRule(threatprotectionGridRule ThreatprotectionGridRule) ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest {
	r.threatprotectionGridRule = &threatprotectionGridRule
	return r
}

// Enter the field names followed by comma
func (r ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest) ReturnFields(returnFields string) ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest) ReturnFields2(returnFields2 string) ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest) Execute() (*CreateThreatprotectionGridRuleResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectiongridrulePostExecute(r)
}

/*
ThreatprotectiongridrulePost Create a threatprotection:grid:rule object

Creates a new threatprotection:grid:rule object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest
*/
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridrulePost(ctx context.Context) ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest {
	return ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateThreatprotectionGridRuleResponse
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridrulePostExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridrulePostRequest) (*CreateThreatprotectionGridRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateThreatprotectionGridRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.ThreatprotectiongridrulePost")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatprotectionGridRule == nil {
		return localVarReturnValue, nil, internal.ReportError("threatprotectionGridRule is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatprotectionGridRule
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService ThreatprotectionGridRuleAPI
	reference  string
}

func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ThreatprotectiongridruleReferenceDeleteExecute(r)
}

/*
ThreatprotectiongridruleReferenceDelete Delete a threatprotection:grid:rule object

Deletes a specific threatprotection:grid:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:grid:rule object
	@return ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceDeleteRequest
*/
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridruleReferenceDelete(ctx context.Context, reference string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceDeleteRequest {
	return ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridruleReferenceDeleteExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.ThreatprotectiongridruleReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest struct {
	ctx            context.Context
	ApiService     ThreatprotectionGridRuleAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest) ReturnFields(returnFields string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest) ReturnFields2(returnFields2 string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest) Execute() (*GetThreatprotectionGridRuleResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectiongridruleReferenceGetExecute(r)
}

/*
ThreatprotectiongridruleReferenceGet Get a specific threatprotection:grid:rule object

Returns a specific threatprotection:grid:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:grid:rule object
	@return ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest
*/
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridruleReferenceGet(ctx context.Context, reference string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest {
	return ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetThreatprotectionGridRuleResponse
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridruleReferenceGetExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferenceGetRequest) (*GetThreatprotectionGridRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetThreatprotectionGridRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.ThreatprotectiongridruleReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest struct {
	ctx                      context.Context
	ApiService               ThreatprotectionGridRuleAPI
	reference                string
	threatprotectionGridRule *ThreatprotectionGridRule
	returnFields             *string
	returnFields2            *string
	returnAsObject           *int32
}

// Object data to update
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest) ThreatprotectionGridRule(threatprotectionGridRule ThreatprotectionGridRule) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest {
	r.threatprotectionGridRule = &threatprotectionGridRule
	return r
}

// Enter the field names followed by comma
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest) ReturnFields(returnFields string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest) ReturnFields2(returnFields2 string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest) Execute() (*UpdateThreatprotectionGridRuleResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectiongridruleReferencePutExecute(r)
}

/*
ThreatprotectiongridruleReferencePut Update a threatprotection:grid:rule object

Updates a specific threatprotection:grid:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:grid:rule object
	@return ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest
*/
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridruleReferencePut(ctx context.Context, reference string) ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest {
	return ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateThreatprotectionGridRuleResponse
func (a *ThreatprotectionGridRuleAPIService) ThreatprotectiongridruleReferencePutExecute(r ThreatprotectionGridRuleAPIThreatprotectiongridruleReferencePutRequest) (*UpdateThreatprotectionGridRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateThreatprotectionGridRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.ThreatprotectiongridruleReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatprotectionGridRule == nil {
		return localVarReturnValue, nil, internal.ReportError("threatprotectionGridRule is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatprotectionGridRule
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
