/*
Infoblox THREATPROTECTION API

OpenAPI specification for Infoblox NIOS WAPI THREATPROTECTION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatprotection

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type ThreatprotectionRuleAPI interface {
	/*
		ThreatprotectionruleGet Retrieve threatprotection:rule objects

		Returns a list of threatprotection:rule objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatprotectionRuleAPIThreatprotectionruleGetRequest
	*/
	ThreatprotectionruleGet(ctx context.Context) ThreatprotectionRuleAPIThreatprotectionruleGetRequest

	// ThreatprotectionruleGetExecute executes the request
	//  @return ListThreatprotectionRuleResponse
	ThreatprotectionruleGetExecute(r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) (*ListThreatprotectionRuleResponse, *http.Response, error)
	/*
		ThreatprotectionruleReferenceGet Get a specific threatprotection:rule object

		Returns a specific threatprotection:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:rule object
		@return ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest
	*/
	ThreatprotectionruleReferenceGet(ctx context.Context, reference string) ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest

	// ThreatprotectionruleReferenceGetExecute executes the request
	//  @return GetThreatprotectionRuleResponse
	ThreatprotectionruleReferenceGetExecute(r ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest) (*GetThreatprotectionRuleResponse, *http.Response, error)
	/*
		ThreatprotectionruleReferencePut Update a threatprotection:rule object

		Updates a specific threatprotection:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:rule object
		@return ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest
	*/
	ThreatprotectionruleReferencePut(ctx context.Context, reference string) ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest

	// ThreatprotectionruleReferencePutExecute executes the request
	//  @return UpdateThreatprotectionRuleResponse
	ThreatprotectionruleReferencePutExecute(r ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest) (*UpdateThreatprotectionRuleResponse, *http.Response, error)
}

// ThreatprotectionRuleAPIService ThreatprotectionRuleAPI service
type ThreatprotectionRuleAPIService internal.Service

type ThreatprotectionRuleAPIThreatprotectionruleGetRequest struct {
	ctx            context.Context
	ApiService     ThreatprotectionRuleAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) ReturnFields(returnFields string) ThreatprotectionRuleAPIThreatprotectionruleGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) ReturnFields2(returnFields2 string) ThreatprotectionRuleAPIThreatprotectionruleGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) MaxResults(maxResults int32) ThreatprotectionRuleAPIThreatprotectionruleGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionRuleAPIThreatprotectionruleGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) Paging(paging int32) ThreatprotectionRuleAPIThreatprotectionruleGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) PageId(pageId string) ThreatprotectionRuleAPIThreatprotectionruleGetRequest {
	r.pageId = &pageId
	return r
}

func (r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) Filters(filters map[string]interface{}) ThreatprotectionRuleAPIThreatprotectionruleGetRequest {
	r.filters = &filters
	return r
}

func (r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) Extattrfilter(extattrfilter map[string]interface{}) ThreatprotectionRuleAPIThreatprotectionruleGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) Execute() (*ListThreatprotectionRuleResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectionruleGetExecute(r)
}

/*
ThreatprotectionruleGet Retrieve threatprotection:rule objects

Returns a list of threatprotection:rule objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatprotectionRuleAPIThreatprotectionruleGetRequest
*/
func (a *ThreatprotectionRuleAPIService) ThreatprotectionruleGet(ctx context.Context) ThreatprotectionRuleAPIThreatprotectionruleGetRequest {
	return ThreatprotectionRuleAPIThreatprotectionruleGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListThreatprotectionRuleResponse
func (a *ThreatprotectionRuleAPIService) ThreatprotectionruleGetExecute(r ThreatprotectionRuleAPIThreatprotectionruleGetRequest) (*ListThreatprotectionRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListThreatprotectionRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionRuleAPIService.ThreatprotectionruleGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest struct {
	ctx            context.Context
	ApiService     ThreatprotectionRuleAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest) ReturnFields(returnFields string) ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest) ReturnFields2(returnFields2 string) ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest) Execute() (*GetThreatprotectionRuleResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectionruleReferenceGetExecute(r)
}

/*
ThreatprotectionruleReferenceGet Get a specific threatprotection:rule object

Returns a specific threatprotection:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:rule object
	@return ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest
*/
func (a *ThreatprotectionRuleAPIService) ThreatprotectionruleReferenceGet(ctx context.Context, reference string) ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest {
	return ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetThreatprotectionRuleResponse
func (a *ThreatprotectionRuleAPIService) ThreatprotectionruleReferenceGetExecute(r ThreatprotectionRuleAPIThreatprotectionruleReferenceGetRequest) (*GetThreatprotectionRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetThreatprotectionRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionRuleAPIService.ThreatprotectionruleReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest struct {
	ctx                  context.Context
	ApiService           ThreatprotectionRuleAPI
	reference            string
	threatprotectionRule *ThreatprotectionRule
	returnFields         *string
	returnFields2        *string
	returnAsObject       *int32
}

// Object data to update
func (r ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest) ThreatprotectionRule(threatprotectionRule ThreatprotectionRule) ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest {
	r.threatprotectionRule = &threatprotectionRule
	return r
}

// Enter the field names followed by comma
func (r ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest) ReturnFields(returnFields string) ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest) ReturnFields2(returnFields2 string) ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest) Execute() (*UpdateThreatprotectionRuleResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectionruleReferencePutExecute(r)
}

/*
ThreatprotectionruleReferencePut Update a threatprotection:rule object

Updates a specific threatprotection:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:rule object
	@return ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest
*/
func (a *ThreatprotectionRuleAPIService) ThreatprotectionruleReferencePut(ctx context.Context, reference string) ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest {
	return ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateThreatprotectionRuleResponse
func (a *ThreatprotectionRuleAPIService) ThreatprotectionruleReferencePutExecute(r ThreatprotectionRuleAPIThreatprotectionruleReferencePutRequest) (*UpdateThreatprotectionRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateThreatprotectionRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionRuleAPIService.ThreatprotectionruleReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatprotectionRule == nil {
		return localVarReturnValue, nil, internal.ReportError("threatprotectionRule is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatprotectionRule
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
