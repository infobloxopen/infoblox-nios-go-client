/*
Infoblox THREATPROTECTION API

OpenAPI specification for Infoblox NIOS WAPI THREATPROTECTION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatprotection

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type ThreatprotectionRulesetAPI interface {
	/*
		ThreatprotectionrulesetGet Retrieve threatprotection:ruleset objects

		Returns a list of threatprotection:ruleset objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest
	*/
	ThreatprotectionrulesetGet(ctx context.Context) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest

	// ThreatprotectionrulesetGetExecute executes the request
	//  @return ListThreatprotectionRulesetResponse
	ThreatprotectionrulesetGetExecute(r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) (*ListThreatprotectionRulesetResponse, *http.Response, error)
	/*
		ThreatprotectionrulesetReferenceDelete Delete a threatprotection:ruleset object

		Deletes a specific threatprotection:ruleset object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:ruleset object
		@return ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceDeleteRequest
	*/
	ThreatprotectionrulesetReferenceDelete(ctx context.Context, reference string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceDeleteRequest

	// ThreatprotectionrulesetReferenceDeleteExecute executes the request
	ThreatprotectionrulesetReferenceDeleteExecute(r ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceDeleteRequest) (*http.Response, error)
	/*
		ThreatprotectionrulesetReferenceGet Get a specific threatprotection:ruleset object

		Returns a specific threatprotection:ruleset object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:ruleset object
		@return ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest
	*/
	ThreatprotectionrulesetReferenceGet(ctx context.Context, reference string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest

	// ThreatprotectionrulesetReferenceGetExecute executes the request
	//  @return GetThreatprotectionRulesetResponse
	ThreatprotectionrulesetReferenceGetExecute(r ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest) (*GetThreatprotectionRulesetResponse, *http.Response, error)
	/*
		ThreatprotectionrulesetReferencePut Update a threatprotection:ruleset object

		Updates a specific threatprotection:ruleset object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:ruleset object
		@return ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest
	*/
	ThreatprotectionrulesetReferencePut(ctx context.Context, reference string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest

	// ThreatprotectionrulesetReferencePutExecute executes the request
	//  @return UpdateThreatprotectionRulesetResponse
	ThreatprotectionrulesetReferencePutExecute(r ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest) (*UpdateThreatprotectionRulesetResponse, *http.Response, error)
}

// ThreatprotectionRulesetAPIService ThreatprotectionRulesetAPI service
type ThreatprotectionRulesetAPIService internal.Service

type ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest struct {
	ctx            context.Context
	ApiService     ThreatprotectionRulesetAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) ReturnFields(returnFields string) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) ReturnFields2(returnFields2 string) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) MaxResults(maxResults int32) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) Paging(paging int32) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) PageId(pageId string) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest {
	r.pageId = &pageId
	return r
}

func (r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) Filters(filters map[string]interface{}) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest {
	r.filters = &filters
	return r
}

func (r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) Extattrfilter(extattrfilter map[string]interface{}) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) Execute() (*ListThreatprotectionRulesetResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectionrulesetGetExecute(r)
}

/*
ThreatprotectionrulesetGet Retrieve threatprotection:ruleset objects

Returns a list of threatprotection:ruleset objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest
*/
func (a *ThreatprotectionRulesetAPIService) ThreatprotectionrulesetGet(ctx context.Context) ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest {
	return ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListThreatprotectionRulesetResponse
func (a *ThreatprotectionRulesetAPIService) ThreatprotectionrulesetGetExecute(r ThreatprotectionRulesetAPIThreatprotectionrulesetGetRequest) (*ListThreatprotectionRulesetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListThreatprotectionRulesetResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionRulesetAPIService.ThreatprotectionrulesetGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:ruleset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService ThreatprotectionRulesetAPI
	reference  string
}

func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ThreatprotectionrulesetReferenceDeleteExecute(r)
}

/*
ThreatprotectionrulesetReferenceDelete Delete a threatprotection:ruleset object

Deletes a specific threatprotection:ruleset object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:ruleset object
	@return ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceDeleteRequest
*/
func (a *ThreatprotectionRulesetAPIService) ThreatprotectionrulesetReferenceDelete(ctx context.Context, reference string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceDeleteRequest {
	return ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *ThreatprotectionRulesetAPIService) ThreatprotectionrulesetReferenceDeleteExecute(r ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionRulesetAPIService.ThreatprotectionrulesetReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:ruleset/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest struct {
	ctx            context.Context
	ApiService     ThreatprotectionRulesetAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest) ReturnFields(returnFields string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest) ReturnFields2(returnFields2 string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest) Execute() (*GetThreatprotectionRulesetResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectionrulesetReferenceGetExecute(r)
}

/*
ThreatprotectionrulesetReferenceGet Get a specific threatprotection:ruleset object

Returns a specific threatprotection:ruleset object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:ruleset object
	@return ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest
*/
func (a *ThreatprotectionRulesetAPIService) ThreatprotectionrulesetReferenceGet(ctx context.Context, reference string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest {
	return ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetThreatprotectionRulesetResponse
func (a *ThreatprotectionRulesetAPIService) ThreatprotectionrulesetReferenceGetExecute(r ThreatprotectionRulesetAPIThreatprotectionrulesetReferenceGetRequest) (*GetThreatprotectionRulesetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetThreatprotectionRulesetResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionRulesetAPIService.ThreatprotectionrulesetReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:ruleset/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest struct {
	ctx                     context.Context
	ApiService              ThreatprotectionRulesetAPI
	reference               string
	threatprotectionRuleset *ThreatprotectionRuleset
	returnFields            *string
	returnFields2           *string
	returnAsObject          *int32
}

// Object data to update
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest) ThreatprotectionRuleset(threatprotectionRuleset ThreatprotectionRuleset) ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest {
	r.threatprotectionRuleset = &threatprotectionRuleset
	return r
}

// Enter the field names followed by comma
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest) ReturnFields(returnFields string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest) ReturnFields2(returnFields2 string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest) Execute() (*UpdateThreatprotectionRulesetResponse, *http.Response, error) {
	return r.ApiService.ThreatprotectionrulesetReferencePutExecute(r)
}

/*
ThreatprotectionrulesetReferencePut Update a threatprotection:ruleset object

Updates a specific threatprotection:ruleset object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:ruleset object
	@return ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest
*/
func (a *ThreatprotectionRulesetAPIService) ThreatprotectionrulesetReferencePut(ctx context.Context, reference string) ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest {
	return ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateThreatprotectionRulesetResponse
func (a *ThreatprotectionRulesetAPIService) ThreatprotectionrulesetReferencePutExecute(r ThreatprotectionRulesetAPIThreatprotectionrulesetReferencePutRequest) (*UpdateThreatprotectionRulesetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateThreatprotectionRulesetResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionRulesetAPIService.ThreatprotectionrulesetReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:ruleset/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatprotectionRuleset == nil {
		return localVarReturnValue, nil, internal.ReportError("threatprotectionRuleset is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatprotectionRuleset
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
